// Package models contains the types for schema 'ms'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// MsgSeenByPeer represents a row from 'ms.msg_seen_by_peer'.

// Manualy copy this to project
type MsgSeenByPeer__ struct {
	Id         int    `json:"Id"`         // Id -
	ToUserId   int    `json:"ToUserId"`   // ToUserId -
	MsgKey     string `json:"MsgKey"`     // MsgKey -
	RoomKey    string `json:"RoomKey"`    // RoomKey -
	PeerUserId int    `json:"PeerUserId"` // PeerUserId -
	AtTime     int    `json:"AtTime"`     // AtTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MsgSeenByPeer exists in the database.
func (msbp *MsgSeenByPeer) Exists() bool {
	return msbp._exists
}

// Deleted provides information if the MsgSeenByPeer has been deleted from the database.
func (msbp *MsgSeenByPeer) Deleted() bool {
	return msbp._deleted
}

// Insert inserts the MsgSeenByPeer to the database.
func (msbp *MsgSeenByPeer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if msbp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.msg_seen_by_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, AtTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime)
	res, err := db.Exec(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	msbp.Id = int(id)
	msbp._exists = true

	OnMsgSeenByPeer_AfterInsert(msbp)

	return nil
}

// Insert inserts the MsgSeenByPeer to the database.
func (msbp *MsgSeenByPeer) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.msg_seen_by_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, AtTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime)
	res, err := db.Exec(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	msbp.Id = int(id)
	msbp._exists = true

	OnMsgSeenByPeer_AfterInsert(msbp)

	return nil
}

// Update updates the MsgSeenByPeer in the database.
func (msbp *MsgSeenByPeer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !msbp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if msbp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.msg_seen_by_peer SET ` +
		`ToUserId = ?, MsgKey = ?, RoomKey = ?, PeerUserId = ?, AtTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime, msbp.Id)
	_, err = db.Exec(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime, msbp.Id)

	XOLogErr(err)
	OnMsgSeenByPeer_AfterUpdate(msbp)

	return err
}

// Save saves the MsgSeenByPeer to the database.
func (msbp *MsgSeenByPeer) Save(db XODB) error {
	if msbp.Exists() {
		return msbp.Update(db)
	}

	return msbp.Replace(db)
}

// Delete deletes the MsgSeenByPeer from the database.
func (msbp *MsgSeenByPeer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !msbp._exists {
		return nil
	}

	// if deleted, bail
	if msbp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.msg_seen_by_peer WHERE Id = ?`

	// run query
	XOLog(sqlstr, msbp.Id)
	_, err = db.Exec(sqlstr, msbp.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	msbp._deleted = true

	OnMsgSeenByPeer_AfterDelete(msbp)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MsgSeenByPeer_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MsgSeenByPeer_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MsgSeenByPeer_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMsgSeenByPeer_Deleter() *__MsgSeenByPeer_Deleter {
	d := __MsgSeenByPeer_Deleter{whereSep: " AND "}
	return &d
}

func NewMsgSeenByPeer_Updater() *__MsgSeenByPeer_Updater {
	u := __MsgSeenByPeer_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMsgSeenByPeer_Selector() *__MsgSeenByPeer_Selector {
	u := __MsgSeenByPeer_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MsgSeenByPeer_Deleter) Or() *__MsgSeenByPeer_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MsgSeenByPeer_Deleter) Id_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) Id_Ins(ins ...int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) Id_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) Id_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) ToUserId_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) ToUserId_Ins(ins ...int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) ToUserId_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) PeerUserId_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) PeerUserId_Ins(ins ...int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) PeerUserId_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) AtTime_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) AtTime_Ins(ins ...int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) AtTime_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) AtTime_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgSeenByPeer_Updater) Or() *__MsgSeenByPeer_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MsgSeenByPeer_Updater) Id_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) Id_Ins(ins ...int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) Id_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) Id_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) ToUserId_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) ToUserId_Ins(ins ...int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) ToUserId_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) ToUserId_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) PeerUserId_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) PeerUserId_Ins(ins ...int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) PeerUserId_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) AtTime_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) AtTime_Ins(ins ...int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) AtTime_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) AtTime_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgSeenByPeer_Selector) Or() *__MsgSeenByPeer_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MsgSeenByPeer_Selector) Id_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) Id_Ins(ins ...int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) Id_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) Id_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) ToUserId_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) ToUserId_Ins(ins ...int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) ToUserId_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) ToUserId_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) PeerUserId_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) PeerUserId_Ins(ins ...int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) PeerUserId_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) AtTime_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) AtTime_Ins(ins ...int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) AtTime_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) AtTime_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MsgSeenByPeer_Deleter) MsgKey_In(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) MsgKey_NotIn(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Deleter) MsgKey_Like(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) MsgKey_EQ(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) RoomKey_In(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) RoomKey_NotIn(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Deleter) RoomKey_Like(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) RoomKey_EQ(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgSeenByPeer_Updater) MsgKey_In(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) MsgKey_NotIn(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Updater) MsgKey_Like(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) MsgKey_EQ(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) RoomKey_In(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) RoomKey_NotIn(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Updater) RoomKey_Like(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) RoomKey_EQ(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgSeenByPeer_Selector) MsgKey_In(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) MsgKey_NotIn(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Selector) MsgKey_Like(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) MsgKey_EQ(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) RoomKey_In(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) RoomKey_NotIn(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Selector) RoomKey_Like(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) RoomKey_EQ(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MsgSeenByPeer_Updater) Id(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__MsgSeenByPeer_Updater) Id_Increment(count int) *__MsgSeenByPeer_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgSeenByPeer_Updater) ToUserId(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__MsgSeenByPeer_Updater) ToUserId_Increment(count int) *__MsgSeenByPeer_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MsgSeenByPeer_Updater) MsgKey(newVal string) *__MsgSeenByPeer_Updater {
	u.updates[" MsgKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__MsgSeenByPeer_Updater) RoomKey(newVal string) *__MsgSeenByPeer_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__MsgSeenByPeer_Updater) PeerUserId(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

func (u *__MsgSeenByPeer_Updater) PeerUserId_Increment(count int) *__MsgSeenByPeer_Updater {
	if count > 0 {
		u.updates[" PeerUserId = PeerUserId+? "] = count
	}

	if count < 0 {
		u.updates[" PeerUserId = PeerUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgSeenByPeer_Updater) AtTime(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" AtTime = ? "] = newVal
	return u
}

func (u *__MsgSeenByPeer_Updater) AtTime_Increment(count int) *__MsgSeenByPeer_Updater {
	if count > 0 {
		u.updates[" AtTime = AtTime+? "] = count
	}

	if count < 0 {
		u.updates[" AtTime = AtTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MsgSeenByPeer_Selector) OrderBy_Id_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_Id_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_Id() *__MsgSeenByPeer_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_ToUserId_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_ToUserId_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_ToUserId() *__MsgSeenByPeer_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_MsgKey_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY MsgKey DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_MsgKey_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY MsgKey ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_MsgKey() *__MsgSeenByPeer_Selector {
	u.selectCol = "MsgKey"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_RoomKey_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_RoomKey_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_RoomKey() *__MsgSeenByPeer_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_PeerUserId_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_PeerUserId_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_PeerUserId() *__MsgSeenByPeer_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_AtTime_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY AtTime DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_AtTime_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY AtTime ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_AtTime() *__MsgSeenByPeer_Selector {
	u.selectCol = "AtTime"
	return u
}

func (u *__MsgSeenByPeer_Selector) Limit(num int) *__MsgSeenByPeer_Selector {
	u.limit = num
	return u
}

func (u *__MsgSeenByPeer_Selector) Offset(num int) *__MsgSeenByPeer_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MsgSeenByPeer_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.msg_seen_by_peer"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MsgSeenByPeer_Selector) GetRow(db *sqlx.DB) (*MsgSeenByPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MsgSeenByPeer{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnMsgSeenByPeer_LoadOne(row)

	return row, nil
}

func (u *__MsgSeenByPeer_Selector) GetRows(db *sqlx.DB) ([]*MsgSeenByPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MsgSeenByPeer
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMsgSeenByPeer_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__MsgSeenByPeer_Selector) GetRows2(db *sqlx.DB) ([]MsgSeenByPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MsgSeenByPeer
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMsgSeenByPeer_LoadMany(rows)

	rows2 := make([]MsgSeenByPeer, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__MsgSeenByPeer_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__MsgSeenByPeer_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MsgSeenByPeer_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MsgSeenByPeer_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MsgSeenByPeer_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.msg_seen_by_peer SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__MsgSeenByPeer_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.msg_seen_by_peer WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MsgSeenByPeer ////////////////
func MassInsert_MsgSeenByPeer(rows []MsgSeenByPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.msg_seen_by_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, AtTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MsgKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.AtTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_MsgSeenByPeer(rows []MsgSeenByPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.msg_seen_by_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, AtTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MsgKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.AtTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// MsgSeenByPeersByToUserId retrieves a row from 'ms.msg_seen_by_peer' as a MsgSeenByPeer.
//
// Generated from index 'ToUserId'.
func MsgSeenByPeersByToUserId(db XODB, toUserId int) ([]*MsgSeenByPeer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, MsgKey, RoomKey, PeerUserId, AtTime ` +
		`FROM ms.msg_seen_by_peer ` +
		`WHERE ToUserId = ?`

	// run query
	XOLog(sqlstr, toUserId)
	q, err := db.Query(sqlstr, toUserId)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MsgSeenByPeer{}
	for q.Next() {
		msbp := MsgSeenByPeer{
			_exists: true,
		}

		// scan
		err = q.Scan(&msbp.Id, &msbp.ToUserId, &msbp.MsgKey, &msbp.RoomKey, &msbp.PeerUserId, &msbp.AtTime)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &msbp)
	}

	OnMsgSeenByPeer_LoadMany(res)

	return res, nil
}

// MsgSeenByPeerById retrieves a row from 'ms.msg_seen_by_peer' as a MsgSeenByPeer.
//
// Generated from index 'msg_seen_by_peer_Id_pkey'.
func MsgSeenByPeerById(db XODB, id int) (*MsgSeenByPeer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, MsgKey, RoomKey, PeerUserId, AtTime ` +
		`FROM ms.msg_seen_by_peer ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	msbp := MsgSeenByPeer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&msbp.Id, &msbp.ToUserId, &msbp.MsgKey, &msbp.RoomKey, &msbp.PeerUserId, &msbp.AtTime)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnMsgSeenByPeer_LoadOne(&msbp)

	return &msbp, nil
}
