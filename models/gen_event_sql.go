// Package models contains the types for schema 'ms'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"strconv"
	"time"
)

//Activity Events
func OnActivity_AfterInsert__(row *Activity) {
	RowCache.Set("Activity:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnActivity_AfterUpdate__(row *Activity) {
	RowCache.Set("Activity:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnActivity_AfterDelete__(row *Activity) {
	RowCache.Delete("Activity:" + strconv.Itoa(row.Id))
}

func OnActivity_LoadOne__(row *Activity) {
	RowCache.Set("Activity:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnActivity_LoadMany__(rows []*Activity) {
	for _, row := range rows {
		RowCache.Set("Activity:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//Comment Events
func OnComment_AfterInsert__(row *Comment) {
	RowCache.Set("Comment:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnComment_AfterUpdate__(row *Comment) {
	RowCache.Set("Comment:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnComment_AfterDelete__(row *Comment) {
	RowCache.Delete("Comment:" + strconv.Itoa(row.Id))
}

func OnComment_LoadOne__(row *Comment) {
	RowCache.Set("Comment:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnComment_LoadMany__(rows []*Comment) {
	for _, row := range rows {
		RowCache.Set("Comment:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//FollowingList Events
func OnFollowingList_AfterInsert__(row *FollowingList) {
	RowCache.Set("FollowingList:"+strconv.Itoa(row.UserId), row, time.Hour*0)
}

func OnFollowingList_AfterUpdate__(row *FollowingList) {
	RowCache.Set("FollowingList:"+strconv.Itoa(row.UserId), row, time.Hour*0)
}

func OnFollowingList_AfterDelete__(row *FollowingList) {
	RowCache.Delete("FollowingList:" + strconv.Itoa(row.UserId))
}

func OnFollowingList_LoadOne__(row *FollowingList) {
	RowCache.Set("FollowingList:"+strconv.Itoa(row.UserId), row, time.Hour*0)
}

func OnFollowingList_LoadMany__(rows []*FollowingList) {
	for _, row := range rows {
		RowCache.Set("FollowingList:"+strconv.Itoa(row.UserId), row, time.Hour*0)
	}
}

//FollowingListMember Events
func OnFollowingListMember_AfterInsert__(row *FollowingListMember) {
	RowCache.Set("FollowingListMember:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnFollowingListMember_AfterUpdate__(row *FollowingListMember) {
	RowCache.Set("FollowingListMember:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnFollowingListMember_AfterDelete__(row *FollowingListMember) {
	RowCache.Delete("FollowingListMember:" + strconv.Itoa(row.Id))
}

func OnFollowingListMember_LoadOne__(row *FollowingListMember) {
	RowCache.Set("FollowingListMember:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnFollowingListMember_LoadMany__(rows []*FollowingListMember) {
	for _, row := range rows {
		RowCache.Set("FollowingListMember:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//FollowingListMemberHistory Events
func OnFollowingListMemberHistory_AfterInsert__(row *FollowingListMemberHistory) {
	RowCache.Set("FollowingListMemberHistory:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnFollowingListMemberHistory_AfterUpdate__(row *FollowingListMemberHistory) {
	RowCache.Set("FollowingListMemberHistory:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnFollowingListMemberHistory_AfterDelete__(row *FollowingListMemberHistory) {
	RowCache.Delete("FollowingListMemberHistory:" + strconv.Itoa(row.Id))
}

func OnFollowingListMemberHistory_LoadOne__(row *FollowingListMemberHistory) {
	RowCache.Set("FollowingListMemberHistory:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnFollowingListMemberHistory_LoadMany__(rows []*FollowingListMemberHistory) {
	for _, row := range rows {
		RowCache.Set("FollowingListMemberHistory:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//Like Events
func OnLike_AfterInsert__(row *Like) {
	RowCache.Set("Like:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnLike_AfterUpdate__(row *Like) {
	RowCache.Set("Like:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnLike_AfterDelete__(row *Like) {
	RowCache.Delete("Like:" + strconv.Itoa(row.Id))
}

func OnLike_LoadOne__(row *Like) {
	RowCache.Set("Like:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnLike_LoadMany__(rows []*Like) {
	for _, row := range rows {
		RowCache.Set("Like:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//Media Events
func OnMedia_AfterInsert__(row *Media) {
	RowCache.Set("Media:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMedia_AfterUpdate__(row *Media) {
	RowCache.Set("Media:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMedia_AfterDelete__(row *Media) {
	RowCache.Delete("Media:" + strconv.Itoa(row.Id))
}

func OnMedia_LoadOne__(row *Media) {
	RowCache.Set("Media:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMedia_LoadMany__(rows []*Media) {
	for _, row := range rows {
		RowCache.Set("Media:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//Message Events
func OnMessage_AfterInsert__(row *Message) {
	RowCache.Set("Message:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMessage_AfterUpdate__(row *Message) {
	RowCache.Set("Message:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMessage_AfterDelete__(row *Message) {
	RowCache.Delete("Message:" + strconv.Itoa(row.Id))
}

func OnMessage_LoadOne__(row *Message) {
	RowCache.Set("Message:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMessage_LoadMany__(rows []*Message) {
	for _, row := range rows {
		RowCache.Set("Message:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//MsgDeletedFromServer Events
func OnMsgDeletedFromServer_AfterInsert__(row *MsgDeletedFromServer) {
	RowCache.Set("MsgDeletedFromServer:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMsgDeletedFromServer_AfterUpdate__(row *MsgDeletedFromServer) {
	RowCache.Set("MsgDeletedFromServer:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMsgDeletedFromServer_AfterDelete__(row *MsgDeletedFromServer) {
	RowCache.Delete("MsgDeletedFromServer:" + strconv.Itoa(row.Id))
}

func OnMsgDeletedFromServer_LoadOne__(row *MsgDeletedFromServer) {
	RowCache.Set("MsgDeletedFromServer:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMsgDeletedFromServer_LoadMany__(rows []*MsgDeletedFromServer) {
	for _, row := range rows {
		RowCache.Set("MsgDeletedFromServer:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//MsgReceivedToPeer Events
func OnMsgReceivedToPeer_AfterInsert__(row *MsgReceivedToPeer) {
	RowCache.Set("MsgReceivedToPeer:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMsgReceivedToPeer_AfterUpdate__(row *MsgReceivedToPeer) {
	RowCache.Set("MsgReceivedToPeer:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMsgReceivedToPeer_AfterDelete__(row *MsgReceivedToPeer) {
	RowCache.Delete("MsgReceivedToPeer:" + strconv.Itoa(row.Id))
}

func OnMsgReceivedToPeer_LoadOne__(row *MsgReceivedToPeer) {
	RowCache.Set("MsgReceivedToPeer:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMsgReceivedToPeer_LoadMany__(rows []*MsgReceivedToPeer) {
	for _, row := range rows {
		RowCache.Set("MsgReceivedToPeer:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//MsgSeenByPeer Events
func OnMsgSeenByPeer_AfterInsert__(row *MsgSeenByPeer) {
	RowCache.Set("MsgSeenByPeer:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMsgSeenByPeer_AfterUpdate__(row *MsgSeenByPeer) {
	RowCache.Set("MsgSeenByPeer:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMsgSeenByPeer_AfterDelete__(row *MsgSeenByPeer) {
	RowCache.Delete("MsgSeenByPeer:" + strconv.Itoa(row.Id))
}

func OnMsgSeenByPeer_LoadOne__(row *MsgSeenByPeer) {
	RowCache.Set("MsgSeenByPeer:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnMsgSeenByPeer_LoadMany__(rows []*MsgSeenByPeer) {
	for _, row := range rows {
		RowCache.Set("MsgSeenByPeer:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//Notification Events
func OnNotification_AfterInsert__(row *Notification) {
	RowCache.Set("Notification:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnNotification_AfterUpdate__(row *Notification) {
	RowCache.Set("Notification:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnNotification_AfterDelete__(row *Notification) {
	RowCache.Delete("Notification:" + strconv.Itoa(row.Id))
}

func OnNotification_LoadOne__(row *Notification) {
	RowCache.Set("Notification:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnNotification_LoadMany__(rows []*Notification) {
	for _, row := range rows {
		RowCache.Set("Notification:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//NotificationRemoved Events
func OnNotificationRemoved_AfterInsert__(row *NotificationRemoved) {
	RowCache.Set("NotificationRemoved:"+strconv.Itoa(row.NotificationId), row, time.Hour*0)
}

func OnNotificationRemoved_AfterUpdate__(row *NotificationRemoved) {
	RowCache.Set("NotificationRemoved:"+strconv.Itoa(row.NotificationId), row, time.Hour*0)
}

func OnNotificationRemoved_AfterDelete__(row *NotificationRemoved) {
	RowCache.Delete("NotificationRemoved:" + strconv.Itoa(row.NotificationId))
}

func OnNotificationRemoved_LoadOne__(row *NotificationRemoved) {
	RowCache.Set("NotificationRemoved:"+strconv.Itoa(row.NotificationId), row, time.Hour*0)
}

func OnNotificationRemoved_LoadMany__(rows []*NotificationRemoved) {
	for _, row := range rows {
		RowCache.Set("NotificationRemoved:"+strconv.Itoa(row.NotificationId), row, time.Hour*0)
	}
}

//PhoneContact Events
func OnPhoneContact_AfterInsert__(row *PhoneContact) {
	RowCache.Set("PhoneContact:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnPhoneContact_AfterUpdate__(row *PhoneContact) {
	RowCache.Set("PhoneContact:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnPhoneContact_AfterDelete__(row *PhoneContact) {
	RowCache.Delete("PhoneContact:" + strconv.Itoa(row.Id))
}

func OnPhoneContact_LoadOne__(row *PhoneContact) {
	RowCache.Set("PhoneContact:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnPhoneContact_LoadMany__(rows []*PhoneContact) {
	for _, row := range rows {
		RowCache.Set("PhoneContact:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//Post Events
func OnPost_AfterInsert__(row *Post) {
	RowCache.Set("Post:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnPost_AfterUpdate__(row *Post) {
	RowCache.Set("Post:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnPost_AfterDelete__(row *Post) {
	RowCache.Delete("Post:" + strconv.Itoa(row.Id))
}

func OnPost_LoadOne__(row *Post) {
	RowCache.Set("Post:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnPost_LoadMany__(rows []*Post) {
	for _, row := range rows {
		RowCache.Set("Post:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//RecommendUser Events
func OnRecommendUser_AfterInsert__(row *RecommendUser) {
	RowCache.Set("RecommendUser:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnRecommendUser_AfterUpdate__(row *RecommendUser) {
	RowCache.Set("RecommendUser:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnRecommendUser_AfterDelete__(row *RecommendUser) {
	RowCache.Delete("RecommendUser:" + strconv.Itoa(row.Id))
}

func OnRecommendUser_LoadOne__(row *RecommendUser) {
	RowCache.Set("RecommendUser:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnRecommendUser_LoadMany__(rows []*RecommendUser) {
	for _, row := range rows {
		RowCache.Set("RecommendUser:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//SearchClicked Events
func OnSearchClicked_AfterInsert__(row *SearchClicked) {
	RowCache.Set("SearchClicked:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnSearchClicked_AfterUpdate__(row *SearchClicked) {
	RowCache.Set("SearchClicked:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnSearchClicked_AfterDelete__(row *SearchClicked) {
	RowCache.Delete("SearchClicked:" + strconv.Itoa(row.Id))
}

func OnSearchClicked_LoadOne__(row *SearchClicked) {
	RowCache.Set("SearchClicked:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnSearchClicked_LoadMany__(rows []*SearchClicked) {
	for _, row := range rows {
		RowCache.Set("SearchClicked:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//Session Events
func OnSession_AfterInsert__(row *Session) {
	RowCache.Set("Session:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnSession_AfterUpdate__(row *Session) {
	RowCache.Set("Session:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnSession_AfterDelete__(row *Session) {
	RowCache.Delete("Session:" + strconv.Itoa(row.Id))
}

func OnSession_LoadOne__(row *Session) {
	RowCache.Set("Session:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnSession_LoadMany__(rows []*Session) {
	for _, row := range rows {
		RowCache.Set("Session:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//Tag Events
func OnTag_AfterInsert__(row *Tag) {
	RowCache.Set("Tag:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnTag_AfterUpdate__(row *Tag) {
	RowCache.Set("Tag:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnTag_AfterDelete__(row *Tag) {
	RowCache.Delete("Tag:" + strconv.Itoa(row.Id))
}

func OnTag_LoadOne__(row *Tag) {
	RowCache.Set("Tag:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnTag_LoadMany__(rows []*Tag) {
	for _, row := range rows {
		RowCache.Set("Tag:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//TagsPost Events
func OnTagsPost_AfterInsert__(row *TagsPost) {
	RowCache.Set("TagsPost:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnTagsPost_AfterUpdate__(row *TagsPost) {
	RowCache.Set("TagsPost:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnTagsPost_AfterDelete__(row *TagsPost) {
	RowCache.Delete("TagsPost:" + strconv.Itoa(row.Id))
}

func OnTagsPost_LoadOne__(row *TagsPost) {
	RowCache.Set("TagsPost:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnTagsPost_LoadMany__(rows []*TagsPost) {
	for _, row := range rows {
		RowCache.Set("TagsPost:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//User Events
func OnUser_AfterInsert__(row *User) {
	RowCache.Set("User:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnUser_AfterUpdate__(row *User) {
	RowCache.Set("User:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnUser_AfterDelete__(row *User) {
	RowCache.Delete("User:" + strconv.Itoa(row.Id))
}

func OnUser_LoadOne__(row *User) {
	RowCache.Set("User:"+strconv.Itoa(row.Id), row, time.Hour*0)
}

func OnUser_LoadMany__(rows []*User) {
	for _, row := range rows {
		RowCache.Set("User:"+strconv.Itoa(row.Id), row, time.Hour*0)
	}
}

//UserMetaInfo Events
func OnUserMetaInfo_AfterInsert__(row *UserMetaInfo) {
	RowCache.Set("UserMetaInfo:"+strconv.Itoa(row.UserId), row, time.Hour*0)
}

func OnUserMetaInfo_AfterUpdate__(row *UserMetaInfo) {
	RowCache.Set("UserMetaInfo:"+strconv.Itoa(row.UserId), row, time.Hour*0)
}

func OnUserMetaInfo_AfterDelete__(row *UserMetaInfo) {
	RowCache.Delete("UserMetaInfo:" + strconv.Itoa(row.UserId))
}

func OnUserMetaInfo_LoadOne__(row *UserMetaInfo) {
	RowCache.Set("UserMetaInfo:"+strconv.Itoa(row.UserId), row, time.Hour*0)
}

func OnUserMetaInfo_LoadMany__(rows []*UserMetaInfo) {
	for _, row := range rows {
		RowCache.Set("UserMetaInfo:"+strconv.Itoa(row.UserId), row, time.Hour*0)
	}
}

//UserPassword Events
func OnUserPassword_AfterInsert__(row *UserPassword) {
	RowCache.Set("UserPassword:"+strconv.Itoa(row.UserId), row, time.Hour*0)
}

func OnUserPassword_AfterUpdate__(row *UserPassword) {
	RowCache.Set("UserPassword:"+strconv.Itoa(row.UserId), row, time.Hour*0)
}

func OnUserPassword_AfterDelete__(row *UserPassword) {
	RowCache.Delete("UserPassword:" + strconv.Itoa(row.UserId))
}

func OnUserPassword_LoadOne__(row *UserPassword) {
	RowCache.Set("UserPassword:"+strconv.Itoa(row.UserId), row, time.Hour*0)
}

func OnUserPassword_LoadMany__(rows []*UserPassword) {
	for _, row := range rows {
		RowCache.Set("UserPassword:"+strconv.Itoa(row.UserId), row, time.Hour*0)
	}
}
