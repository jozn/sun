// Package models contains the types for schema 'ms'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// Post represents a row from 'ms.post'.

// Manualy copy this to project
type Post__ struct {
	Id            int    `json:"Id"`            // Id -
	UserId        int    `json:"UserId"`        // UserId -
	TypeId        int    `json:"TypeId"`        // TypeId -
	Text          string `json:"Text"`          // Text -
	FormatedText  string `json:"FormatedText"`  // FormatedText -
	MediaUrl      string `json:"MediaUrl"`      // MediaUrl -
	MediaServerId int    `json:"MediaServerId"` // MediaServerId -
	Width         int    `json:"Width"`         // Width -
	Height        int    `json:"Height"`        // Height -
	SharedTo      int    `json:"SharedTo"`      // SharedTo -
	HasTag        int    `json:"HasTag"`        // HasTag -
	LikesCount    int    `json:"LikesCount"`    // LikesCount -
	CommentsCount int    `json:"CommentsCount"` // CommentsCount -
	CreatedTime   int    `json:"CreatedTime"`   // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Post exists in the database.
func (p *Post) Exists() bool {
	return p._exists
}

// Deleted provides information if the Post has been deleted from the database.
func (p *Post) Deleted() bool {
	return p._deleted
}

// Insert inserts the Post to the database.
func (p *Post) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.post (` +
		`UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime)
	res, err := db.Exec(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.Id = int(id)
	p._exists = true

	OnPost_AfterInsert(p)

	return nil
}

// Insert inserts the Post to the database.
func (p *Post) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.post (` +
		`UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime)
	res, err := db.Exec(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.Id = int(id)
	p._exists = true

	OnPost_AfterInsert(p)

	return nil
}

// Update updates the Post in the database.
func (p *Post) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.post SET ` +
		`UserId = ?, TypeId = ?, Text = ?, FormatedText = ?, MediaUrl = ?, MediaServerId = ?, Width = ?, Height = ?, SharedTo = ?, HasTag = ?, LikesCount = ?, CommentsCount = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime, p.Id)
	_, err = db.Exec(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime, p.Id)

	OnPost_AfterUpdate(p)

	return err
}

// Save saves the Post to the database.
func (p *Post) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Replace(db)
}

// Delete deletes the Post from the database.
func (p *Post) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.post WHERE Id = ?`

	// run query
	XOLog(sqlstr, p.Id)
	_, err = db.Exec(sqlstr, p.Id)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	OnPost_AfterDelete(p)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Post_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Post_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Post_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPost_Deleter() *__Post_Deleter {
	d := __Post_Deleter{whereSep: " AND "}
	return &d
}

func NewPost_Updater() *__Post_Updater {
	u := __Post_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPost_Selector() *__Post_Selector {
	u := __Post_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Post_Deleter) Or() *__Post_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Deleter) Id_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Id_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Id_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) UserId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) UserId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) UserId_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TypeId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TypeId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TypeId_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) MediaServerId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) MediaServerId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) MediaServerId_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) Width_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Width_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Width_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) Height_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Height_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Height_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) SharedTo_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) SharedTo_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) SharedTo_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) HasTag_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) HasTag_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) HasTag_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) LikesCount_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) LikesCount_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) LikesCount_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) CommentsCount_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) CommentsCount_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) CommentsCount_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) CreatedTime_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) CreatedTime_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) CreatedTime_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Post_Updater) Or() *__Post_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Updater) Id_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Id_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Id_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) UserId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) UserId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) UserId_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TypeId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TypeId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TypeId_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) MediaServerId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) MediaServerId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) MediaServerId_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) Width_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Width_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Width_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) Height_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Height_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Height_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) SharedTo_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) SharedTo_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) SharedTo_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) HasTag_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) HasTag_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) HasTag_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) LikesCount_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) LikesCount_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) LikesCount_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) CommentsCount_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) CommentsCount_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) CommentsCount_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) CreatedTime_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) CreatedTime_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) CreatedTime_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Post_Selector) Or() *__Post_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Selector) Id_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Id_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Id_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) UserId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) UserId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) UserId_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TypeId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TypeId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TypeId_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) MediaServerId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) MediaServerId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) MediaServerId_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) Width_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Width_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Width_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) Height_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Height_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Height_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) SharedTo_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) SharedTo_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) SharedTo_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) HasTag_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) HasTag_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) HasTag_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) LikesCount_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) LikesCount_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) LikesCount_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) CommentsCount_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) CommentsCount_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) CommentsCount_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) CreatedTime_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) CreatedTime_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) CreatedTime_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Post_Deleter) Text_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Text_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) Text_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Text_EQ(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) FormatedText_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) FormatedText_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) FormatedText_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) FormatedText_EQ(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) MediaUrl_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) MediaUrl_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) MediaUrl_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) MediaUrl_EQ(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Post_Updater) Text_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Text_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) Text_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Text_EQ(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) FormatedText_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) FormatedText_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) FormatedText_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) FormatedText_EQ(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) MediaUrl_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) MediaUrl_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) MediaUrl_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) MediaUrl_EQ(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Post_Selector) Text_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Text_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) Text_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Text_EQ(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) FormatedText_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) FormatedText_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) FormatedText_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) FormatedText_EQ(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) MediaUrl_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) MediaUrl_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) MediaUrl_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) MediaUrl_EQ(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Post_Updater) Id(newVal int) *__Post_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Post_Updater) Id_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) UserId(newVal int) *__Post_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Post_Updater) UserId_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) TypeId(newVal int) *__Post_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

func (u *__Post_Updater) TypeId_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TypeId = TypeId+? "] = count
	}

	if count < 0 {
		u.updates[" TypeId = TypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Post_Updater) Text(newVal string) *__Post_Updater {
	u.updates[" Text = ? "] = newVal
	return u
}

//ints

//string
func (u *__Post_Updater) FormatedText(newVal string) *__Post_Updater {
	u.updates[" FormatedText = ? "] = newVal
	return u
}

//ints

//string
func (u *__Post_Updater) MediaUrl(newVal string) *__Post_Updater {
	u.updates[" MediaUrl = ? "] = newVal
	return u
}

//ints

func (u *__Post_Updater) MediaServerId(newVal int) *__Post_Updater {
	u.updates[" MediaServerId = ? "] = newVal
	return u
}

func (u *__Post_Updater) MediaServerId_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" MediaServerId = MediaServerId+? "] = count
	}

	if count < 0 {
		u.updates[" MediaServerId = MediaServerId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) Width(newVal int) *__Post_Updater {
	u.updates[" Width = ? "] = newVal
	return u
}

func (u *__Post_Updater) Width_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" Width = Width+? "] = count
	}

	if count < 0 {
		u.updates[" Width = Width-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) Height(newVal int) *__Post_Updater {
	u.updates[" Height = ? "] = newVal
	return u
}

func (u *__Post_Updater) Height_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" Height = Height+? "] = count
	}

	if count < 0 {
		u.updates[" Height = Height-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) SharedTo(newVal int) *__Post_Updater {
	u.updates[" SharedTo = ? "] = newVal
	return u
}

func (u *__Post_Updater) SharedTo_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" SharedTo = SharedTo+? "] = count
	}

	if count < 0 {
		u.updates[" SharedTo = SharedTo-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) HasTag(newVal int) *__Post_Updater {
	u.updates[" HasTag = ? "] = newVal
	return u
}

func (u *__Post_Updater) HasTag_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" HasTag = HasTag+? "] = count
	}

	if count < 0 {
		u.updates[" HasTag = HasTag-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) LikesCount(newVal int) *__Post_Updater {
	u.updates[" LikesCount = ? "] = newVal
	return u
}

func (u *__Post_Updater) LikesCount_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" LikesCount = LikesCount+? "] = count
	}

	if count < 0 {
		u.updates[" LikesCount = LikesCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) CommentsCount(newVal int) *__Post_Updater {
	u.updates[" CommentsCount = ? "] = newVal
	return u
}

func (u *__Post_Updater) CommentsCount_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" CommentsCount = CommentsCount+? "] = count
	}

	if count < 0 {
		u.updates[" CommentsCount = CommentsCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) CreatedTime(newVal int) *__Post_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Post_Updater) CreatedTime_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Post_Selector) OrderBy_Id_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Id_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Post_Selector) Select_Id() *__Post_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Post_Selector) OrderBy_UserId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_UserId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Post_Selector) Select_UserId() *__Post_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Post_Selector) OrderBy_TypeId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TypeId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__Post_Selector) Select_TypeId() *__Post_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__Post_Selector) OrderBy_Text_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Text_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__Post_Selector) Select_Text() *__Post_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__Post_Selector) OrderBy_FormatedText_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY FormatedText DESC "
	return u
}

func (u *__Post_Selector) OrderBy_FormatedText_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY FormatedText ASC "
	return u
}

func (u *__Post_Selector) Select_FormatedText() *__Post_Selector {
	u.selectCol = "FormatedText"
	return u
}

func (u *__Post_Selector) OrderBy_MediaUrl_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaUrl DESC "
	return u
}

func (u *__Post_Selector) OrderBy_MediaUrl_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaUrl ASC "
	return u
}

func (u *__Post_Selector) Select_MediaUrl() *__Post_Selector {
	u.selectCol = "MediaUrl"
	return u
}

func (u *__Post_Selector) OrderBy_MediaServerId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaServerId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_MediaServerId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaServerId ASC "
	return u
}

func (u *__Post_Selector) Select_MediaServerId() *__Post_Selector {
	u.selectCol = "MediaServerId"
	return u
}

func (u *__Post_Selector) OrderBy_Width_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Width DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Width_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Width ASC "
	return u
}

func (u *__Post_Selector) Select_Width() *__Post_Selector {
	u.selectCol = "Width"
	return u
}

func (u *__Post_Selector) OrderBy_Height_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Height DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Height_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Height ASC "
	return u
}

func (u *__Post_Selector) Select_Height() *__Post_Selector {
	u.selectCol = "Height"
	return u
}

func (u *__Post_Selector) OrderBy_SharedTo_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY SharedTo DESC "
	return u
}

func (u *__Post_Selector) OrderBy_SharedTo_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY SharedTo ASC "
	return u
}

func (u *__Post_Selector) Select_SharedTo() *__Post_Selector {
	u.selectCol = "SharedTo"
	return u
}

func (u *__Post_Selector) OrderBy_HasTag_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY HasTag DESC "
	return u
}

func (u *__Post_Selector) OrderBy_HasTag_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY HasTag ASC "
	return u
}

func (u *__Post_Selector) Select_HasTag() *__Post_Selector {
	u.selectCol = "HasTag"
	return u
}

func (u *__Post_Selector) OrderBy_LikesCount_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY LikesCount DESC "
	return u
}

func (u *__Post_Selector) OrderBy_LikesCount_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY LikesCount ASC "
	return u
}

func (u *__Post_Selector) Select_LikesCount() *__Post_Selector {
	u.selectCol = "LikesCount"
	return u
}

func (u *__Post_Selector) OrderBy_CommentsCount_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY CommentsCount DESC "
	return u
}

func (u *__Post_Selector) OrderBy_CommentsCount_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY CommentsCount ASC "
	return u
}

func (u *__Post_Selector) Select_CommentsCount() *__Post_Selector {
	u.selectCol = "CommentsCount"
	return u
}

func (u *__Post_Selector) OrderBy_CreatedTime_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Post_Selector) OrderBy_CreatedTime_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Post_Selector) Select_CreatedTime() *__Post_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Post_Selector) Limit(num int) *__Post_Selector {
	u.limit = num
	return u
}

func (u *__Post_Selector) Offset(num int) *__Post_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Post_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.post"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Post_Selector) GetRow(db *sqlx.DB) (*Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Post{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	OnPost_LoadOne(row)

	return row, nil
}

func (u *__Post_Selector) GetRows(db *sqlx.DB) ([]*Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Post
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPost_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Post_Selector) GetRows2(db *sqlx.DB) ([]Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Post
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPost_LoadMany(rows)

	rows2 := make([]Post, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Post_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Post_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Post_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Post_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Post_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.post SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Post_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.post WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Post ////////////////
func MassInsert_Post(rows []Post, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.post (" +
		"UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.Text)
		vals = append(vals, row.FormatedText)
		vals = append(vals, row.MediaUrl)
		vals = append(vals, row.MediaServerId)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.SharedTo)
		vals = append(vals, row.HasTag)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.CommentsCount)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Post(rows []Post, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.post (" +
		"UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.Text)
		vals = append(vals, row.FormatedText)
		vals = append(vals, row.MediaUrl)
		vals = append(vals, row.MediaServerId)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.SharedTo)
		vals = append(vals, row.HasTag)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.CommentsCount)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

// PostById retrieves a row from 'ms.post' as a Post.
//
// Generated from index 'post_Id_pkey'.
func PostById(db XODB, id int) (*Post, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime ` +
		`FROM ms.post ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Post{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.Id, &p.UserId, &p.TypeId, &p.Text, &p.FormatedText, &p.MediaUrl, &p.MediaServerId, &p.Width, &p.Height, &p.SharedTo, &p.HasTag, &p.LikesCount, &p.CommentsCount, &p.CreatedTime)
	if err != nil {
		return nil, err
	}

	OnPost_LoadOne(&p)

	return &p, nil
}
