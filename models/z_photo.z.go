// Package models contains the types for schema 'ms'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// Photo represents a row from 'ms.photo'.

// Manualy copy this to project
type Photo__ struct {
	PhotoId     int     `json:"PhotoId"`     // PhotoId -
	UserId      int     `json:"UserId"`      // UserId -
	PostId      int     `json:"PostId"`      // PostId -
	AlbumId     int     `json:"AlbumId"`     // AlbumId -
	ImageTypeId int     `json:"ImageTypeId"` // ImageTypeId -
	Title       string  `json:"Title"`       // Title -
	Src         string  `json:"Src"`         // Src -
	PathSrc     string  `json:"PathSrc"`     // PathSrc -
	BucketId    int     `json:"BucketId"`    // BucketId -
	Width       int     `json:"Width"`       // Width -
	Height      int     `json:"Height"`      // Height -
	Ratio       float32 `json:"Ratio"`       // Ratio -
	HashMd5     string  `json:"HashMd5"`     // HashMd5 -
	CreatedTime int     `json:"CreatedTime"` // CreatedTime -
	W1080       int     `json:"W1080"`       // W1080 -
	W720        int     `json:"W720"`        // W720 -
	W480        int     `json:"W480"`        // W480 -
	W320        int     `json:"W320"`        // W320 -
	W160        int     `json:"W160"`        // W160 -
	W80         int     `json:"W80"`         // W80 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Photo exists in the database.
func (p *Photo) Exists() bool {
	return p._exists
}

// Deleted provides information if the Photo has been deleted from the database.
func (p *Photo) Deleted() bool {
	return p._deleted
}

// Insert inserts the Photo to the database.
func (p *Photo) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.photo (` +
		`UserId, PostId, AlbumId, ImageTypeId, Title, Src, PathSrc, BucketId, Width, Height, Ratio, HashMd5, CreatedTime, W1080, W720, W480, W320, W160, W80` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.UserId, p.PostId, p.AlbumId, p.ImageTypeId, p.Title, p.Src, p.PathSrc, p.BucketId, p.Width, p.Height, p.Ratio, p.HashMd5, p.CreatedTime, p.W1080, p.W720, p.W480, p.W320, p.W160, p.W80)
	res, err := db.Exec(sqlstr, p.UserId, p.PostId, p.AlbumId, p.ImageTypeId, p.Title, p.Src, p.PathSrc, p.BucketId, p.Width, p.Height, p.Ratio, p.HashMd5, p.CreatedTime, p.W1080, p.W720, p.W480, p.W320, p.W160, p.W80)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	p.PhotoId = int(id)
	p._exists = true

	OnPhoto_AfterInsert(p)

	return nil
}

// Insert inserts the Photo to the database.
func (p *Photo) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.photo (` +
		`UserId, PostId, AlbumId, ImageTypeId, Title, Src, PathSrc, BucketId, Width, Height, Ratio, HashMd5, CreatedTime, W1080, W720, W480, W320, W160, W80` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.UserId, p.PostId, p.AlbumId, p.ImageTypeId, p.Title, p.Src, p.PathSrc, p.BucketId, p.Width, p.Height, p.Ratio, p.HashMd5, p.CreatedTime, p.W1080, p.W720, p.W480, p.W320, p.W160, p.W80)
	res, err := db.Exec(sqlstr, p.UserId, p.PostId, p.AlbumId, p.ImageTypeId, p.Title, p.Src, p.PathSrc, p.BucketId, p.Width, p.Height, p.Ratio, p.HashMd5, p.CreatedTime, p.W1080, p.W720, p.W480, p.W320, p.W160, p.W80)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	p.PhotoId = int(id)
	p._exists = true

	OnPhoto_AfterInsert(p)

	return nil
}

// Update updates the Photo in the database.
func (p *Photo) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.photo SET ` +
		`UserId = ?, PostId = ?, AlbumId = ?, ImageTypeId = ?, Title = ?, Src = ?, PathSrc = ?, BucketId = ?, Width = ?, Height = ?, Ratio = ?, HashMd5 = ?, CreatedTime = ?, W1080 = ?, W720 = ?, W480 = ?, W320 = ?, W160 = ?, W80 = ?` +
		` WHERE PhotoId = ?`

	// run query
	XOLog(sqlstr, p.UserId, p.PostId, p.AlbumId, p.ImageTypeId, p.Title, p.Src, p.PathSrc, p.BucketId, p.Width, p.Height, p.Ratio, p.HashMd5, p.CreatedTime, p.W1080, p.W720, p.W480, p.W320, p.W160, p.W80, p.PhotoId)
	_, err = db.Exec(sqlstr, p.UserId, p.PostId, p.AlbumId, p.ImageTypeId, p.Title, p.Src, p.PathSrc, p.BucketId, p.Width, p.Height, p.Ratio, p.HashMd5, p.CreatedTime, p.W1080, p.W720, p.W480, p.W320, p.W160, p.W80, p.PhotoId)

	XOLogErr(err)
	OnPhoto_AfterUpdate(p)

	return err
}

// Save saves the Photo to the database.
func (p *Photo) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Replace(db)
}

// Delete deletes the Photo from the database.
func (p *Photo) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.photo WHERE PhotoId = ?`

	// run query
	XOLog(sqlstr, p.PhotoId)
	_, err = db.Exec(sqlstr, p.PhotoId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	p._deleted = true

	OnPhoto_AfterDelete(p)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Photo_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Photo_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Photo_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPhoto_Deleter() *__Photo_Deleter {
	d := __Photo_Deleter{whereSep: " AND "}
	return &d
}

func NewPhoto_Updater() *__Photo_Updater {
	u := __Photo_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPhoto_Selector() *__Photo_Selector {
	u := __Photo_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Photo_Deleter) Or() *__Photo_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Photo_Deleter) PhotoId_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhotoId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) PhotoId_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhotoId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) PhotoId_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhotoId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) PhotoId_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PhotoId_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PhotoId_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PhotoId_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PhotoId_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PhotoId_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) UserId_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) UserId_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) UserId_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) UserId_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) UserId_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) UserId_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) UserId_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) UserId_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) UserId_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) PostId_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) PostId_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) PostId_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) PostId_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PostId_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PostId_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PostId_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PostId_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) PostId_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) AlbumId_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) AlbumId_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) AlbumId_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) AlbumId_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) AlbumId_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) AlbumId_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) AlbumId_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) AlbumId_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) AlbumId_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) ImageTypeId_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ImageTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) ImageTypeId_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ImageTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) ImageTypeId_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ImageTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) ImageTypeId_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) ImageTypeId_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) ImageTypeId_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) ImageTypeId_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) ImageTypeId_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) ImageTypeId_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) BucketId_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) BucketId_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) BucketId_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) BucketId_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) BucketId_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) BucketId_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) BucketId_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) BucketId_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) BucketId_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) Width_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) Width_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) Width_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) Width_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Width_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Width_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Width_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Width_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Width_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) Height_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) Height_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) Height_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) Height_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Height_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Height_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Height_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Height_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) Height_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) CreatedTime_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) CreatedTime_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) CreatedTime_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) CreatedTime_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) CreatedTime_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) CreatedTime_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) CreatedTime_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) CreatedTime_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) CreatedTime_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) W1080_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W1080 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W1080_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W1080 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W1080_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W1080 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) W1080_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W1080_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W1080_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W1080_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W1080_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W1080_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) W720_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W720 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W720_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W720 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W720_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W720 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) W720_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W720_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W720_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W720_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W720_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W720_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) W480_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W480 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W480_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W480 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W480_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W480 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) W480_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W480_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W480_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W480_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W480_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W480_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) W320_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W320 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W320_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W320 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W320_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W320 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) W320_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W320_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W320_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W320_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W320_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W320_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) W160_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W160 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W160_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W160 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W160_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W160 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) W160_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W160_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W160_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W160_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W160_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W160_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) W80_In(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W80 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W80_Ins(ins ...int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W80 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) W80_NotIn(ins []int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W80 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) W80_EQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W80_NotEQ(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W80_LT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W80_LE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W80_GT(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Deleter) W80_GE(val int) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Photo_Updater) Or() *__Photo_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Photo_Updater) PhotoId_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhotoId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) PhotoId_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhotoId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) PhotoId_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhotoId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) PhotoId_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PhotoId_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PhotoId_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PhotoId_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PhotoId_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PhotoId_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) UserId_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) UserId_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) UserId_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) UserId_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) UserId_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) UserId_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) UserId_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) UserId_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) UserId_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) PostId_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) PostId_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) PostId_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) PostId_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PostId_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PostId_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PostId_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PostId_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) PostId_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) AlbumId_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) AlbumId_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) AlbumId_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) AlbumId_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) AlbumId_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) AlbumId_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) AlbumId_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) AlbumId_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) AlbumId_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) ImageTypeId_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ImageTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) ImageTypeId_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ImageTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) ImageTypeId_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ImageTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) ImageTypeId_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) ImageTypeId_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) ImageTypeId_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) ImageTypeId_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) ImageTypeId_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) ImageTypeId_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) BucketId_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) BucketId_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) BucketId_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) BucketId_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) BucketId_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) BucketId_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) BucketId_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) BucketId_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) BucketId_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) Width_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) Width_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) Width_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) Width_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Width_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Width_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Width_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Width_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Width_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) Height_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) Height_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) Height_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) Height_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Height_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Height_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Height_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Height_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) Height_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) CreatedTime_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) CreatedTime_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) CreatedTime_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) CreatedTime_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) CreatedTime_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) CreatedTime_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) CreatedTime_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) CreatedTime_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) CreatedTime_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) W1080_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W1080 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W1080_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W1080 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W1080_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W1080 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) W1080_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W1080_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W1080_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W1080_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W1080_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W1080_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) W720_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W720 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W720_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W720 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W720_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W720 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) W720_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W720_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W720_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W720_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W720_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W720_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) W480_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W480 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W480_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W480 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W480_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W480 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) W480_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W480_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W480_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W480_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W480_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W480_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) W320_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W320 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W320_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W320 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W320_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W320 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) W320_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W320_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W320_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W320_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W320_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W320_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) W160_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W160 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W160_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W160 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W160_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W160 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) W160_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W160_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W160_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W160_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W160_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W160_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) W80_In(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W80 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W80_Ins(ins ...int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W80 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) W80_NotIn(ins []int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W80 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) W80_EQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W80_NotEQ(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W80_LT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W80_LE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W80_GT(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Updater) W80_GE(val int) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Photo_Selector) Or() *__Photo_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Photo_Selector) PhotoId_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhotoId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) PhotoId_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhotoId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) PhotoId_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhotoId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) PhotoId_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PhotoId_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PhotoId_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PhotoId_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PhotoId_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PhotoId_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhotoId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) UserId_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) UserId_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) UserId_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) UserId_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) UserId_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) UserId_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) UserId_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) UserId_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) UserId_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) PostId_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) PostId_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) PostId_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) PostId_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PostId_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PostId_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PostId_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PostId_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) PostId_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) AlbumId_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) AlbumId_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) AlbumId_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) AlbumId_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) AlbumId_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) AlbumId_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) AlbumId_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) AlbumId_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) AlbumId_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) ImageTypeId_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ImageTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) ImageTypeId_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ImageTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) ImageTypeId_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ImageTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) ImageTypeId_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) ImageTypeId_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) ImageTypeId_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) ImageTypeId_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) ImageTypeId_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) ImageTypeId_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ImageTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) BucketId_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) BucketId_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) BucketId_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) BucketId_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) BucketId_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) BucketId_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) BucketId_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) BucketId_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) BucketId_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) Width_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) Width_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) Width_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) Width_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Width_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Width_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Width_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Width_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Width_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) Height_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) Height_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) Height_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) Height_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Height_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Height_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Height_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Height_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) Height_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) CreatedTime_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) CreatedTime_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) CreatedTime_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) CreatedTime_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) CreatedTime_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) CreatedTime_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) CreatedTime_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) CreatedTime_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) CreatedTime_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) W1080_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W1080 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W1080_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W1080 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W1080_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W1080 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) W1080_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W1080_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W1080_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W1080_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W1080_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W1080_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W1080 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) W720_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W720 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W720_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W720 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W720_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W720 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) W720_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W720_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W720_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W720_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W720_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W720_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W720 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) W480_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W480 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W480_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W480 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W480_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W480 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) W480_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W480_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W480_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W480_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W480_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W480_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W480 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) W320_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W320 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W320_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W320 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W320_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W320 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) W320_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W320_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W320_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W320_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W320_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W320_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W320 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) W160_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W160 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W160_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W160 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W160_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W160 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) W160_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W160_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W160_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W160_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W160_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W160_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W160 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) W80_In(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W80 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W80_Ins(ins ...int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W80 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) W80_NotIn(ins []int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " W80 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) W80_EQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W80_NotEQ(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W80_LT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W80_LE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W80_GT(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Photo_Selector) W80_GE(val int) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " W80 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Photo_Deleter) Title_In(ins []string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) Title_NotIn(ins []string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Deleter) Title_Like(val string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) Title_EQ(val string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) Src_In(ins []string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) Src_NotIn(ins []string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Deleter) Src_Like(val string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) Src_EQ(val string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) PathSrc_In(ins []string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PathSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) PathSrc_NotIn(ins []string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PathSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Deleter) PathSrc_Like(val string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PathSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) PathSrc_EQ(val string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PathSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Deleter) HashMd5_In(ins []string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Deleter) HashMd5_NotIn(ins []string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Deleter) HashMd5_Like(val string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Deleter) HashMd5_EQ(val string) *__Photo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Photo_Updater) Title_In(ins []string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) Title_NotIn(ins []string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Updater) Title_Like(val string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) Title_EQ(val string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) Src_In(ins []string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) Src_NotIn(ins []string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Updater) Src_Like(val string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) Src_EQ(val string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) PathSrc_In(ins []string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PathSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) PathSrc_NotIn(ins []string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PathSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Updater) PathSrc_Like(val string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PathSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) PathSrc_EQ(val string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PathSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Updater) HashMd5_In(ins []string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Updater) HashMd5_NotIn(ins []string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Updater) HashMd5_Like(val string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Updater) HashMd5_EQ(val string) *__Photo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Photo_Selector) Title_In(ins []string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) Title_NotIn(ins []string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Selector) Title_Like(val string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) Title_EQ(val string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) Src_In(ins []string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) Src_NotIn(ins []string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Selector) Src_Like(val string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) Src_EQ(val string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) PathSrc_In(ins []string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PathSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) PathSrc_NotIn(ins []string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PathSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Selector) PathSrc_Like(val string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PathSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) PathSrc_EQ(val string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PathSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Photo_Selector) HashMd5_In(ins []string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Photo_Selector) HashMd5_NotIn(ins []string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Photo_Selector) HashMd5_Like(val string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Photo_Selector) HashMd5_EQ(val string) *__Photo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Photo_Updater) PhotoId(newVal int) *__Photo_Updater {
	u.updates[" PhotoId = ? "] = newVal
	return u
}

func (u *__Photo_Updater) PhotoId_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" PhotoId = PhotoId+? "] = count
	}

	if count < 0 {
		u.updates[" PhotoId = PhotoId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) UserId(newVal int) *__Photo_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Photo_Updater) UserId_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) PostId(newVal int) *__Photo_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__Photo_Updater) PostId_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) AlbumId(newVal int) *__Photo_Updater {
	u.updates[" AlbumId = ? "] = newVal
	return u
}

func (u *__Photo_Updater) AlbumId_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" AlbumId = AlbumId+? "] = count
	}

	if count < 0 {
		u.updates[" AlbumId = AlbumId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) ImageTypeId(newVal int) *__Photo_Updater {
	u.updates[" ImageTypeId = ? "] = newVal
	return u
}

func (u *__Photo_Updater) ImageTypeId_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" ImageTypeId = ImageTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" ImageTypeId = ImageTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Photo_Updater) Title(newVal string) *__Photo_Updater {
	u.updates[" Title = ? "] = newVal
	return u
}

//ints

//string
func (u *__Photo_Updater) Src(newVal string) *__Photo_Updater {
	u.updates[" Src = ? "] = newVal
	return u
}

//ints

//string
func (u *__Photo_Updater) PathSrc(newVal string) *__Photo_Updater {
	u.updates[" PathSrc = ? "] = newVal
	return u
}

//ints

func (u *__Photo_Updater) BucketId(newVal int) *__Photo_Updater {
	u.updates[" BucketId = ? "] = newVal
	return u
}

func (u *__Photo_Updater) BucketId_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" BucketId = BucketId+? "] = count
	}

	if count < 0 {
		u.updates[" BucketId = BucketId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) Width(newVal int) *__Photo_Updater {
	u.updates[" Width = ? "] = newVal
	return u
}

func (u *__Photo_Updater) Width_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" Width = Width+? "] = count
	}

	if count < 0 {
		u.updates[" Width = Width-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) Height(newVal int) *__Photo_Updater {
	u.updates[" Height = ? "] = newVal
	return u
}

func (u *__Photo_Updater) Height_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" Height = Height+? "] = count
	}

	if count < 0 {
		u.updates[" Height = Height-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

//ints

//string
func (u *__Photo_Updater) HashMd5(newVal string) *__Photo_Updater {
	u.updates[" HashMd5 = ? "] = newVal
	return u
}

//ints

func (u *__Photo_Updater) CreatedTime(newVal int) *__Photo_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Photo_Updater) CreatedTime_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) W1080(newVal int) *__Photo_Updater {
	u.updates[" W1080 = ? "] = newVal
	return u
}

func (u *__Photo_Updater) W1080_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" W1080 = W1080+? "] = count
	}

	if count < 0 {
		u.updates[" W1080 = W1080-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) W720(newVal int) *__Photo_Updater {
	u.updates[" W720 = ? "] = newVal
	return u
}

func (u *__Photo_Updater) W720_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" W720 = W720+? "] = count
	}

	if count < 0 {
		u.updates[" W720 = W720-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) W480(newVal int) *__Photo_Updater {
	u.updates[" W480 = ? "] = newVal
	return u
}

func (u *__Photo_Updater) W480_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" W480 = W480+? "] = count
	}

	if count < 0 {
		u.updates[" W480 = W480-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) W320(newVal int) *__Photo_Updater {
	u.updates[" W320 = ? "] = newVal
	return u
}

func (u *__Photo_Updater) W320_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" W320 = W320+? "] = count
	}

	if count < 0 {
		u.updates[" W320 = W320-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) W160(newVal int) *__Photo_Updater {
	u.updates[" W160 = ? "] = newVal
	return u
}

func (u *__Photo_Updater) W160_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" W160 = W160+? "] = count
	}

	if count < 0 {
		u.updates[" W160 = W160-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Photo_Updater) W80(newVal int) *__Photo_Updater {
	u.updates[" W80 = ? "] = newVal
	return u
}

func (u *__Photo_Updater) W80_Increment(count int) *__Photo_Updater {
	if count > 0 {
		u.updates[" W80 = W80+? "] = count
	}

	if count < 0 {
		u.updates[" W80 = W80-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Photo_Selector) OrderBy_PhotoId_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY PhotoId DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_PhotoId_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY PhotoId ASC "
	return u
}

func (u *__Photo_Selector) Select_PhotoId() *__Photo_Selector {
	u.selectCol = "PhotoId"
	return u
}

func (u *__Photo_Selector) OrderBy_UserId_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_UserId_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Photo_Selector) Select_UserId() *__Photo_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Photo_Selector) OrderBy_PostId_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_PostId_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Photo_Selector) Select_PostId() *__Photo_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Photo_Selector) OrderBy_AlbumId_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY AlbumId DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_AlbumId_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY AlbumId ASC "
	return u
}

func (u *__Photo_Selector) Select_AlbumId() *__Photo_Selector {
	u.selectCol = "AlbumId"
	return u
}

func (u *__Photo_Selector) OrderBy_ImageTypeId_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY ImageTypeId DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_ImageTypeId_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY ImageTypeId ASC "
	return u
}

func (u *__Photo_Selector) Select_ImageTypeId() *__Photo_Selector {
	u.selectCol = "ImageTypeId"
	return u
}

func (u *__Photo_Selector) OrderBy_Title_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY Title DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_Title_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY Title ASC "
	return u
}

func (u *__Photo_Selector) Select_Title() *__Photo_Selector {
	u.selectCol = "Title"
	return u
}

func (u *__Photo_Selector) OrderBy_Src_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY Src DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_Src_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY Src ASC "
	return u
}

func (u *__Photo_Selector) Select_Src() *__Photo_Selector {
	u.selectCol = "Src"
	return u
}

func (u *__Photo_Selector) OrderBy_PathSrc_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY PathSrc DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_PathSrc_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY PathSrc ASC "
	return u
}

func (u *__Photo_Selector) Select_PathSrc() *__Photo_Selector {
	u.selectCol = "PathSrc"
	return u
}

func (u *__Photo_Selector) OrderBy_BucketId_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY BucketId DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_BucketId_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY BucketId ASC "
	return u
}

func (u *__Photo_Selector) Select_BucketId() *__Photo_Selector {
	u.selectCol = "BucketId"
	return u
}

func (u *__Photo_Selector) OrderBy_Width_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY Width DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_Width_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY Width ASC "
	return u
}

func (u *__Photo_Selector) Select_Width() *__Photo_Selector {
	u.selectCol = "Width"
	return u
}

func (u *__Photo_Selector) OrderBy_Height_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY Height DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_Height_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY Height ASC "
	return u
}

func (u *__Photo_Selector) Select_Height() *__Photo_Selector {
	u.selectCol = "Height"
	return u
}

func (u *__Photo_Selector) OrderBy_Ratio_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY Ratio DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_Ratio_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY Ratio ASC "
	return u
}

func (u *__Photo_Selector) Select_Ratio() *__Photo_Selector {
	u.selectCol = "Ratio"
	return u
}

func (u *__Photo_Selector) OrderBy_HashMd5_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY HashMd5 DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_HashMd5_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY HashMd5 ASC "
	return u
}

func (u *__Photo_Selector) Select_HashMd5() *__Photo_Selector {
	u.selectCol = "HashMd5"
	return u
}

func (u *__Photo_Selector) OrderBy_CreatedTime_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_CreatedTime_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Photo_Selector) Select_CreatedTime() *__Photo_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Photo_Selector) OrderBy_W1080_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY W1080 DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_W1080_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY W1080 ASC "
	return u
}

func (u *__Photo_Selector) Select_W1080() *__Photo_Selector {
	u.selectCol = "W1080"
	return u
}

func (u *__Photo_Selector) OrderBy_W720_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY W720 DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_W720_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY W720 ASC "
	return u
}

func (u *__Photo_Selector) Select_W720() *__Photo_Selector {
	u.selectCol = "W720"
	return u
}

func (u *__Photo_Selector) OrderBy_W480_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY W480 DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_W480_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY W480 ASC "
	return u
}

func (u *__Photo_Selector) Select_W480() *__Photo_Selector {
	u.selectCol = "W480"
	return u
}

func (u *__Photo_Selector) OrderBy_W320_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY W320 DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_W320_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY W320 ASC "
	return u
}

func (u *__Photo_Selector) Select_W320() *__Photo_Selector {
	u.selectCol = "W320"
	return u
}

func (u *__Photo_Selector) OrderBy_W160_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY W160 DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_W160_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY W160 ASC "
	return u
}

func (u *__Photo_Selector) Select_W160() *__Photo_Selector {
	u.selectCol = "W160"
	return u
}

func (u *__Photo_Selector) OrderBy_W80_Desc() *__Photo_Selector {
	u.orderBy = " ORDER BY W80 DESC "
	return u
}

func (u *__Photo_Selector) OrderBy_W80_Asc() *__Photo_Selector {
	u.orderBy = " ORDER BY W80 ASC "
	return u
}

func (u *__Photo_Selector) Select_W80() *__Photo_Selector {
	u.selectCol = "W80"
	return u
}

func (u *__Photo_Selector) Limit(num int) *__Photo_Selector {
	u.limit = num
	return u
}

func (u *__Photo_Selector) Offset(num int) *__Photo_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Photo_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.photo"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Photo_Selector) GetRow(db *sqlx.DB) (*Photo, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Photo{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnPhoto_LoadOne(row)

	return row, nil
}

func (u *__Photo_Selector) GetRows(db *sqlx.DB) ([]*Photo, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Photo
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPhoto_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Photo_Selector) GetRows2(db *sqlx.DB) ([]Photo, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Photo
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPhoto_LoadMany(rows)

	rows2 := make([]Photo, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Photo_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__Photo_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Photo_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Photo_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Photo_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.photo SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__Photo_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.photo WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Photo ////////////////
func MassInsert_Photo(rows []Photo, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.photo (" +
		"UserId, PostId, AlbumId, ImageTypeId, Title, Src, PathSrc, BucketId, Width, Height, Ratio, HashMd5, CreatedTime, W1080, W720, W480, W320, W160, W80" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.AlbumId)
		vals = append(vals, row.ImageTypeId)
		vals = append(vals, row.Title)
		vals = append(vals, row.Src)
		vals = append(vals, row.PathSrc)
		vals = append(vals, row.BucketId)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Ratio)
		vals = append(vals, row.HashMd5)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.W1080)
		vals = append(vals, row.W720)
		vals = append(vals, row.W480)
		vals = append(vals, row.W320)
		vals = append(vals, row.W160)
		vals = append(vals, row.W80)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_Photo(rows []Photo, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.photo (" +
		"UserId, PostId, AlbumId, ImageTypeId, Title, Src, PathSrc, BucketId, Width, Height, Ratio, HashMd5, CreatedTime, W1080, W720, W480, W320, W160, W80" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.AlbumId)
		vals = append(vals, row.ImageTypeId)
		vals = append(vals, row.Title)
		vals = append(vals, row.Src)
		vals = append(vals, row.PathSrc)
		vals = append(vals, row.BucketId)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Ratio)
		vals = append(vals, row.HashMd5)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.W1080)
		vals = append(vals, row.W720)
		vals = append(vals, row.W480)
		vals = append(vals, row.W320)
		vals = append(vals, row.W160)
		vals = append(vals, row.W80)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

// PhotosByAlbumId retrieves a row from 'ms.photo' as a Photo.
//
// Generated from index 'AlbumId'.
func PhotosByAlbumId(db XODB, albumId int) ([]*Photo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`PhotoId, UserId, PostId, AlbumId, ImageTypeId, Title, Src, PathSrc, BucketId, Width, Height, Ratio, HashMd5, CreatedTime, W1080, W720, W480, W320, W160, W80 ` +
		`FROM ms.photo ` +
		`WHERE AlbumId = ?`

	// run query
	XOLog(sqlstr, albumId)
	q, err := db.Query(sqlstr, albumId)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Photo{}
	for q.Next() {
		p := Photo{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.PhotoId, &p.UserId, &p.PostId, &p.AlbumId, &p.ImageTypeId, &p.Title, &p.Src, &p.PathSrc, &p.BucketId, &p.Width, &p.Height, &p.Ratio, &p.HashMd5, &p.CreatedTime, &p.W1080, &p.W720, &p.W480, &p.W320, &p.W160, &p.W80)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &p)
	}

	OnPhoto_LoadMany(res)

	return res, nil
}

// PhotosByCreatedTime retrieves a row from 'ms.photo' as a Photo.
//
// Generated from index 'CreatedTime'.
func PhotosByCreatedTime(db XODB, createdTime int) ([]*Photo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`PhotoId, UserId, PostId, AlbumId, ImageTypeId, Title, Src, PathSrc, BucketId, Width, Height, Ratio, HashMd5, CreatedTime, W1080, W720, W480, W320, W160, W80 ` +
		`FROM ms.photo ` +
		`WHERE CreatedTime = ?`

	// run query
	XOLog(sqlstr, createdTime)
	q, err := db.Query(sqlstr, createdTime)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Photo{}
	for q.Next() {
		p := Photo{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.PhotoId, &p.UserId, &p.PostId, &p.AlbumId, &p.ImageTypeId, &p.Title, &p.Src, &p.PathSrc, &p.BucketId, &p.Width, &p.Height, &p.Ratio, &p.HashMd5, &p.CreatedTime, &p.W1080, &p.W720, &p.W480, &p.W320, &p.W160, &p.W80)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &p)
	}

	OnPhoto_LoadMany(res)

	return res, nil
}

// PhotosByHashMd5 retrieves a row from 'ms.photo' as a Photo.
//
// Generated from index 'HashMd5'.
func PhotosByHashMd5(db XODB, hashMd5 string) ([]*Photo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`PhotoId, UserId, PostId, AlbumId, ImageTypeId, Title, Src, PathSrc, BucketId, Width, Height, Ratio, HashMd5, CreatedTime, W1080, W720, W480, W320, W160, W80 ` +
		`FROM ms.photo ` +
		`WHERE HashMd5 = ?`

	// run query
	XOLog(sqlstr, hashMd5)
	q, err := db.Query(sqlstr, hashMd5)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Photo{}
	for q.Next() {
		p := Photo{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.PhotoId, &p.UserId, &p.PostId, &p.AlbumId, &p.ImageTypeId, &p.Title, &p.Src, &p.PathSrc, &p.BucketId, &p.Width, &p.Height, &p.Ratio, &p.HashMd5, &p.CreatedTime, &p.W1080, &p.W720, &p.W480, &p.W320, &p.W160, &p.W80)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &p)
	}

	OnPhoto_LoadMany(res)

	return res, nil
}

// PhotosByPostId retrieves a row from 'ms.photo' as a Photo.
//
// Generated from index 'PostId'.
func PhotosByPostId(db XODB, postId int) ([]*Photo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`PhotoId, UserId, PostId, AlbumId, ImageTypeId, Title, Src, PathSrc, BucketId, Width, Height, Ratio, HashMd5, CreatedTime, W1080, W720, W480, W320, W160, W80 ` +
		`FROM ms.photo ` +
		`WHERE PostId = ?`

	// run query
	XOLog(sqlstr, postId)
	q, err := db.Query(sqlstr, postId)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Photo{}
	for q.Next() {
		p := Photo{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.PhotoId, &p.UserId, &p.PostId, &p.AlbumId, &p.ImageTypeId, &p.Title, &p.Src, &p.PathSrc, &p.BucketId, &p.Width, &p.Height, &p.Ratio, &p.HashMd5, &p.CreatedTime, &p.W1080, &p.W720, &p.W480, &p.W320, &p.W160, &p.W80)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &p)
	}

	OnPhoto_LoadMany(res)

	return res, nil
}

// PhotoByPhotoId retrieves a row from 'ms.photo' as a Photo.
//
// Generated from index 'photo_PhotoId_pkey'.
func PhotoByPhotoId(db XODB, photoId int) (*Photo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`PhotoId, UserId, PostId, AlbumId, ImageTypeId, Title, Src, PathSrc, BucketId, Width, Height, Ratio, HashMd5, CreatedTime, W1080, W720, W480, W320, W160, W80 ` +
		`FROM ms.photo ` +
		`WHERE PhotoId = ?`

	// run query
	XOLog(sqlstr, photoId)
	p := Photo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, photoId).Scan(&p.PhotoId, &p.UserId, &p.PostId, &p.AlbumId, &p.ImageTypeId, &p.Title, &p.Src, &p.PathSrc, &p.BucketId, &p.Width, &p.Height, &p.Ratio, &p.HashMd5, &p.CreatedTime, &p.W1080, &p.W720, &p.W480, &p.W320, &p.W160, &p.W80)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnPhoto_LoadOne(&p)

	return &p, nil
}
