// Package models contains the types for schema 'ms'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"ms/sun/config"
	"ms/sun/helper"
	"os"
	"regexp"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// Comment represents a row from 'ms.comments'.

// Manualy copy this to project
type __Comment struct {
	Id          int    `json:"Id"`          // Id -
	UserId      int    `json:"UserId"`      // UserId -
	PostId      int    `json:"PostId"`      // PostId -
	Text        string `json:"Text"`        // Text -
	CreatedTime int    `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Comment exists in the database.
func (c *Comment) Exists() bool {
	return c._exists
}

// Deleted provides information if the Comment has been deleted from the database.
func (c *Comment) Deleted() bool {
	return c._deleted
}

// Insert inserts the Comment to the database.
func (c *Comment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.comments (` +
		`UserId, PostId, Text, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.UserId, c.PostId, c.Text, c.CreatedTime)
	res, err := db.Exec(sqlstr, c.UserId, c.PostId, c.Text, c.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.Id = int(id)
	c._exists = true

	return nil
}

// Insert inserts the Comment to the database.
func (c *Comment) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.comments (` +
		`UserId, PostId, Text, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.UserId, c.PostId, c.Text, c.CreatedTime)
	res, err := db.Exec(sqlstr, c.UserId, c.PostId, c.Text, c.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.Id = int(id)
	c._exists = true

	return nil
}

// Update updates the Comment in the database.
func (c *Comment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.comments SET ` +
		`UserId = ?, PostId = ?, Text = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, c.UserId, c.PostId, c.Text, c.CreatedTime, c.Id)
	_, err = db.Exec(sqlstr, c.UserId, c.PostId, c.Text, c.CreatedTime, c.Id)
	return err
}

// Save saves the Comment to the database.
func (c *Comment) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Replace(db)
}

// Delete deletes the Comment from the database.
func (c *Comment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.comments WHERE Id = ?`

	// run query
	XOLog(sqlstr, c.Id)
	_, err = db.Exec(sqlstr, c.Id)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Comment_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Comment_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Comment_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewComment_Deleter() *__Comment_Deleter {
	d := __Comment_Deleter{whereSep: " AND "}
	return &d
}

func NewComment_Updater() *__Comment_Updater {
	u := __Comment_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewComment_Selector() *__Comment_Selector {
	u := __Comment_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Comment_Deleter) Or(ins []int) *__Comment_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Comment_Deleter) Id_In(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) Id_NotIn(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) Id_EQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_NotEQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_LT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_LE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_GT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_GE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Deleter) UserId_In(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) UserId_NotIn(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) UserId_EQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_NotEQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_LT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_LE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_GT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_GE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Deleter) PostId_In(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) PostId_NotIn(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) PostId_EQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_NotEQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_LT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_LE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_GT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_GE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Deleter) CreatedTime_In(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) CreatedTime_NotIn(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) CreatedTime_EQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_NotEQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_LT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_LE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_GT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_GE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Comment_Updater) Or(ins []int) *__Comment_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Comment_Updater) Id_In(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) Id_NotIn(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) Id_EQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_NotEQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_LT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_LE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_GT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_GE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Updater) UserId_In(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) UserId_NotIn(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) UserId_EQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_NotEQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_LT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_LE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_GT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_GE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Updater) PostId_In(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) PostId_NotIn(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) PostId_EQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_NotEQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_LT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_LE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_GT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_GE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Updater) CreatedTime_In(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) CreatedTime_NotIn(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) CreatedTime_EQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_NotEQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_LT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_LE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_GT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_GE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Comment_Selector) Or(ins []int) *__Comment_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Comment_Selector) Id_In(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) Id_NotIn(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) Id_EQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_NotEQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_LT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_LE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_GT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_GE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Selector) UserId_In(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) UserId_NotIn(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) UserId_EQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_NotEQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_LT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_LE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_GT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_GE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Selector) PostId_In(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) PostId_NotIn(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) PostId_EQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_NotEQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_LT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_LE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_GT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_GE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Selector) CreatedTime_In(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) CreatedTime_NotIn(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) CreatedTime_EQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_NotEQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_LT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_LE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_GT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_GE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Comment_Deleter) Text_In(ins []string) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) Text_NotIn(ins []string) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Comment_Deleter) Text_Like(val string) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) Text_EQ(val string) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Comment_Updater) Text_In(ins []string) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) Text_NotIn(ins []string) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Comment_Updater) Text_Like(val string) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) Text_EQ(val string) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Comment_Selector) Text_In(ins []string) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) Text_NotIn(ins []string) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Comment_Selector) Text_Like(val string) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) Text_EQ(val string) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Comment_Updater) Id(newVal int) *__Comment_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__Comment_Updater) UserId(newVal int) *__Comment_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Comment_Updater) PostId(newVal int) *__Comment_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__Comment_Updater) Text(newVal string) *__Comment_Updater {
	u.updates[" Text = ? "] = newVal
	return u
}

//ints

func (u *__Comment_Updater) CreatedTime(newVal int) *__Comment_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Comment_Selector) OrderBy_Id_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_Id_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Comment_Selector) Select_Id() *__Comment_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Comment_Selector) OrderBy_UserId_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_UserId_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Comment_Selector) Select_UserId() *__Comment_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Comment_Selector) OrderBy_PostId_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_PostId_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Comment_Selector) Select_PostId() *__Comment_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Comment_Selector) OrderBy_Text_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_Text_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__Comment_Selector) Select_Text() *__Comment_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__Comment_Selector) OrderBy_CreatedTime_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_CreatedTime_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Comment_Selector) Select_CreatedTime() *__Comment_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Comment_Selector) Limit(num int) *__Comment_Selector {
	u.limit = num
	return u
}

func (u *__Comment_Selector) Offset(num int) *__Comment_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Comment_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.comments"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Comment_Selector) GetRow(db *sqlx.DB) (*Comment, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Comment{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__Comment_Selector) GetRows(db *sqlx.DB) ([]Comment, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Comment
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Comment_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Comment_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Comment_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Comment_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Comment_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.comments SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Comment_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.comments WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Comment ////////////////
func MassInsert_Comment(rows []Comment, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.comments (" +
		"UserId, PostId, Text, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.Text)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Comment(rows []Comment, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.comments (" +
		"UserId, PostId, Text, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.Text)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// FollowingList represents a row from 'ms.following_list'.

// Manualy copy this to project
type __FollowingList struct {
	Id          int    `json:"Id"`          // Id -
	UserId      int    `json:"UserId"`      // UserId -
	ListType    int    `json:"ListType"`    // ListType -
	Name        string `json:"Name"`        // Name -
	Count       int    `json:"Count"`       // Count -
	IsAuto      int    `json:"IsAuto"`      // IsAuto -
	IsPimiry    int    `json:"IsPimiry"`    // IsPimiry -
	CreatedTime int    `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FollowingList exists in the database.
func (fl *FollowingList) Exists() bool {
	return fl._exists
}

// Deleted provides information if the FollowingList has been deleted from the database.
func (fl *FollowingList) Deleted() bool {
	return fl._deleted
}

// Insert inserts the FollowingList to the database.
func (fl *FollowingList) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.following_list (` +
		`Id, ListType, Name, Count, IsAuto, IsPimiry, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fl.Id, fl.ListType, fl.Name, fl.Count, fl.IsAuto, fl.IsPimiry, fl.CreatedTime)
	res, err := db.Exec(sqlstr, fl.Id, fl.ListType, fl.Name, fl.Count, fl.IsAuto, fl.IsPimiry, fl.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fl.UserId = int(id)
	fl._exists = true

	return nil
}

// Insert inserts the FollowingList to the database.
func (fl *FollowingList) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.following_list (` +
		`Id, ListType, Name, Count, IsAuto, IsPimiry, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fl.Id, fl.ListType, fl.Name, fl.Count, fl.IsAuto, fl.IsPimiry, fl.CreatedTime)
	res, err := db.Exec(sqlstr, fl.Id, fl.ListType, fl.Name, fl.Count, fl.IsAuto, fl.IsPimiry, fl.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fl.UserId = int(id)
	fl._exists = true

	return nil
}

// Update updates the FollowingList in the database.
func (fl *FollowingList) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.following_list SET ` +
		`Id = ?, ListType = ?, Name = ?, Count = ?, IsAuto = ?, IsPimiry = ?, CreatedTime = ?` +
		` WHERE UserId = ?`

	// run query
	XOLog(sqlstr, fl.Id, fl.ListType, fl.Name, fl.Count, fl.IsAuto, fl.IsPimiry, fl.CreatedTime, fl.UserId)
	_, err = db.Exec(sqlstr, fl.Id, fl.ListType, fl.Name, fl.Count, fl.IsAuto, fl.IsPimiry, fl.CreatedTime, fl.UserId)
	return err
}

// Save saves the FollowingList to the database.
func (fl *FollowingList) Save(db XODB) error {
	if fl.Exists() {
		return fl.Update(db)
	}

	return fl.Replace(db)
}

// Delete deletes the FollowingList from the database.
func (fl *FollowingList) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fl._exists {
		return nil
	}

	// if deleted, bail
	if fl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.following_list WHERE UserId = ?`

	// run query
	XOLog(sqlstr, fl.UserId)
	_, err = db.Exec(sqlstr, fl.UserId)
	if err != nil {
		return err
	}

	// set deleted
	fl._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __FollowingList_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __FollowingList_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __FollowingList_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewFollowingList_Deleter() *__FollowingList_Deleter {
	d := __FollowingList_Deleter{whereSep: " AND "}
	return &d
}

func NewFollowingList_Updater() *__FollowingList_Updater {
	u := __FollowingList_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewFollowingList_Selector() *__FollowingList_Selector {
	u := __FollowingList_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__FollowingList_Deleter) Or(ins []int) *__FollowingList_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingList_Deleter) Id_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) Id_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) Id_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) UserId_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) UserId_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) UserId_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) ListType_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) ListType_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) ListType_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) Count_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) Count_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) Count_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) IsAuto_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAuto IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) IsAuto_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAuto NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) IsAuto_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsAuto_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsAuto_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsAuto_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsAuto_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsAuto_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) IsPimiry_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsPimiry IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) IsPimiry_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsPimiry NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) IsPimiry_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsPimiry_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsPimiry_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsPimiry_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsPimiry_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) IsPimiry_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) CreatedTime_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) CreatedTime_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) CreatedTime_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) CreatedTime_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) CreatedTime_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) CreatedTime_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) CreatedTime_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) CreatedTime_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingList_Updater) Or(ins []int) *__FollowingList_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingList_Updater) Id_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) Id_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) Id_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) UserId_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) UserId_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) UserId_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) ListType_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) ListType_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) ListType_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) Count_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) Count_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) Count_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) IsAuto_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAuto IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) IsAuto_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAuto NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) IsAuto_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsAuto_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsAuto_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsAuto_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsAuto_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsAuto_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) IsPimiry_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsPimiry IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) IsPimiry_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsPimiry NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) IsPimiry_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsPimiry_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsPimiry_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsPimiry_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsPimiry_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) IsPimiry_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) CreatedTime_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) CreatedTime_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) CreatedTime_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) CreatedTime_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) CreatedTime_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) CreatedTime_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) CreatedTime_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) CreatedTime_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingList_Selector) Or(ins []int) *__FollowingList_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingList_Selector) Id_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) Id_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) Id_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) UserId_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) UserId_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) UserId_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) ListType_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) ListType_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) ListType_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) Count_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) Count_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) Count_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) IsAuto_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAuto IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) IsAuto_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAuto NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) IsAuto_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsAuto_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsAuto_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsAuto_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsAuto_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsAuto_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAuto >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) IsPimiry_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsPimiry IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) IsPimiry_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsPimiry NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) IsPimiry_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsPimiry_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsPimiry_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsPimiry_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsPimiry_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) IsPimiry_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsPimiry >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) CreatedTime_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) CreatedTime_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) CreatedTime_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) CreatedTime_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) CreatedTime_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) CreatedTime_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) CreatedTime_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) CreatedTime_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__FollowingList_Deleter) Name_In(ins []string) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) Name_NotIn(ins []string) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__FollowingList_Deleter) Name_Like(val string) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) Name_EQ(val string) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__FollowingList_Updater) Name_In(ins []string) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) Name_NotIn(ins []string) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__FollowingList_Updater) Name_Like(val string) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) Name_EQ(val string) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__FollowingList_Selector) Name_In(ins []string) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) Name_NotIn(ins []string) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__FollowingList_Selector) Name_Like(val string) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) Name_EQ(val string) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__FollowingList_Updater) Id(newVal int) *__FollowingList_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingList_Updater) UserId(newVal int) *__FollowingList_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingList_Updater) ListType(newVal int) *__FollowingList_Updater {
	u.updates[" ListType = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__FollowingList_Updater) Name(newVal string) *__FollowingList_Updater {
	u.updates[" Name = ? "] = newVal
	return u
}

//ints

func (u *__FollowingList_Updater) Count(newVal int) *__FollowingList_Updater {
	u.updates[" Count = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingList_Updater) IsAuto(newVal int) *__FollowingList_Updater {
	u.updates[" IsAuto = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingList_Updater) IsPimiry(newVal int) *__FollowingList_Updater {
	u.updates[" IsPimiry = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingList_Updater) CreatedTime(newVal int) *__FollowingList_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__FollowingList_Selector) OrderBy_Id_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_Id_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__FollowingList_Selector) Select_Id() *__FollowingList_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__FollowingList_Selector) OrderBy_UserId_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_UserId_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__FollowingList_Selector) Select_UserId() *__FollowingList_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__FollowingList_Selector) OrderBy_ListType_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY ListType DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_ListType_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY ListType ASC "
	return u
}

func (u *__FollowingList_Selector) Select_ListType() *__FollowingList_Selector {
	u.selectCol = "ListType"
	return u
}

func (u *__FollowingList_Selector) OrderBy_Name_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Name DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_Name_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Name ASC "
	return u
}

func (u *__FollowingList_Selector) Select_Name() *__FollowingList_Selector {
	u.selectCol = "Name"
	return u
}

func (u *__FollowingList_Selector) OrderBy_Count_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Count DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_Count_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Count ASC "
	return u
}

func (u *__FollowingList_Selector) Select_Count() *__FollowingList_Selector {
	u.selectCol = "Count"
	return u
}

func (u *__FollowingList_Selector) OrderBy_IsAuto_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY IsAuto DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_IsAuto_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY IsAuto ASC "
	return u
}

func (u *__FollowingList_Selector) Select_IsAuto() *__FollowingList_Selector {
	u.selectCol = "IsAuto"
	return u
}

func (u *__FollowingList_Selector) OrderBy_IsPimiry_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY IsPimiry DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_IsPimiry_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY IsPimiry ASC "
	return u
}

func (u *__FollowingList_Selector) Select_IsPimiry() *__FollowingList_Selector {
	u.selectCol = "IsPimiry"
	return u
}

func (u *__FollowingList_Selector) OrderBy_CreatedTime_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_CreatedTime_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__FollowingList_Selector) Select_CreatedTime() *__FollowingList_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__FollowingList_Selector) Limit(num int) *__FollowingList_Selector {
	u.limit = num
	return u
}

func (u *__FollowingList_Selector) Offset(num int) *__FollowingList_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__FollowingList_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.following_list"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__FollowingList_Selector) GetRow(db *sqlx.DB) (*FollowingList, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &FollowingList{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__FollowingList_Selector) GetRows(db *sqlx.DB) ([]FollowingList, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []FollowingList
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingList_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__FollowingList_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingList_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingList_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__FollowingList_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.following_list SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__FollowingList_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.following_list WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  FollowingList ////////////////
func MassInsert_FollowingList(rows []FollowingList, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.following_list (" +
		"Id, ListType, Name, Count, IsAuto, IsPimiry, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.ListType)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.IsAuto)
		vals = append(vals, row.IsPimiry)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_FollowingList(rows []FollowingList, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.following_list (" +
		"Id, ListType, Name, Count, IsAuto, IsPimiry, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.ListType)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.IsAuto)
		vals = append(vals, row.IsPimiry)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

// FollowingListMember represents a row from 'ms.following_list_member'.

// Manualy copy this to project
type __FollowingListMember struct {
	Id             int `json:"Id"`             // Id -
	ListId         int `json:"ListId"`         // ListId -
	UserId         int `json:"UserId"`         // UserId -
	FollowedUserId int `json:"FollowedUserId"` // FollowedUserId -
	FollowType     int `json:"FollowType"`     // FollowType -
	UpdatedTimeMs  int `json:"UpdatedTimeMs"`  // UpdatedTimeMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FollowingListMember exists in the database.
func (flm *FollowingListMember) Exists() bool {
	return flm._exists
}

// Deleted provides information if the FollowingListMember has been deleted from the database.
func (flm *FollowingListMember) Deleted() bool {
	return flm._deleted
}

// Insert inserts the FollowingListMember to the database.
func (flm *FollowingListMember) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if flm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.following_list_member (` +
		`ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs)
	res, err := db.Exec(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	flm.Id = int(id)
	flm._exists = true

	return nil
}

// Insert inserts the FollowingListMember to the database.
func (flm *FollowingListMember) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.following_list_member (` +
		`ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs)
	res, err := db.Exec(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	flm.Id = int(id)
	flm._exists = true

	return nil
}

// Update updates the FollowingListMember in the database.
func (flm *FollowingListMember) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if flm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.following_list_member SET ` +
		`ListId = ?, UserId = ?, FollowedUserId = ?, FollowType = ?, UpdatedTimeMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs, flm.Id)
	_, err = db.Exec(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs, flm.Id)
	return err
}

// Save saves the FollowingListMember to the database.
func (flm *FollowingListMember) Save(db XODB) error {
	if flm.Exists() {
		return flm.Update(db)
	}

	return flm.Replace(db)
}

// Delete deletes the FollowingListMember from the database.
func (flm *FollowingListMember) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flm._exists {
		return nil
	}

	// if deleted, bail
	if flm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.following_list_member WHERE Id = ?`

	// run query
	XOLog(sqlstr, flm.Id)
	_, err = db.Exec(sqlstr, flm.Id)
	if err != nil {
		return err
	}

	// set deleted
	flm._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __FollowingListMember_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __FollowingListMember_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __FollowingListMember_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewFollowingListMember_Deleter() *__FollowingListMember_Deleter {
	d := __FollowingListMember_Deleter{whereSep: " AND "}
	return &d
}

func NewFollowingListMember_Updater() *__FollowingListMember_Updater {
	u := __FollowingListMember_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewFollowingListMember_Selector() *__FollowingListMember_Selector {
	u := __FollowingListMember_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__FollowingListMember_Deleter) Or(ins []int) *__FollowingListMember_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMember_Deleter) Id_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) Id_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) Id_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) ListId_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) ListId_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) ListId_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) UserId_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) UserId_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) UserId_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) FollowedUserId_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) FollowedUserId_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) FollowedUserId_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) FollowType_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) FollowType_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) FollowType_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) UpdatedTimeMs_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) UpdatedTimeMs_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMember_Updater) Or(ins []int) *__FollowingListMember_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMember_Updater) Id_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) Id_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) Id_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) ListId_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) ListId_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) ListId_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) UserId_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) UserId_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) UserId_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) FollowedUserId_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) FollowedUserId_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) FollowedUserId_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) FollowType_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) FollowType_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) FollowType_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) UpdatedTimeMs_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) UpdatedTimeMs_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMember_Selector) Or(ins []int) *__FollowingListMember_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMember_Selector) Id_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) Id_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) Id_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) ListId_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) ListId_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) ListId_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) UserId_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) UserId_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) UserId_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) FollowedUserId_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) FollowedUserId_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) FollowedUserId_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) FollowType_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) FollowType_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) FollowType_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) UpdatedTimeMs_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) UpdatedTimeMs_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__FollowingListMember_Updater) Id(newVal int) *__FollowingListMember_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) ListId(newVal int) *__FollowingListMember_Updater {
	u.updates[" ListId = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) UserId(newVal int) *__FollowingListMember_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) FollowedUserId(newVal int) *__FollowingListMember_Updater {
	u.updates[" FollowedUserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) FollowType(newVal int) *__FollowingListMember_Updater {
	u.updates[" FollowType = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) UpdatedTimeMs(newVal int) *__FollowingListMember_Updater {
	u.updates[" UpdatedTimeMs = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__FollowingListMember_Selector) OrderBy_Id_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_Id_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_Id() *__FollowingListMember_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_ListId_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY ListId DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_ListId_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY ListId ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_ListId() *__FollowingListMember_Selector {
	u.selectCol = "ListId"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UserId_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UserId_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_UserId() *__FollowingListMember_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowedUserId_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowedUserId DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowedUserId_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowedUserId ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_FollowedUserId() *__FollowingListMember_Selector {
	u.selectCol = "FollowedUserId"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowType_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowType DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowType_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowType ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_FollowType() *__FollowingListMember_Selector {
	u.selectCol = "FollowType"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UpdatedTimeMs_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UpdatedTimeMs DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UpdatedTimeMs_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UpdatedTimeMs ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_UpdatedTimeMs() *__FollowingListMember_Selector {
	u.selectCol = "UpdatedTimeMs"
	return u
}

func (u *__FollowingListMember_Selector) Limit(num int) *__FollowingListMember_Selector {
	u.limit = num
	return u
}

func (u *__FollowingListMember_Selector) Offset(num int) *__FollowingListMember_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__FollowingListMember_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.following_list_member"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__FollowingListMember_Selector) GetRow(db *sqlx.DB) (*FollowingListMember, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &FollowingListMember{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__FollowingListMember_Selector) GetRows(db *sqlx.DB) ([]FollowingListMember, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []FollowingListMember
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMember_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__FollowingListMember_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMember_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMember_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__FollowingListMember_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.following_list_member SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__FollowingListMember_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.following_list_member WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  FollowingListMember ////////////////
func MassInsert_FollowingListMember(rows []FollowingListMember, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.following_list_member (" +
		"ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ListId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.FollowedUserId)
		vals = append(vals, row.FollowType)
		vals = append(vals, row.UpdatedTimeMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_FollowingListMember(rows []FollowingListMember, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.following_list_member (" +
		"ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ListId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.FollowedUserId)
		vals = append(vals, row.FollowType)
		vals = append(vals, row.UpdatedTimeMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// FollowingListMemberHistory represents a row from 'ms.following_list_member_history'.

// Manualy copy this to project
type __FollowingListMemberHistory struct {
	Id             int `json:"Id"`             // Id -
	ListId         int `json:"ListId"`         // ListId -
	UserId         int `json:"UserId"`         // UserId -
	FollowedUserId int `json:"FollowedUserId"` // FollowedUserId -
	FollowType     int `json:"FollowType"`     // FollowType -
	UpdatedTimeMs  int `json:"UpdatedTimeMs"`  // UpdatedTimeMs -
	FollowId       int `json:"FollowId"`       // FollowId -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FollowingListMemberHistory exists in the database.
func (flmh *FollowingListMemberHistory) Exists() bool {
	return flmh._exists
}

// Deleted provides information if the FollowingListMemberHistory has been deleted from the database.
func (flmh *FollowingListMemberHistory) Deleted() bool {
	return flmh._deleted
}

// Insert inserts the FollowingListMemberHistory to the database.
func (flmh *FollowingListMemberHistory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if flmh._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.following_list_member_history (` +
		`ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs, FollowId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, flmh.ListId, flmh.UserId, flmh.FollowedUserId, flmh.FollowType, flmh.UpdatedTimeMs, flmh.FollowId)
	res, err := db.Exec(sqlstr, flmh.ListId, flmh.UserId, flmh.FollowedUserId, flmh.FollowType, flmh.UpdatedTimeMs, flmh.FollowId)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	flmh.Id = int(id)
	flmh._exists = true

	return nil
}

// Insert inserts the FollowingListMemberHistory to the database.
func (flmh *FollowingListMemberHistory) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.following_list_member_history (` +
		`ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs, FollowId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, flmh.ListId, flmh.UserId, flmh.FollowedUserId, flmh.FollowType, flmh.UpdatedTimeMs, flmh.FollowId)
	res, err := db.Exec(sqlstr, flmh.ListId, flmh.UserId, flmh.FollowedUserId, flmh.FollowType, flmh.UpdatedTimeMs, flmh.FollowId)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	flmh.Id = int(id)
	flmh._exists = true

	return nil
}

// Update updates the FollowingListMemberHistory in the database.
func (flmh *FollowingListMemberHistory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flmh._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if flmh._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.following_list_member_history SET ` +
		`ListId = ?, UserId = ?, FollowedUserId = ?, FollowType = ?, UpdatedTimeMs = ?, FollowId = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, flmh.ListId, flmh.UserId, flmh.FollowedUserId, flmh.FollowType, flmh.UpdatedTimeMs, flmh.FollowId, flmh.Id)
	_, err = db.Exec(sqlstr, flmh.ListId, flmh.UserId, flmh.FollowedUserId, flmh.FollowType, flmh.UpdatedTimeMs, flmh.FollowId, flmh.Id)
	return err
}

// Save saves the FollowingListMemberHistory to the database.
func (flmh *FollowingListMemberHistory) Save(db XODB) error {
	if flmh.Exists() {
		return flmh.Update(db)
	}

	return flmh.Replace(db)
}

// Delete deletes the FollowingListMemberHistory from the database.
func (flmh *FollowingListMemberHistory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flmh._exists {
		return nil
	}

	// if deleted, bail
	if flmh._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.following_list_member_history WHERE Id = ?`

	// run query
	XOLog(sqlstr, flmh.Id)
	_, err = db.Exec(sqlstr, flmh.Id)
	if err != nil {
		return err
	}

	// set deleted
	flmh._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __FollowingListMemberHistory_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __FollowingListMemberHistory_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __FollowingListMemberHistory_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewFollowingListMemberHistory_Deleter() *__FollowingListMemberHistory_Deleter {
	d := __FollowingListMemberHistory_Deleter{whereSep: " AND "}
	return &d
}

func NewFollowingListMemberHistory_Updater() *__FollowingListMemberHistory_Updater {
	u := __FollowingListMemberHistory_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewFollowingListMemberHistory_Selector() *__FollowingListMemberHistory_Selector {
	u := __FollowingListMemberHistory_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__FollowingListMemberHistory_Deleter) Or(ins []int) *__FollowingListMemberHistory_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMemberHistory_Deleter) Id_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) Id_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) Id_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) ListId_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) ListId_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) ListId_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) UserId_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) UserId_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) UserId_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) FollowedUserId_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) FollowedUserId_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) FollowType_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) FollowType_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) UpdatedTimeMs_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) UpdatedTimeMs_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) UpdatedTimeMs_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UpdatedTimeMs_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UpdatedTimeMs_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UpdatedTimeMs_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UpdatedTimeMs_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UpdatedTimeMs_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) FollowId_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) FollowId_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) FollowId_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowId_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowId_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowId_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowId_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowId_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMemberHistory_Updater) Or(ins []int) *__FollowingListMemberHistory_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMemberHistory_Updater) Id_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) Id_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) Id_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) ListId_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) ListId_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) ListId_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) UserId_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) UserId_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) UserId_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) FollowedUserId_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) FollowedUserId_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) FollowType_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) FollowType_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) FollowType_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) UpdatedTimeMs_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) UpdatedTimeMs_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) UpdatedTimeMs_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UpdatedTimeMs_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UpdatedTimeMs_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UpdatedTimeMs_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UpdatedTimeMs_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UpdatedTimeMs_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) FollowId_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) FollowId_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) FollowId_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowId_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowId_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowId_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowId_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowId_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMemberHistory_Selector) Or(ins []int) *__FollowingListMemberHistory_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Id_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) Id_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) Id_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) ListId_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) ListId_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) ListId_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) UserId_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) UserId_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) UserId_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) FollowedUserId_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) FollowedUserId_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) FollowType_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) FollowType_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) FollowType_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) UpdatedTimeMs_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) UpdatedTimeMs_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) UpdatedTimeMs_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UpdatedTimeMs_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UpdatedTimeMs_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UpdatedTimeMs_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UpdatedTimeMs_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UpdatedTimeMs_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) FollowId_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) FollowId_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) FollowId_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowId_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowId_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowId_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowId_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowId_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__FollowingListMemberHistory_Updater) Id(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) ListId(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" ListId = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) UserId(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) FollowedUserId(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" FollowedUserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) FollowType(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" FollowType = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) UpdatedTimeMs(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" UpdatedTimeMs = ? "] = newVal
	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) FollowId(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" FollowId = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__FollowingListMemberHistory_Selector) OrderBy_Id_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_Id_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_Id() *__FollowingListMemberHistory_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_ListId_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY ListId DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_ListId_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY ListId ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_ListId() *__FollowingListMemberHistory_Selector {
	u.selectCol = "ListId"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_UserId_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_UserId_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_UserId() *__FollowingListMemberHistory_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowedUserId_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowedUserId DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowedUserId_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowedUserId ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_FollowedUserId() *__FollowingListMemberHistory_Selector {
	u.selectCol = "FollowedUserId"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowType_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowType DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowType_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowType ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_FollowType() *__FollowingListMemberHistory_Selector {
	u.selectCol = "FollowType"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_UpdatedTimeMs_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY UpdatedTimeMs DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_UpdatedTimeMs_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY UpdatedTimeMs ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_UpdatedTimeMs() *__FollowingListMemberHistory_Selector {
	u.selectCol = "UpdatedTimeMs"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowId_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowId DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowId_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowId ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_FollowId() *__FollowingListMemberHistory_Selector {
	u.selectCol = "FollowId"
	return u
}

func (u *__FollowingListMemberHistory_Selector) Limit(num int) *__FollowingListMemberHistory_Selector {
	u.limit = num
	return u
}

func (u *__FollowingListMemberHistory_Selector) Offset(num int) *__FollowingListMemberHistory_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__FollowingListMemberHistory_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.following_list_member_history"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__FollowingListMemberHistory_Selector) GetRow(db *sqlx.DB) (*FollowingListMemberHistory, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &FollowingListMemberHistory{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__FollowingListMemberHistory_Selector) GetRows(db *sqlx.DB) ([]FollowingListMemberHistory, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []FollowingListMemberHistory
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMemberHistory_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__FollowingListMemberHistory_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMemberHistory_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMemberHistory_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__FollowingListMemberHistory_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.following_list_member_history SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__FollowingListMemberHistory_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.following_list_member_history WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  FollowingListMemberHistory ////////////////
func MassInsert_FollowingListMemberHistory(rows []FollowingListMemberHistory, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.following_list_member_history (" +
		"ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs, FollowId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ListId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.FollowedUserId)
		vals = append(vals, row.FollowType)
		vals = append(vals, row.UpdatedTimeMs)
		vals = append(vals, row.FollowId)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_FollowingListMemberHistory(rows []FollowingListMemberHistory, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.following_list_member_history (" +
		"ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs, FollowId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ListId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.FollowedUserId)
		vals = append(vals, row.FollowType)
		vals = append(vals, row.UpdatedTimeMs)
		vals = append(vals, row.FollowId)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

// Like represents a row from 'ms.likes'.

// Manualy copy this to project
type __Like struct {
	Id          int `json:"Id"`          // Id -
	PostId      int `json:"PostId"`      // PostId -
	UserId      int `json:"UserId"`      // UserId -
	TypeId      int `json:"TypeId"`      // TypeId -
	CreatedTime int `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Like exists in the database.
func (l *Like) Exists() bool {
	return l._exists
}

// Deleted provides information if the Like has been deleted from the database.
func (l *Like) Deleted() bool {
	return l._deleted
}

// Insert inserts the Like to the database.
func (l *Like) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.likes (` +
		`Id, PostId, TypeId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, l.Id, l.PostId, l.TypeId, l.CreatedTime)
	res, err := db.Exec(sqlstr, l.Id, l.PostId, l.TypeId, l.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	l.UserId = int(id)
	l._exists = true

	return nil
}

// Insert inserts the Like to the database.
func (l *Like) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.likes (` +
		`Id, PostId, TypeId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, l.Id, l.PostId, l.TypeId, l.CreatedTime)
	res, err := db.Exec(sqlstr, l.Id, l.PostId, l.TypeId, l.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	l.UserId = int(id)
	l._exists = true

	return nil
}

// Update updates the Like in the database.
func (l *Like) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.likes SET ` +
		`Id = ?, PostId = ?, TypeId = ?, CreatedTime = ?` +
		` WHERE UserId = ?`

	// run query
	XOLog(sqlstr, l.Id, l.PostId, l.TypeId, l.CreatedTime, l.UserId)
	_, err = db.Exec(sqlstr, l.Id, l.PostId, l.TypeId, l.CreatedTime, l.UserId)
	return err
}

// Save saves the Like to the database.
func (l *Like) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Replace(db)
}

// Delete deletes the Like from the database.
func (l *Like) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.likes WHERE UserId = ?`

	// run query
	XOLog(sqlstr, l.UserId)
	_, err = db.Exec(sqlstr, l.UserId)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Like_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Like_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Like_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewLike_Deleter() *__Like_Deleter {
	d := __Like_Deleter{whereSep: " AND "}
	return &d
}

func NewLike_Updater() *__Like_Updater {
	u := __Like_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewLike_Selector() *__Like_Selector {
	u := __Like_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Like_Deleter) Or(ins []int) *__Like_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Like_Deleter) Id_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) Id_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) Id_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Deleter) PostId_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) PostId_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) PostId_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Deleter) UserId_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) UserId_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) UserId_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Deleter) TypeId_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) TypeId_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) TypeId_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Deleter) CreatedTime_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) CreatedTime_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) CreatedTime_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Like_Updater) Or(ins []int) *__Like_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Like_Updater) Id_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) Id_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) Id_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Updater) PostId_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) PostId_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) PostId_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Updater) UserId_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) UserId_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) UserId_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Updater) TypeId_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) TypeId_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) TypeId_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Updater) CreatedTime_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) CreatedTime_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) CreatedTime_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Like_Selector) Or(ins []int) *__Like_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Like_Selector) Id_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) Id_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) Id_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Selector) PostId_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) PostId_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) PostId_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Selector) UserId_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) UserId_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) UserId_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Selector) TypeId_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) TypeId_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) TypeId_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Selector) CreatedTime_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) CreatedTime_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) CreatedTime_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Like_Updater) Id(newVal int) *__Like_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__Like_Updater) PostId(newVal int) *__Like_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Like_Updater) UserId(newVal int) *__Like_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Like_Updater) TypeId(newVal int) *__Like_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Like_Updater) CreatedTime(newVal int) *__Like_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Like_Selector) OrderBy_Id_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Like_Selector) OrderBy_Id_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Like_Selector) Select_Id() *__Like_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Like_Selector) OrderBy_PostId_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Like_Selector) OrderBy_PostId_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Like_Selector) Select_PostId() *__Like_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Like_Selector) OrderBy_UserId_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Like_Selector) OrderBy_UserId_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Like_Selector) Select_UserId() *__Like_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Like_Selector) OrderBy_TypeId_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__Like_Selector) OrderBy_TypeId_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__Like_Selector) Select_TypeId() *__Like_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__Like_Selector) OrderBy_CreatedTime_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Like_Selector) OrderBy_CreatedTime_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Like_Selector) Select_CreatedTime() *__Like_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Like_Selector) Limit(num int) *__Like_Selector {
	u.limit = num
	return u
}

func (u *__Like_Selector) Offset(num int) *__Like_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Like_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.likes"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Like_Selector) GetRow(db *sqlx.DB) (*Like, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Like{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__Like_Selector) GetRows(db *sqlx.DB) ([]Like, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Like
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Like_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Like_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Like_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Like_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Like_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.likes SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Like_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.likes WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Like ////////////////
func MassInsert_Like(rows []Like, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.likes (" +
		"Id, PostId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.PostId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Like(rows []Like, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.likes (" +
		"Id, PostId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.PostId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// Media represents a row from 'ms.media'.

// Manualy copy this to project
type __Media struct {
	Id          int    `json:"Id"`          // Id -
	UserId      int    `json:"UserId"`      // UserId -
	PostId      int    `json:"PostId"`      // PostId -
	AlbumId     int    `json:"AlbumId"`     // AlbumId -
	TypeId      int    `json:"TypeId"`      // TypeId -
	CreatedTime int    `json:"CreatedTime"` // CreatedTime -
	Src         string `json:"Src"`         // Src -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Media exists in the database.
func (m *Media) Exists() bool {
	return m._exists
}

// Deleted provides information if the Media has been deleted from the database.
func (m *Media) Deleted() bool {
	return m._deleted
}

// Insert inserts the Media to the database.
func (m *Media) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.media (` +
		`UserId, PostId, AlbumId, TypeId, CreatedTime, Src` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.UserId, m.PostId, m.AlbumId, m.TypeId, m.CreatedTime, m.Src)
	res, err := db.Exec(sqlstr, m.UserId, m.PostId, m.AlbumId, m.TypeId, m.CreatedTime, m.Src)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.Id = int(id)
	m._exists = true

	return nil
}

// Insert inserts the Media to the database.
func (m *Media) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.media (` +
		`UserId, PostId, AlbumId, TypeId, CreatedTime, Src` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.UserId, m.PostId, m.AlbumId, m.TypeId, m.CreatedTime, m.Src)
	res, err := db.Exec(sqlstr, m.UserId, m.PostId, m.AlbumId, m.TypeId, m.CreatedTime, m.Src)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.Id = int(id)
	m._exists = true

	return nil
}

// Update updates the Media in the database.
func (m *Media) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.media SET ` +
		`UserId = ?, PostId = ?, AlbumId = ?, TypeId = ?, CreatedTime = ?, Src = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.UserId, m.PostId, m.AlbumId, m.TypeId, m.CreatedTime, m.Src, m.Id)
	_, err = db.Exec(sqlstr, m.UserId, m.PostId, m.AlbumId, m.TypeId, m.CreatedTime, m.Src, m.Id)
	return err
}

// Save saves the Media to the database.
func (m *Media) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Replace(db)
}

// Delete deletes the Media from the database.
func (m *Media) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.media WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.Id)
	_, err = db.Exec(sqlstr, m.Id)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Media_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Media_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Media_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMedia_Deleter() *__Media_Deleter {
	d := __Media_Deleter{whereSep: " AND "}
	return &d
}

func NewMedia_Updater() *__Media_Updater {
	u := __Media_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMedia_Selector() *__Media_Selector {
	u := __Media_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Media_Deleter) Or(ins []int) *__Media_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Media_Deleter) Id_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) Id_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) Id_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) UserId_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) UserId_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) UserId_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) PostId_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) PostId_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) PostId_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) AlbumId_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) AlbumId_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) AlbumId_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) TypeId_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) TypeId_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) TypeId_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) CreatedTime_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) CreatedTime_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) CreatedTime_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) CreatedTime_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) CreatedTime_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) CreatedTime_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) CreatedTime_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) CreatedTime_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Media_Updater) Or(ins []int) *__Media_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Media_Updater) Id_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) Id_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) Id_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) UserId_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) UserId_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) UserId_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) PostId_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) PostId_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) PostId_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) AlbumId_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) AlbumId_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) AlbumId_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) TypeId_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) TypeId_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) TypeId_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) CreatedTime_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) CreatedTime_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) CreatedTime_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) CreatedTime_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) CreatedTime_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) CreatedTime_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) CreatedTime_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) CreatedTime_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Media_Selector) Or(ins []int) *__Media_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Media_Selector) Id_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) Id_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) Id_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) UserId_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) UserId_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) UserId_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) PostId_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) PostId_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) PostId_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) AlbumId_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) AlbumId_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) AlbumId_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) TypeId_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) TypeId_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) TypeId_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) CreatedTime_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) CreatedTime_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) CreatedTime_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) CreatedTime_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) CreatedTime_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) CreatedTime_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) CreatedTime_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) CreatedTime_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Media_Deleter) Src_In(ins []string) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) Src_NotIn(ins []string) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Media_Deleter) Src_Like(val string) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) Src_EQ(val string) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Media_Updater) Src_In(ins []string) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) Src_NotIn(ins []string) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Media_Updater) Src_Like(val string) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) Src_EQ(val string) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Media_Selector) Src_In(ins []string) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) Src_NotIn(ins []string) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Src NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Media_Selector) Src_Like(val string) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) Src_EQ(val string) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Src = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Media_Updater) Id(newVal int) *__Media_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__Media_Updater) UserId(newVal int) *__Media_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Media_Updater) PostId(newVal int) *__Media_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Media_Updater) AlbumId(newVal int) *__Media_Updater {
	u.updates[" AlbumId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Media_Updater) TypeId(newVal int) *__Media_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Media_Updater) CreatedTime(newVal int) *__Media_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__Media_Updater) Src(newVal string) *__Media_Updater {
	u.updates[" Src = ? "] = newVal
	return u
}

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Media_Selector) OrderBy_Id_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Media_Selector) OrderBy_Id_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Media_Selector) Select_Id() *__Media_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Media_Selector) OrderBy_UserId_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Media_Selector) OrderBy_UserId_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Media_Selector) Select_UserId() *__Media_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Media_Selector) OrderBy_PostId_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Media_Selector) OrderBy_PostId_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Media_Selector) Select_PostId() *__Media_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Media_Selector) OrderBy_AlbumId_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY AlbumId DESC "
	return u
}

func (u *__Media_Selector) OrderBy_AlbumId_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY AlbumId ASC "
	return u
}

func (u *__Media_Selector) Select_AlbumId() *__Media_Selector {
	u.selectCol = "AlbumId"
	return u
}

func (u *__Media_Selector) OrderBy_TypeId_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__Media_Selector) OrderBy_TypeId_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__Media_Selector) Select_TypeId() *__Media_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__Media_Selector) OrderBy_CreatedTime_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Media_Selector) OrderBy_CreatedTime_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Media_Selector) Select_CreatedTime() *__Media_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Media_Selector) OrderBy_Src_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY Src DESC "
	return u
}

func (u *__Media_Selector) OrderBy_Src_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY Src ASC "
	return u
}

func (u *__Media_Selector) Select_Src() *__Media_Selector {
	u.selectCol = "Src"
	return u
}

func (u *__Media_Selector) Limit(num int) *__Media_Selector {
	u.limit = num
	return u
}

func (u *__Media_Selector) Offset(num int) *__Media_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Media_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.media"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Media_Selector) GetRow(db *sqlx.DB) (*Media, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Media{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__Media_Selector) GetRows(db *sqlx.DB) ([]Media, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Media
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Media_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Media_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Media_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Media_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Media_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.media SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Media_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.media WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Media ////////////////
func MassInsert_Media(rows []Media, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.media (" +
		"UserId, PostId, AlbumId, TypeId, CreatedTime, Src" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.AlbumId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.Src)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Media(rows []Media, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.media (" +
		"UserId, PostId, AlbumId, TypeId, CreatedTime, Src" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.AlbumId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.Src)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

// Message represents a row from 'ms.message'.

// Manualy copy this to project
type __Message struct {
	Id         int    `json:"Id"`         // Id -
	ToUserId   int    `json:"ToUserId"`   // ToUserId -
	RoomKey    string `json:"RoomKey"`    // RoomKey -
	MessageKey string `json:"MessageKey"` // MessageKey -
	FromUserID int    `json:"FromUserID"` // FromUserID -
	Data       string `json:"Data"`       // Data -
	TimeMs     int    `json:"TimeMs"`     // TimeMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Message exists in the database.
func (m *Message) Exists() bool {
	return m._exists
}

// Deleted provides information if the Message has been deleted from the database.
func (m *Message) Deleted() bool {
	return m._deleted
}

// Insert inserts the Message to the database.
func (m *Message) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.message (` +
		`ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.ToUserId, m.RoomKey, m.MessageKey, m.FromUserID, m.Data, m.TimeMs)
	res, err := db.Exec(sqlstr, m.ToUserId, m.RoomKey, m.MessageKey, m.FromUserID, m.Data, m.TimeMs)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.Id = int(id)
	m._exists = true

	return nil
}

// Insert inserts the Message to the database.
func (m *Message) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.message (` +
		`ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.ToUserId, m.RoomKey, m.MessageKey, m.FromUserID, m.Data, m.TimeMs)
	res, err := db.Exec(sqlstr, m.ToUserId, m.RoomKey, m.MessageKey, m.FromUserID, m.Data, m.TimeMs)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.Id = int(id)
	m._exists = true

	return nil
}

// Update updates the Message in the database.
func (m *Message) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.message SET ` +
		`ToUserId = ?, RoomKey = ?, MessageKey = ?, FromUserID = ?, Data = ?, TimeMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.ToUserId, m.RoomKey, m.MessageKey, m.FromUserID, m.Data, m.TimeMs, m.Id)
	_, err = db.Exec(sqlstr, m.ToUserId, m.RoomKey, m.MessageKey, m.FromUserID, m.Data, m.TimeMs, m.Id)
	return err
}

// Save saves the Message to the database.
func (m *Message) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Replace(db)
}

// Delete deletes the Message from the database.
func (m *Message) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.message WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.Id)
	_, err = db.Exec(sqlstr, m.Id)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Message_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Message_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Message_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMessage_Deleter() *__Message_Deleter {
	d := __Message_Deleter{whereSep: " AND "}
	return &d
}

func NewMessage_Updater() *__Message_Updater {
	u := __Message_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMessage_Selector() *__Message_Selector {
	u := __Message_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Message_Deleter) Or(ins []int) *__Message_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Message_Deleter) Id_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) Id_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) Id_EQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_NotEQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) ToUserId_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) ToUserId_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) ToUserId_EQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_NotEQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) FromUserID_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) FromUserID_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) FromUserID_EQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_NotEQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) TimeMs_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) TimeMs_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) TimeMs_EQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TimeMs_NotEQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TimeMs_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TimeMs_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TimeMs_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TimeMs_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Message_Updater) Or(ins []int) *__Message_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Message_Updater) Id_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) Id_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) Id_EQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_NotEQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) ToUserId_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) ToUserId_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) ToUserId_EQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_NotEQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) FromUserID_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) FromUserID_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) FromUserID_EQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_NotEQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) TimeMs_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) TimeMs_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) TimeMs_EQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TimeMs_NotEQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TimeMs_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TimeMs_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TimeMs_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TimeMs_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Message_Selector) Or(ins []int) *__Message_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Message_Selector) Id_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) Id_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) Id_EQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_NotEQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) ToUserId_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) ToUserId_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) ToUserId_EQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_NotEQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) FromUserID_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) FromUserID_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) FromUserID_EQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_NotEQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) TimeMs_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) TimeMs_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) TimeMs_EQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TimeMs_NotEQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TimeMs_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TimeMs_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TimeMs_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TimeMs_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Message_Deleter) RoomKey_In(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) RoomKey_NotIn(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Deleter) RoomKey_Like(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) RoomKey_EQ(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) MessageKey_In(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) MessageKey_NotIn(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Deleter) MessageKey_Like(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) MessageKey_EQ(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) Data_In(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) Data_NotIn(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Deleter) Data_Like(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) Data_EQ(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Message_Updater) RoomKey_In(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) RoomKey_NotIn(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Updater) RoomKey_Like(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) RoomKey_EQ(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) MessageKey_In(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) MessageKey_NotIn(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Updater) MessageKey_Like(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) MessageKey_EQ(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) Data_In(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) Data_NotIn(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Updater) Data_Like(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) Data_EQ(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Message_Selector) RoomKey_In(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) RoomKey_NotIn(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Selector) RoomKey_Like(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) RoomKey_EQ(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) MessageKey_In(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) MessageKey_NotIn(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Selector) MessageKey_Like(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) MessageKey_EQ(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) Data_In(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) Data_NotIn(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Selector) Data_Like(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) Data_EQ(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Message_Updater) Id(newVal int) *__Message_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__Message_Updater) ToUserId(newVal int) *__Message_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__Message_Updater) RoomKey(newVal string) *__Message_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__Message_Updater) MessageKey(newVal string) *__Message_Updater {
	u.updates[" MessageKey = ? "] = newVal
	return u
}

//ints

func (u *__Message_Updater) FromUserID(newVal int) *__Message_Updater {
	u.updates[" FromUserID = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__Message_Updater) Data(newVal string) *__Message_Updater {
	u.updates[" Data = ? "] = newVal
	return u
}

//ints

func (u *__Message_Updater) TimeMs(newVal int) *__Message_Updater {
	u.updates[" TimeMs = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Message_Selector) OrderBy_Id_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Message_Selector) OrderBy_Id_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Message_Selector) Select_Id() *__Message_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Message_Selector) OrderBy_ToUserId_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__Message_Selector) OrderBy_ToUserId_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__Message_Selector) Select_ToUserId() *__Message_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__Message_Selector) OrderBy_RoomKey_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__Message_Selector) OrderBy_RoomKey_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__Message_Selector) Select_RoomKey() *__Message_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__Message_Selector) OrderBy_MessageKey_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY MessageKey DESC "
	return u
}

func (u *__Message_Selector) OrderBy_MessageKey_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY MessageKey ASC "
	return u
}

func (u *__Message_Selector) Select_MessageKey() *__Message_Selector {
	u.selectCol = "MessageKey"
	return u
}

func (u *__Message_Selector) OrderBy_FromUserID_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY FromUserID DESC "
	return u
}

func (u *__Message_Selector) OrderBy_FromUserID_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY FromUserID ASC "
	return u
}

func (u *__Message_Selector) Select_FromUserID() *__Message_Selector {
	u.selectCol = "FromUserID"
	return u
}

func (u *__Message_Selector) OrderBy_Data_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY Data DESC "
	return u
}

func (u *__Message_Selector) OrderBy_Data_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY Data ASC "
	return u
}

func (u *__Message_Selector) Select_Data() *__Message_Selector {
	u.selectCol = "Data"
	return u
}

func (u *__Message_Selector) OrderBy_TimeMs_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY TimeMs DESC "
	return u
}

func (u *__Message_Selector) OrderBy_TimeMs_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY TimeMs ASC "
	return u
}

func (u *__Message_Selector) Select_TimeMs() *__Message_Selector {
	u.selectCol = "TimeMs"
	return u
}

func (u *__Message_Selector) Limit(num int) *__Message_Selector {
	u.limit = num
	return u
}

func (u *__Message_Selector) Offset(num int) *__Message_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Message_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.message"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Message_Selector) GetRow(db *sqlx.DB) (*Message, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Message{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__Message_Selector) GetRows(db *sqlx.DB) ([]Message, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Message
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Message_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Message_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Message_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Message_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Message_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.message SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Message_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.message WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Message ////////////////
func MassInsert_Message(rows []Message, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.message (" +
		"ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.FromUserID)
		vals = append(vals, row.Data)
		vals = append(vals, row.TimeMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Message(rows []Message, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.message (" +
		"ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.FromUserID)
		vals = append(vals, row.Data)
		vals = append(vals, row.TimeMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

// MsgDeletedFromServer represents a row from 'ms.msg_deleted_from_server'.

// Manualy copy this to project
type __MsgDeletedFromServer struct {
	Id         int    `json:"Id"`         // Id -
	ToUserId   int    `json:"ToUserId"`   // ToUserId -
	MsgKey     string `json:"MsgKey"`     // MsgKey -
	PeerUserId int    `json:"PeerUserId"` // PeerUserId -
	RoomKey    string `json:"RoomKey"`    // RoomKey -
	AtTime     int    `json:"AtTime"`     // AtTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MsgDeletedFromServer exists in the database.
func (mdfs *MsgDeletedFromServer) Exists() bool {
	return mdfs._exists
}

// Deleted provides information if the MsgDeletedFromServer has been deleted from the database.
func (mdfs *MsgDeletedFromServer) Deleted() bool {
	return mdfs._deleted
}

// Insert inserts the MsgDeletedFromServer to the database.
func (mdfs *MsgDeletedFromServer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mdfs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.msg_deleted_from_server (` +
		`ToUserId, MsgKey, PeerUserId, RoomKey, AtTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mdfs.ToUserId, mdfs.MsgKey, mdfs.PeerUserId, mdfs.RoomKey, mdfs.AtTime)
	res, err := db.Exec(sqlstr, mdfs.ToUserId, mdfs.MsgKey, mdfs.PeerUserId, mdfs.RoomKey, mdfs.AtTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mdfs.Id = int(id)
	mdfs._exists = true

	return nil
}

// Insert inserts the MsgDeletedFromServer to the database.
func (mdfs *MsgDeletedFromServer) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.msg_deleted_from_server (` +
		`ToUserId, MsgKey, PeerUserId, RoomKey, AtTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mdfs.ToUserId, mdfs.MsgKey, mdfs.PeerUserId, mdfs.RoomKey, mdfs.AtTime)
	res, err := db.Exec(sqlstr, mdfs.ToUserId, mdfs.MsgKey, mdfs.PeerUserId, mdfs.RoomKey, mdfs.AtTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mdfs.Id = int(id)
	mdfs._exists = true

	return nil
}

// Update updates the MsgDeletedFromServer in the database.
func (mdfs *MsgDeletedFromServer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mdfs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mdfs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.msg_deleted_from_server SET ` +
		`ToUserId = ?, MsgKey = ?, PeerUserId = ?, RoomKey = ?, AtTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, mdfs.ToUserId, mdfs.MsgKey, mdfs.PeerUserId, mdfs.RoomKey, mdfs.AtTime, mdfs.Id)
	_, err = db.Exec(sqlstr, mdfs.ToUserId, mdfs.MsgKey, mdfs.PeerUserId, mdfs.RoomKey, mdfs.AtTime, mdfs.Id)
	return err
}

// Save saves the MsgDeletedFromServer to the database.
func (mdfs *MsgDeletedFromServer) Save(db XODB) error {
	if mdfs.Exists() {
		return mdfs.Update(db)
	}

	return mdfs.Replace(db)
}

// Delete deletes the MsgDeletedFromServer from the database.
func (mdfs *MsgDeletedFromServer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mdfs._exists {
		return nil
	}

	// if deleted, bail
	if mdfs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.msg_deleted_from_server WHERE Id = ?`

	// run query
	XOLog(sqlstr, mdfs.Id)
	_, err = db.Exec(sqlstr, mdfs.Id)
	if err != nil {
		return err
	}

	// set deleted
	mdfs._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MsgDeletedFromServer_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MsgDeletedFromServer_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MsgDeletedFromServer_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMsgDeletedFromServer_Deleter() *__MsgDeletedFromServer_Deleter {
	d := __MsgDeletedFromServer_Deleter{whereSep: " AND "}
	return &d
}

func NewMsgDeletedFromServer_Updater() *__MsgDeletedFromServer_Updater {
	u := __MsgDeletedFromServer_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMsgDeletedFromServer_Selector() *__MsgDeletedFromServer_Selector {
	u := __MsgDeletedFromServer_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MsgDeletedFromServer_Deleter) Or(ins []int) *__MsgDeletedFromServer_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MsgDeletedFromServer_Deleter) Id_In(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) Id_NotIn(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) Id_EQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_NotEQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_LT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_LE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_GT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_GE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Deleter) ToUserId_In(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) ToUserId_NotIn(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_EQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_NotEQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_LT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_LE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_GT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_GE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Deleter) PeerUserId_In(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) PeerUserId_NotIn(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_EQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_NotEQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_LT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_LE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_GT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_GE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Deleter) AtTime_In(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) AtTime_NotIn(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) AtTime_EQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) AtTime_NotEQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) AtTime_LT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) AtTime_LE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) AtTime_GT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) AtTime_GE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgDeletedFromServer_Updater) Or(ins []int) *__MsgDeletedFromServer_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MsgDeletedFromServer_Updater) Id_In(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) Id_NotIn(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) Id_EQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_NotEQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_LT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_LE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_GT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_GE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Updater) ToUserId_In(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) ToUserId_NotIn(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_EQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_NotEQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_LT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_LE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_GT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_GE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Updater) PeerUserId_In(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) PeerUserId_NotIn(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_EQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_NotEQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_LT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_LE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_GT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_GE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Updater) AtTime_In(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) AtTime_NotIn(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) AtTime_EQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) AtTime_NotEQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) AtTime_LT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) AtTime_LE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) AtTime_GT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) AtTime_GE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgDeletedFromServer_Selector) Or(ins []int) *__MsgDeletedFromServer_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Id_In(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) Id_NotIn(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) Id_EQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_NotEQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_LT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_LE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_GT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_GE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Selector) ToUserId_In(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) ToUserId_NotIn(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_EQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_NotEQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_LT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_LE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_GT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_GE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Selector) PeerUserId_In(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) PeerUserId_NotIn(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_EQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_NotEQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_LT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_LE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_GT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_GE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Selector) AtTime_In(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) AtTime_NotIn(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) AtTime_EQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) AtTime_NotEQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) AtTime_LT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) AtTime_LE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) AtTime_GT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) AtTime_GE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MsgDeletedFromServer_Deleter) MsgKey_In(ins []string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) MsgKey_NotIn(ins []string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Deleter) MsgKey_Like(val string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) MsgKey_EQ(val string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Deleter) RoomKey_In(ins []string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) RoomKey_NotIn(ins []string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Deleter) RoomKey_Like(val string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) RoomKey_EQ(val string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgDeletedFromServer_Updater) MsgKey_In(ins []string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) MsgKey_NotIn(ins []string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Updater) MsgKey_Like(val string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) MsgKey_EQ(val string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Updater) RoomKey_In(ins []string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) RoomKey_NotIn(ins []string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Updater) RoomKey_Like(val string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) RoomKey_EQ(val string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgDeletedFromServer_Selector) MsgKey_In(ins []string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) MsgKey_NotIn(ins []string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Selector) MsgKey_Like(val string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) MsgKey_EQ(val string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Selector) RoomKey_In(ins []string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) RoomKey_NotIn(ins []string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Selector) RoomKey_Like(val string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) RoomKey_EQ(val string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MsgDeletedFromServer_Updater) Id(newVal int) *__MsgDeletedFromServer_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__MsgDeletedFromServer_Updater) ToUserId(newVal int) *__MsgDeletedFromServer_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__MsgDeletedFromServer_Updater) MsgKey(newVal string) *__MsgDeletedFromServer_Updater {
	u.updates[" MsgKey = ? "] = newVal
	return u
}

//ints

func (u *__MsgDeletedFromServer_Updater) PeerUserId(newVal int) *__MsgDeletedFromServer_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__MsgDeletedFromServer_Updater) RoomKey(newVal string) *__MsgDeletedFromServer_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__MsgDeletedFromServer_Updater) AtTime(newVal int) *__MsgDeletedFromServer_Updater {
	u.updates[" AtTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MsgDeletedFromServer_Selector) OrderBy_Id_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_Id_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_Id() *__MsgDeletedFromServer_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_ToUserId_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_ToUserId_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_ToUserId() *__MsgDeletedFromServer_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_MsgKey_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY MsgKey DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_MsgKey_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY MsgKey ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_MsgKey() *__MsgDeletedFromServer_Selector {
	u.selectCol = "MsgKey"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_PeerUserId_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_PeerUserId_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_PeerUserId() *__MsgDeletedFromServer_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_RoomKey_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_RoomKey_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_RoomKey() *__MsgDeletedFromServer_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_AtTime_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY AtTime DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_AtTime_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY AtTime ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_AtTime() *__MsgDeletedFromServer_Selector {
	u.selectCol = "AtTime"
	return u
}

func (u *__MsgDeletedFromServer_Selector) Limit(num int) *__MsgDeletedFromServer_Selector {
	u.limit = num
	return u
}

func (u *__MsgDeletedFromServer_Selector) Offset(num int) *__MsgDeletedFromServer_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MsgDeletedFromServer_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.msg_deleted_from_server"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MsgDeletedFromServer_Selector) GetRow(db *sqlx.DB) (*MsgDeletedFromServer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MsgDeletedFromServer{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__MsgDeletedFromServer_Selector) GetRows(db *sqlx.DB) ([]MsgDeletedFromServer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []MsgDeletedFromServer
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgDeletedFromServer_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__MsgDeletedFromServer_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgDeletedFromServer_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgDeletedFromServer_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MsgDeletedFromServer_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.msg_deleted_from_server SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__MsgDeletedFromServer_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.msg_deleted_from_server WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MsgDeletedFromServer ////////////////
func MassInsert_MsgDeletedFromServer(rows []MsgDeletedFromServer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.msg_deleted_from_server (" +
		"ToUserId, MsgKey, PeerUserId, RoomKey, AtTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MsgKey)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.AtTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_MsgDeletedFromServer(rows []MsgDeletedFromServer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.msg_deleted_from_server (" +
		"ToUserId, MsgKey, PeerUserId, RoomKey, AtTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MsgKey)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.AtTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// MsgReceivedToPeer represents a row from 'ms.msg_received_to_peer'.

// Manualy copy this to project
type __MsgReceivedToPeer struct {
	Id         int    `json:"Id"`         // Id -
	ToUserId   int    `json:"ToUserId"`   // ToUserId -
	MsgKey     string `json:"MsgKey"`     // MsgKey -
	RoomKey    string `json:"RoomKey"`    // RoomKey -
	PeerUserId int    `json:"PeerUserId"` // PeerUserId -
	AtTime     int    `json:"AtTime"`     // AtTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MsgReceivedToPeer exists in the database.
func (mrtp *MsgReceivedToPeer) Exists() bool {
	return mrtp._exists
}

// Deleted provides information if the MsgReceivedToPeer has been deleted from the database.
func (mrtp *MsgReceivedToPeer) Deleted() bool {
	return mrtp._deleted
}

// Insert inserts the MsgReceivedToPeer to the database.
func (mrtp *MsgReceivedToPeer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mrtp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.msg_received_to_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, AtTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mrtp.ToUserId, mrtp.MsgKey, mrtp.RoomKey, mrtp.PeerUserId, mrtp.AtTime)
	res, err := db.Exec(sqlstr, mrtp.ToUserId, mrtp.MsgKey, mrtp.RoomKey, mrtp.PeerUserId, mrtp.AtTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mrtp.Id = int(id)
	mrtp._exists = true

	return nil
}

// Insert inserts the MsgReceivedToPeer to the database.
func (mrtp *MsgReceivedToPeer) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.msg_received_to_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, AtTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mrtp.ToUserId, mrtp.MsgKey, mrtp.RoomKey, mrtp.PeerUserId, mrtp.AtTime)
	res, err := db.Exec(sqlstr, mrtp.ToUserId, mrtp.MsgKey, mrtp.RoomKey, mrtp.PeerUserId, mrtp.AtTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mrtp.Id = int(id)
	mrtp._exists = true

	return nil
}

// Update updates the MsgReceivedToPeer in the database.
func (mrtp *MsgReceivedToPeer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mrtp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mrtp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.msg_received_to_peer SET ` +
		`ToUserId = ?, MsgKey = ?, RoomKey = ?, PeerUserId = ?, AtTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, mrtp.ToUserId, mrtp.MsgKey, mrtp.RoomKey, mrtp.PeerUserId, mrtp.AtTime, mrtp.Id)
	_, err = db.Exec(sqlstr, mrtp.ToUserId, mrtp.MsgKey, mrtp.RoomKey, mrtp.PeerUserId, mrtp.AtTime, mrtp.Id)
	return err
}

// Save saves the MsgReceivedToPeer to the database.
func (mrtp *MsgReceivedToPeer) Save(db XODB) error {
	if mrtp.Exists() {
		return mrtp.Update(db)
	}

	return mrtp.Replace(db)
}

// Delete deletes the MsgReceivedToPeer from the database.
func (mrtp *MsgReceivedToPeer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mrtp._exists {
		return nil
	}

	// if deleted, bail
	if mrtp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.msg_received_to_peer WHERE Id = ?`

	// run query
	XOLog(sqlstr, mrtp.Id)
	_, err = db.Exec(sqlstr, mrtp.Id)
	if err != nil {
		return err
	}

	// set deleted
	mrtp._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MsgReceivedToPeer_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MsgReceivedToPeer_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MsgReceivedToPeer_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMsgReceivedToPeer_Deleter() *__MsgReceivedToPeer_Deleter {
	d := __MsgReceivedToPeer_Deleter{whereSep: " AND "}
	return &d
}

func NewMsgReceivedToPeer_Updater() *__MsgReceivedToPeer_Updater {
	u := __MsgReceivedToPeer_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMsgReceivedToPeer_Selector() *__MsgReceivedToPeer_Selector {
	u := __MsgReceivedToPeer_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MsgReceivedToPeer_Deleter) Or(ins []int) *__MsgReceivedToPeer_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MsgReceivedToPeer_Deleter) Id_In(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) Id_NotIn(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) Id_EQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_NotEQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_LT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_LE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_GT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_GE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Deleter) ToUserId_In(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) ToUserId_NotIn(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_EQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_NotEQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_LT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_LE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_GT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_GE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Deleter) PeerUserId_In(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) PeerUserId_NotIn(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_EQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_NotEQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_LT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_LE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_GT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_GE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Deleter) AtTime_In(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) AtTime_NotIn(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) AtTime_EQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) AtTime_NotEQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) AtTime_LT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) AtTime_LE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) AtTime_GT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) AtTime_GE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgReceivedToPeer_Updater) Or(ins []int) *__MsgReceivedToPeer_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MsgReceivedToPeer_Updater) Id_In(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) Id_NotIn(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) Id_EQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_NotEQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_LT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_LE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_GT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_GE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Updater) ToUserId_In(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) ToUserId_NotIn(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_EQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_NotEQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_LT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_LE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_GT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_GE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Updater) PeerUserId_In(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) PeerUserId_NotIn(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_EQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_NotEQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_LT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_LE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_GT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_GE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Updater) AtTime_In(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) AtTime_NotIn(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) AtTime_EQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) AtTime_NotEQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) AtTime_LT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) AtTime_LE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) AtTime_GT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) AtTime_GE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgReceivedToPeer_Selector) Or(ins []int) *__MsgReceivedToPeer_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Id_In(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) Id_NotIn(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) Id_EQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_NotEQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_LT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_LE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_GT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_GE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Selector) ToUserId_In(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) ToUserId_NotIn(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_EQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_NotEQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_LT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_LE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_GT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_GE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Selector) PeerUserId_In(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) PeerUserId_NotIn(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_EQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_NotEQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_LT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_LE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_GT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_GE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Selector) AtTime_In(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) AtTime_NotIn(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) AtTime_EQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) AtTime_NotEQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) AtTime_LT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) AtTime_LE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) AtTime_GT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) AtTime_GE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MsgReceivedToPeer_Deleter) MsgKey_In(ins []string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) MsgKey_NotIn(ins []string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Deleter) MsgKey_Like(val string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) MsgKey_EQ(val string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Deleter) RoomKey_In(ins []string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) RoomKey_NotIn(ins []string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Deleter) RoomKey_Like(val string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) RoomKey_EQ(val string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgReceivedToPeer_Updater) MsgKey_In(ins []string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) MsgKey_NotIn(ins []string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Updater) MsgKey_Like(val string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) MsgKey_EQ(val string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Updater) RoomKey_In(ins []string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) RoomKey_NotIn(ins []string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Updater) RoomKey_Like(val string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) RoomKey_EQ(val string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgReceivedToPeer_Selector) MsgKey_In(ins []string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) MsgKey_NotIn(ins []string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Selector) MsgKey_Like(val string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) MsgKey_EQ(val string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Selector) RoomKey_In(ins []string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) RoomKey_NotIn(ins []string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Selector) RoomKey_Like(val string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) RoomKey_EQ(val string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MsgReceivedToPeer_Updater) Id(newVal int) *__MsgReceivedToPeer_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__MsgReceivedToPeer_Updater) ToUserId(newVal int) *__MsgReceivedToPeer_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__MsgReceivedToPeer_Updater) MsgKey(newVal string) *__MsgReceivedToPeer_Updater {
	u.updates[" MsgKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__MsgReceivedToPeer_Updater) RoomKey(newVal string) *__MsgReceivedToPeer_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__MsgReceivedToPeer_Updater) PeerUserId(newVal int) *__MsgReceivedToPeer_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__MsgReceivedToPeer_Updater) AtTime(newVal int) *__MsgReceivedToPeer_Updater {
	u.updates[" AtTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MsgReceivedToPeer_Selector) OrderBy_Id_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_Id_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_Id() *__MsgReceivedToPeer_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_ToUserId_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_ToUserId_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_ToUserId() *__MsgReceivedToPeer_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_MsgKey_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY MsgKey DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_MsgKey_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY MsgKey ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_MsgKey() *__MsgReceivedToPeer_Selector {
	u.selectCol = "MsgKey"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_RoomKey_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_RoomKey_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_RoomKey() *__MsgReceivedToPeer_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_PeerUserId_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_PeerUserId_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_PeerUserId() *__MsgReceivedToPeer_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_AtTime_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY AtTime DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_AtTime_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY AtTime ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_AtTime() *__MsgReceivedToPeer_Selector {
	u.selectCol = "AtTime"
	return u
}

func (u *__MsgReceivedToPeer_Selector) Limit(num int) *__MsgReceivedToPeer_Selector {
	u.limit = num
	return u
}

func (u *__MsgReceivedToPeer_Selector) Offset(num int) *__MsgReceivedToPeer_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MsgReceivedToPeer_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.msg_received_to_peer"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MsgReceivedToPeer_Selector) GetRow(db *sqlx.DB) (*MsgReceivedToPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MsgReceivedToPeer{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__MsgReceivedToPeer_Selector) GetRows(db *sqlx.DB) ([]MsgReceivedToPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []MsgReceivedToPeer
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgReceivedToPeer_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__MsgReceivedToPeer_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgReceivedToPeer_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgReceivedToPeer_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MsgReceivedToPeer_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.msg_received_to_peer SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__MsgReceivedToPeer_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.msg_received_to_peer WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MsgReceivedToPeer ////////////////
func MassInsert_MsgReceivedToPeer(rows []MsgReceivedToPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.msg_received_to_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, AtTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MsgKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.AtTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_MsgReceivedToPeer(rows []MsgReceivedToPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.msg_received_to_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, AtTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MsgKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.AtTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// MsgSeenByPeer represents a row from 'ms.msg_seen_by_peer'.

// Manualy copy this to project
type __MsgSeenByPeer struct {
	Id         int    `json:"Id"`         // Id -
	ToUserId   int    `json:"ToUserId"`   // ToUserId -
	MsgKey     string `json:"MsgKey"`     // MsgKey -
	RoomKey    string `json:"RoomKey"`    // RoomKey -
	PeerUserId int    `json:"PeerUserId"` // PeerUserId -
	AtTime     int    `json:"AtTime"`     // AtTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MsgSeenByPeer exists in the database.
func (msbp *MsgSeenByPeer) Exists() bool {
	return msbp._exists
}

// Deleted provides information if the MsgSeenByPeer has been deleted from the database.
func (msbp *MsgSeenByPeer) Deleted() bool {
	return msbp._deleted
}

// Insert inserts the MsgSeenByPeer to the database.
func (msbp *MsgSeenByPeer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if msbp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.msg_seen_by_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, AtTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime)
	res, err := db.Exec(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	msbp.Id = int(id)
	msbp._exists = true

	return nil
}

// Insert inserts the MsgSeenByPeer to the database.
func (msbp *MsgSeenByPeer) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.msg_seen_by_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, AtTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime)
	res, err := db.Exec(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	msbp.Id = int(id)
	msbp._exists = true

	return nil
}

// Update updates the MsgSeenByPeer in the database.
func (msbp *MsgSeenByPeer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !msbp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if msbp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.msg_seen_by_peer SET ` +
		`ToUserId = ?, MsgKey = ?, RoomKey = ?, PeerUserId = ?, AtTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime, msbp.Id)
	_, err = db.Exec(sqlstr, msbp.ToUserId, msbp.MsgKey, msbp.RoomKey, msbp.PeerUserId, msbp.AtTime, msbp.Id)
	return err
}

// Save saves the MsgSeenByPeer to the database.
func (msbp *MsgSeenByPeer) Save(db XODB) error {
	if msbp.Exists() {
		return msbp.Update(db)
	}

	return msbp.Replace(db)
}

// Delete deletes the MsgSeenByPeer from the database.
func (msbp *MsgSeenByPeer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !msbp._exists {
		return nil
	}

	// if deleted, bail
	if msbp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.msg_seen_by_peer WHERE Id = ?`

	// run query
	XOLog(sqlstr, msbp.Id)
	_, err = db.Exec(sqlstr, msbp.Id)
	if err != nil {
		return err
	}

	// set deleted
	msbp._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MsgSeenByPeer_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MsgSeenByPeer_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MsgSeenByPeer_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMsgSeenByPeer_Deleter() *__MsgSeenByPeer_Deleter {
	d := __MsgSeenByPeer_Deleter{whereSep: " AND "}
	return &d
}

func NewMsgSeenByPeer_Updater() *__MsgSeenByPeer_Updater {
	u := __MsgSeenByPeer_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMsgSeenByPeer_Selector() *__MsgSeenByPeer_Selector {
	u := __MsgSeenByPeer_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MsgSeenByPeer_Deleter) Or(ins []int) *__MsgSeenByPeer_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MsgSeenByPeer_Deleter) Id_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) Id_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) Id_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) ToUserId_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) ToUserId_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) PeerUserId_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) PeerUserId_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) AtTime_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) AtTime_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) AtTime_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) AtTime_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgSeenByPeer_Updater) Or(ins []int) *__MsgSeenByPeer_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MsgSeenByPeer_Updater) Id_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) Id_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) Id_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) ToUserId_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) ToUserId_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) ToUserId_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) PeerUserId_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) PeerUserId_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) AtTime_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) AtTime_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) AtTime_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) AtTime_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgSeenByPeer_Selector) Or(ins []int) *__MsgSeenByPeer_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MsgSeenByPeer_Selector) Id_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) Id_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) Id_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) ToUserId_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) ToUserId_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) ToUserId_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) PeerUserId_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) PeerUserId_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) AtTime_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) AtTime_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) AtTime_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) AtTime_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MsgSeenByPeer_Deleter) MsgKey_In(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) MsgKey_NotIn(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Deleter) MsgKey_Like(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) MsgKey_EQ(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) RoomKey_In(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) RoomKey_NotIn(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Deleter) RoomKey_Like(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) RoomKey_EQ(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgSeenByPeer_Updater) MsgKey_In(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) MsgKey_NotIn(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Updater) MsgKey_Like(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) MsgKey_EQ(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) RoomKey_In(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) RoomKey_NotIn(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Updater) RoomKey_Like(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) RoomKey_EQ(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgSeenByPeer_Selector) MsgKey_In(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) MsgKey_NotIn(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Selector) MsgKey_Like(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) MsgKey_EQ(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) RoomKey_In(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) RoomKey_NotIn(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Selector) RoomKey_Like(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) RoomKey_EQ(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MsgSeenByPeer_Updater) Id(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__MsgSeenByPeer_Updater) ToUserId(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__MsgSeenByPeer_Updater) MsgKey(newVal string) *__MsgSeenByPeer_Updater {
	u.updates[" MsgKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__MsgSeenByPeer_Updater) RoomKey(newVal string) *__MsgSeenByPeer_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__MsgSeenByPeer_Updater) PeerUserId(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__MsgSeenByPeer_Updater) AtTime(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" AtTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MsgSeenByPeer_Selector) OrderBy_Id_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_Id_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_Id() *__MsgSeenByPeer_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_ToUserId_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_ToUserId_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_ToUserId() *__MsgSeenByPeer_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_MsgKey_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY MsgKey DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_MsgKey_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY MsgKey ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_MsgKey() *__MsgSeenByPeer_Selector {
	u.selectCol = "MsgKey"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_RoomKey_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_RoomKey_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_RoomKey() *__MsgSeenByPeer_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_PeerUserId_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_PeerUserId_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_PeerUserId() *__MsgSeenByPeer_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_AtTime_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY AtTime DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_AtTime_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY AtTime ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_AtTime() *__MsgSeenByPeer_Selector {
	u.selectCol = "AtTime"
	return u
}

func (u *__MsgSeenByPeer_Selector) Limit(num int) *__MsgSeenByPeer_Selector {
	u.limit = num
	return u
}

func (u *__MsgSeenByPeer_Selector) Offset(num int) *__MsgSeenByPeer_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MsgSeenByPeer_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.msg_seen_by_peer"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MsgSeenByPeer_Selector) GetRow(db *sqlx.DB) (*MsgSeenByPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MsgSeenByPeer{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__MsgSeenByPeer_Selector) GetRows(db *sqlx.DB) ([]MsgSeenByPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []MsgSeenByPeer
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgSeenByPeer_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__MsgSeenByPeer_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgSeenByPeer_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgSeenByPeer_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MsgSeenByPeer_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.msg_seen_by_peer SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__MsgSeenByPeer_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.msg_seen_by_peer WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MsgSeenByPeer ////////////////
func MassInsert_MsgSeenByPeer(rows []MsgSeenByPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.msg_seen_by_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, AtTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MsgKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.AtTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_MsgSeenByPeer(rows []MsgSeenByPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.msg_seen_by_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, AtTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MsgKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.AtTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// Notification represents a row from 'ms.notification'.

// Manualy copy this to project
type __Notification struct {
	Id           int `json:"Id"`           // Id -
	ForUserId    int `json:"ForUserId"`    // ForUserId -
	ActorUserId  int `json:"ActorUserId"`  // ActorUserId -
	ActionTypeId int `json:"ActionTypeId"` // ActionTypeId -
	ObjectTypeId int `json:"ObjectTypeId"` // ObjectTypeId -
	TargetId     int `json:"TargetId"`     // TargetId -
	ObjectId     int `json:"ObjectId"`     // ObjectId -
	SeenStatus   int `json:"SeenStatus"`   // SeenStatus -
	CreatedTime  int `json:"CreatedTime"`  // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Notification exists in the database.
func (n *Notification) Exists() bool {
	return n._exists
}

// Deleted provides information if the Notification has been deleted from the database.
func (n *Notification) Deleted() bool {
	return n._deleted
}

// Insert inserts the Notification to the database.
func (n *Notification) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.notification (` +
		`ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TargetId, ObjectId, SeenStatus, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.TargetId, n.ObjectId, n.SeenStatus, n.CreatedTime)
	res, err := db.Exec(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.TargetId, n.ObjectId, n.SeenStatus, n.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	n.Id = int(id)
	n._exists = true

	return nil
}

// Insert inserts the Notification to the database.
func (n *Notification) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.notification (` +
		`ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TargetId, ObjectId, SeenStatus, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.TargetId, n.ObjectId, n.SeenStatus, n.CreatedTime)
	res, err := db.Exec(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.TargetId, n.ObjectId, n.SeenStatus, n.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	n.Id = int(id)
	n._exists = true

	return nil
}

// Update updates the Notification in the database.
func (n *Notification) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if n._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.notification SET ` +
		`ForUserId = ?, ActorUserId = ?, ActionTypeId = ?, ObjectTypeId = ?, TargetId = ?, ObjectId = ?, SeenStatus = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.TargetId, n.ObjectId, n.SeenStatus, n.CreatedTime, n.Id)
	_, err = db.Exec(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.TargetId, n.ObjectId, n.SeenStatus, n.CreatedTime, n.Id)
	return err
}

// Save saves the Notification to the database.
func (n *Notification) Save(db XODB) error {
	if n.Exists() {
		return n.Update(db)
	}

	return n.Replace(db)
}

// Delete deletes the Notification from the database.
func (n *Notification) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return nil
	}

	// if deleted, bail
	if n._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.notification WHERE Id = ?`

	// run query
	XOLog(sqlstr, n.Id)
	_, err = db.Exec(sqlstr, n.Id)
	if err != nil {
		return err
	}

	// set deleted
	n._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Notification_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Notification_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Notification_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewNotification_Deleter() *__Notification_Deleter {
	d := __Notification_Deleter{whereSep: " AND "}
	return &d
}

func NewNotification_Updater() *__Notification_Updater {
	u := __Notification_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewNotification_Selector() *__Notification_Selector {
	u := __Notification_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Notification_Deleter) Or(ins []int) *__Notification_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Notification_Deleter) Id_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) Id_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) Id_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ForUserId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ForUserId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ForUserId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ActorUserId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ActorUserId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ActorUserId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ActionTypeId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ActionTypeId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ActionTypeId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ObjectTypeId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ObjectTypeId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ObjectTypeId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) TargetId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) TargetId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) TargetId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TargetId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TargetId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TargetId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TargetId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TargetId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ObjectId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ObjectId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ObjectId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) SeenStatus_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) SeenStatus_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) SeenStatus_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) CreatedTime_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) CreatedTime_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) CreatedTime_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Notification_Updater) Or(ins []int) *__Notification_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Notification_Updater) Id_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) Id_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) Id_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ForUserId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ForUserId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ForUserId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ActorUserId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ActorUserId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ActorUserId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ActionTypeId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ActionTypeId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ActionTypeId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ObjectTypeId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ObjectTypeId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ObjectTypeId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) TargetId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) TargetId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) TargetId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TargetId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TargetId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TargetId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TargetId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TargetId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ObjectId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ObjectId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ObjectId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) SeenStatus_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) SeenStatus_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) SeenStatus_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) CreatedTime_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) CreatedTime_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) CreatedTime_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Notification_Selector) Or(ins []int) *__Notification_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Notification_Selector) Id_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) Id_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) Id_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ForUserId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ForUserId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ForUserId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ActorUserId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ActorUserId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ActorUserId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ActionTypeId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ActionTypeId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ActionTypeId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ObjectTypeId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ObjectTypeId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ObjectTypeId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) TargetId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) TargetId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) TargetId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TargetId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TargetId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TargetId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TargetId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TargetId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ObjectId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ObjectId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ObjectId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) SeenStatus_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) SeenStatus_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) SeenStatus_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) CreatedTime_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) CreatedTime_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) CreatedTime_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Notification_Updater) Id(newVal int) *__Notification_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__Notification_Updater) ForUserId(newVal int) *__Notification_Updater {
	u.updates[" ForUserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Notification_Updater) ActorUserId(newVal int) *__Notification_Updater {
	u.updates[" ActorUserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Notification_Updater) ActionTypeId(newVal int) *__Notification_Updater {
	u.updates[" ActionTypeId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Notification_Updater) ObjectTypeId(newVal int) *__Notification_Updater {
	u.updates[" ObjectTypeId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Notification_Updater) TargetId(newVal int) *__Notification_Updater {
	u.updates[" TargetId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Notification_Updater) ObjectId(newVal int) *__Notification_Updater {
	u.updates[" ObjectId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Notification_Updater) SeenStatus(newVal int) *__Notification_Updater {
	u.updates[" SeenStatus = ? "] = newVal
	return u
}

//string

//ints

func (u *__Notification_Updater) CreatedTime(newVal int) *__Notification_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Notification_Selector) OrderBy_Id_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_Id_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Notification_Selector) Select_Id() *__Notification_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Notification_Selector) OrderBy_ForUserId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ForUserId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ForUserId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ForUserId ASC "
	return u
}

func (u *__Notification_Selector) Select_ForUserId() *__Notification_Selector {
	u.selectCol = "ForUserId"
	return u
}

func (u *__Notification_Selector) OrderBy_ActorUserId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActorUserId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ActorUserId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActorUserId ASC "
	return u
}

func (u *__Notification_Selector) Select_ActorUserId() *__Notification_Selector {
	u.selectCol = "ActorUserId"
	return u
}

func (u *__Notification_Selector) OrderBy_ActionTypeId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActionTypeId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ActionTypeId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActionTypeId ASC "
	return u
}

func (u *__Notification_Selector) Select_ActionTypeId() *__Notification_Selector {
	u.selectCol = "ActionTypeId"
	return u
}

func (u *__Notification_Selector) OrderBy_ObjectTypeId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ObjectTypeId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ObjectTypeId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ObjectTypeId ASC "
	return u
}

func (u *__Notification_Selector) Select_ObjectTypeId() *__Notification_Selector {
	u.selectCol = "ObjectTypeId"
	return u
}

func (u *__Notification_Selector) OrderBy_TargetId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY TargetId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_TargetId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY TargetId ASC "
	return u
}

func (u *__Notification_Selector) Select_TargetId() *__Notification_Selector {
	u.selectCol = "TargetId"
	return u
}

func (u *__Notification_Selector) OrderBy_ObjectId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ObjectId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ObjectId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ObjectId ASC "
	return u
}

func (u *__Notification_Selector) Select_ObjectId() *__Notification_Selector {
	u.selectCol = "ObjectId"
	return u
}

func (u *__Notification_Selector) OrderBy_SeenStatus_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY SeenStatus DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_SeenStatus_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY SeenStatus ASC "
	return u
}

func (u *__Notification_Selector) Select_SeenStatus() *__Notification_Selector {
	u.selectCol = "SeenStatus"
	return u
}

func (u *__Notification_Selector) OrderBy_CreatedTime_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_CreatedTime_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Notification_Selector) Select_CreatedTime() *__Notification_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Notification_Selector) Limit(num int) *__Notification_Selector {
	u.limit = num
	return u
}

func (u *__Notification_Selector) Offset(num int) *__Notification_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Notification_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.notification"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Notification_Selector) GetRow(db *sqlx.DB) (*Notification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Notification{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__Notification_Selector) GetRows(db *sqlx.DB) ([]Notification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Notification
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Notification_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Notification_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Notification_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Notification_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Notification_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.notification SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Notification_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.notification WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Notification ////////////////
func MassInsert_Notification(rows []Notification, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.notification (" +
		"ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TargetId, ObjectId, SeenStatus, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.ActionTypeId)
		vals = append(vals, row.ObjectTypeId)
		vals = append(vals, row.TargetId)
		vals = append(vals, row.ObjectId)
		vals = append(vals, row.SeenStatus)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Notification(rows []Notification, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.notification (" +
		"ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TargetId, ObjectId, SeenStatus, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.ActionTypeId)
		vals = append(vals, row.ObjectTypeId)
		vals = append(vals, row.TargetId)
		vals = append(vals, row.ObjectId)
		vals = append(vals, row.SeenStatus)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

// PhoneContact represents a row from 'ms.phone_contacts'.

// Manualy copy this to project
type __PhoneContact struct {
	Id                    int    `json:"Id"`                    // Id -
	PhoneDisplayName      string `json:"PhoneDisplayName"`      // PhoneDisplayName -
	PhoneFamilyName       string `json:"PhoneFamilyName"`       // PhoneFamilyName -
	PhoneNumber           string `json:"PhoneNumber"`           // PhoneNumber -
	PhoneNormalizedNumber string `json:"PhoneNormalizedNumber"` // PhoneNormalizedNumber -
	PhoneContactRowId     int    `json:"PhoneContactRowId"`     // PhoneContactRowId -
	UserId                int    `json:"UserId"`                // UserId -
	DeviceUuidId          int    `json:"DeviceUuidId"`          // DeviceUuidId -
	CreatedTime           int    `json:"CreatedTime"`           // CreatedTime -
	UpdatedTime           int    `json:"UpdatedTime"`           // UpdatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PhoneContact exists in the database.
func (pc *PhoneContact) Exists() bool {
	return pc._exists
}

// Deleted provides information if the PhoneContact has been deleted from the database.
func (pc *PhoneContact) Deleted() bool {
	return pc._deleted
}

// Insert inserts the PhoneContact to the database.
func (pc *PhoneContact) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.phone_contacts (` +
		`PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime)
	res, err := db.Exec(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pc.Id = int(id)
	pc._exists = true

	return nil
}

// Insert inserts the PhoneContact to the database.
func (pc *PhoneContact) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.phone_contacts (` +
		`PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime)
	res, err := db.Exec(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pc.Id = int(id)
	pc._exists = true

	return nil
}

// Update updates the PhoneContact in the database.
func (pc *PhoneContact) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.phone_contacts SET ` +
		`PhoneDisplayName = ?, PhoneFamilyName = ?, PhoneNumber = ?, PhoneNormalizedNumber = ?, PhoneContactRowId = ?, UserId = ?, DeviceUuidId = ?, CreatedTime = ?, UpdatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime, pc.Id)
	_, err = db.Exec(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime, pc.Id)
	return err
}

// Save saves the PhoneContact to the database.
func (pc *PhoneContact) Save(db XODB) error {
	if pc.Exists() {
		return pc.Update(db)
	}

	return pc.Replace(db)
}

// Delete deletes the PhoneContact from the database.
func (pc *PhoneContact) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return nil
	}

	// if deleted, bail
	if pc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.phone_contacts WHERE Id = ?`

	// run query
	XOLog(sqlstr, pc.Id)
	_, err = db.Exec(sqlstr, pc.Id)
	if err != nil {
		return err
	}

	// set deleted
	pc._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __PhoneContact_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __PhoneContact_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __PhoneContact_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPhoneContact_Deleter() *__PhoneContact_Deleter {
	d := __PhoneContact_Deleter{whereSep: " AND "}
	return &d
}

func NewPhoneContact_Updater() *__PhoneContact_Updater {
	u := __PhoneContact_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPhoneContact_Selector() *__PhoneContact_Selector {
	u := __PhoneContact_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__PhoneContact_Deleter) Or(ins []int) *__PhoneContact_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PhoneContact_Deleter) Id_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) Id_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) Id_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneContactRowId_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneContactRowId_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) UserId_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) UserId_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) UserId_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) DeviceUuidId_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) DeviceUuidId_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) DeviceUuidId_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) CreatedTime_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) CreatedTime_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) CreatedTime_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) UpdatedTime_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) UpdatedTime_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) UpdatedTime_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PhoneContact_Updater) Or(ins []int) *__PhoneContact_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PhoneContact_Updater) Id_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) Id_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) Id_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneContactRowId_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneContactRowId_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneContactRowId_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) UserId_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) UserId_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) UserId_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) DeviceUuidId_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) DeviceUuidId_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) DeviceUuidId_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) CreatedTime_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) CreatedTime_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) CreatedTime_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) UpdatedTime_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) UpdatedTime_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) UpdatedTime_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PhoneContact_Selector) Or(ins []int) *__PhoneContact_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PhoneContact_Selector) Id_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) Id_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) Id_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneContactRowId_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneContactRowId_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneContactRowId_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) UserId_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) UserId_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) UserId_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) DeviceUuidId_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) DeviceUuidId_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) DeviceUuidId_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) CreatedTime_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) CreatedTime_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) CreatedTime_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) UpdatedTime_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) UpdatedTime_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) UpdatedTime_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__PhoneContact_Deleter) PhoneDisplayName_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneDisplayName_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneDisplayName_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneDisplayName_EQ(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneFamilyName_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneFamilyName_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneFamilyName_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneFamilyName_EQ(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneNumber_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneNumber_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneNumber_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneNumber_EQ(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneNormalizedNumber_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneNormalizedNumber_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneNormalizedNumber_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneNormalizedNumber_EQ(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PhoneContact_Updater) PhoneDisplayName_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneDisplayName_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneDisplayName_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneDisplayName_EQ(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneFamilyName_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneFamilyName_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneFamilyName_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneFamilyName_EQ(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneNumber_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneNumber_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneNumber_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneNumber_EQ(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneNormalizedNumber_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneNormalizedNumber_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneNormalizedNumber_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneNormalizedNumber_EQ(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PhoneContact_Selector) PhoneDisplayName_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneDisplayName_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneDisplayName_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneDisplayName_EQ(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneFamilyName_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneFamilyName_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneFamilyName_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneFamilyName_EQ(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneNumber_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneNumber_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneNumber_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneNumber_EQ(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneNormalizedNumber_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneNormalizedNumber_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneNormalizedNumber_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneNormalizedNumber_EQ(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PhoneContact_Updater) Id(newVal int) *__PhoneContact_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__PhoneContact_Updater) PhoneDisplayName(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneDisplayName = ? "] = newVal
	return u
}

//ints

//string
func (u *__PhoneContact_Updater) PhoneFamilyName(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneFamilyName = ? "] = newVal
	return u
}

//ints

//string
func (u *__PhoneContact_Updater) PhoneNumber(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneNumber = ? "] = newVal
	return u
}

//ints

//string
func (u *__PhoneContact_Updater) PhoneNormalizedNumber(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneNormalizedNumber = ? "] = newVal
	return u
}

//ints

func (u *__PhoneContact_Updater) PhoneContactRowId(newVal int) *__PhoneContact_Updater {
	u.updates[" PhoneContactRowId = ? "] = newVal
	return u
}

//string

//ints

func (u *__PhoneContact_Updater) UserId(newVal int) *__PhoneContact_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__PhoneContact_Updater) DeviceUuidId(newVal int) *__PhoneContact_Updater {
	u.updates[" DeviceUuidId = ? "] = newVal
	return u
}

//string

//ints

func (u *__PhoneContact_Updater) CreatedTime(newVal int) *__PhoneContact_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

//ints

func (u *__PhoneContact_Updater) UpdatedTime(newVal int) *__PhoneContact_Updater {
	u.updates[" UpdatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PhoneContact_Selector) OrderBy_Id_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_Id_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_Id() *__PhoneContact_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneDisplayName_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneDisplayName DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneDisplayName_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneDisplayName ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneDisplayName() *__PhoneContact_Selector {
	u.selectCol = "PhoneDisplayName"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneFamilyName_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneFamilyName DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneFamilyName_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneFamilyName ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneFamilyName() *__PhoneContact_Selector {
	u.selectCol = "PhoneFamilyName"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNumber_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNumber DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNumber_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNumber ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneNumber() *__PhoneContact_Selector {
	u.selectCol = "PhoneNumber"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNormalizedNumber_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNormalizedNumber DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNormalizedNumber_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNormalizedNumber ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneNormalizedNumber() *__PhoneContact_Selector {
	u.selectCol = "PhoneNormalizedNumber"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneContactRowId_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneContactRowId DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneContactRowId_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneContactRowId ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneContactRowId() *__PhoneContact_Selector {
	u.selectCol = "PhoneContactRowId"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_UserId_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_UserId_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_UserId() *__PhoneContact_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_DeviceUuidId_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY DeviceUuidId DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_DeviceUuidId_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY DeviceUuidId ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_DeviceUuidId() *__PhoneContact_Selector {
	u.selectCol = "DeviceUuidId"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_CreatedTime_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_CreatedTime_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_CreatedTime() *__PhoneContact_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_UpdatedTime_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY UpdatedTime DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_UpdatedTime_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY UpdatedTime ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_UpdatedTime() *__PhoneContact_Selector {
	u.selectCol = "UpdatedTime"
	return u
}

func (u *__PhoneContact_Selector) Limit(num int) *__PhoneContact_Selector {
	u.limit = num
	return u
}

func (u *__PhoneContact_Selector) Offset(num int) *__PhoneContact_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PhoneContact_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.phone_contacts"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PhoneContact_Selector) GetRow(db *sqlx.DB) (*PhoneContact, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &PhoneContact{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__PhoneContact_Selector) GetRows(db *sqlx.DB) ([]PhoneContact, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []PhoneContact
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__PhoneContact_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__PhoneContact_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__PhoneContact_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__PhoneContact_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PhoneContact_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.phone_contacts SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__PhoneContact_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.phone_contacts WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PhoneContact ////////////////
func MassInsert_PhoneContact(rows []PhoneContact, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.phone_contacts (" +
		"PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PhoneDisplayName)
		vals = append(vals, row.PhoneFamilyName)
		vals = append(vals, row.PhoneNumber)
		vals = append(vals, row.PhoneNormalizedNumber)
		vals = append(vals, row.PhoneContactRowId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.DeviceUuidId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_PhoneContact(rows []PhoneContact, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.phone_contacts (" +
		"PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PhoneDisplayName)
		vals = append(vals, row.PhoneFamilyName)
		vals = append(vals, row.PhoneNumber)
		vals = append(vals, row.PhoneNormalizedNumber)
		vals = append(vals, row.PhoneContactRowId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.DeviceUuidId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

// Post represents a row from 'ms.post'.

// Manualy copy this to project
type __Post struct {
	Id            int    `json:"Id"`            // Id -
	UserId        int    `json:"UserId"`        // UserId -
	TypeId        int    `json:"TypeId"`        // TypeId -
	Text          string `json:"Text"`          // Text -
	FormatedText  string `json:"FormatedText"`  // FormatedText -
	MediaUrl      string `json:"MediaUrl"`      // MediaUrl -
	MediaServerId int    `json:"MediaServerId"` // MediaServerId -
	Width         int    `json:"Width"`         // Width -
	Height        int    `json:"Height"`        // Height -
	SharedTo      int    `json:"SharedTo"`      // SharedTo -
	HasTag        int    `json:"HasTag"`        // HasTag -
	LikesCount    int    `json:"LikesCount"`    // LikesCount -
	CommentsCount int    `json:"CommentsCount"` // CommentsCount -
	CreatedTime   int    `json:"CreatedTime"`   // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Post exists in the database.
func (p *Post) Exists() bool {
	return p._exists
}

// Deleted provides information if the Post has been deleted from the database.
func (p *Post) Deleted() bool {
	return p._deleted
}

// Insert inserts the Post to the database.
func (p *Post) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.post (` +
		`UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime)
	res, err := db.Exec(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.Id = int(id)
	p._exists = true

	return nil
}

// Insert inserts the Post to the database.
func (p *Post) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.post (` +
		`UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime)
	res, err := db.Exec(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.Id = int(id)
	p._exists = true

	return nil
}

// Update updates the Post in the database.
func (p *Post) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.post SET ` +
		`UserId = ?, TypeId = ?, Text = ?, FormatedText = ?, MediaUrl = ?, MediaServerId = ?, Width = ?, Height = ?, SharedTo = ?, HasTag = ?, LikesCount = ?, CommentsCount = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime, p.Id)
	_, err = db.Exec(sqlstr, p.UserId, p.TypeId, p.Text, p.FormatedText, p.MediaUrl, p.MediaServerId, p.Width, p.Height, p.SharedTo, p.HasTag, p.LikesCount, p.CommentsCount, p.CreatedTime, p.Id)
	return err
}

// Save saves the Post to the database.
func (p *Post) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Replace(db)
}

// Delete deletes the Post from the database.
func (p *Post) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.post WHERE Id = ?`

	// run query
	XOLog(sqlstr, p.Id)
	_, err = db.Exec(sqlstr, p.Id)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Post_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Post_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Post_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPost_Deleter() *__Post_Deleter {
	d := __Post_Deleter{whereSep: " AND "}
	return &d
}

func NewPost_Updater() *__Post_Updater {
	u := __Post_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPost_Selector() *__Post_Selector {
	u := __Post_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Post_Deleter) Or(ins []int) *__Post_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Deleter) Id_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Id_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Id_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) UserId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) UserId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) UserId_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TypeId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TypeId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TypeId_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) MediaServerId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) MediaServerId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) MediaServerId_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaServerId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) Width_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Width_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Width_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Width_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) Height_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Height_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Height_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Height_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) SharedTo_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) SharedTo_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) SharedTo_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) HasTag_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) HasTag_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) HasTag_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) LikesCount_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) LikesCount_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) LikesCount_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) CommentsCount_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) CommentsCount_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) CommentsCount_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) CreatedTime_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) CreatedTime_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) CreatedTime_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Post_Updater) Or(ins []int) *__Post_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Updater) Id_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Id_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Id_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) UserId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) UserId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) UserId_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TypeId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TypeId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TypeId_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) MediaServerId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) MediaServerId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) MediaServerId_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaServerId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) Width_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Width_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Width_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Width_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) Height_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Height_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Height_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Height_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) SharedTo_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) SharedTo_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) SharedTo_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) HasTag_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) HasTag_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) HasTag_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) LikesCount_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) LikesCount_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) LikesCount_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) CommentsCount_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) CommentsCount_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) CommentsCount_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) CreatedTime_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) CreatedTime_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) CreatedTime_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Post_Selector) Or(ins []int) *__Post_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Selector) Id_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Id_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Id_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) UserId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) UserId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) UserId_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TypeId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TypeId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TypeId_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) MediaServerId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) MediaServerId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) MediaServerId_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaServerId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) Width_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Width_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Width_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Width_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) Height_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Height_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Height_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Height_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) SharedTo_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) SharedTo_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) SharedTo_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) HasTag_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) HasTag_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) HasTag_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) LikesCount_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) LikesCount_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) LikesCount_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) CommentsCount_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) CommentsCount_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) CommentsCount_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) CreatedTime_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) CreatedTime_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) CreatedTime_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Post_Deleter) Text_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Text_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) Text_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Text_EQ(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) FormatedText_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) FormatedText_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) FormatedText_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) FormatedText_EQ(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) MediaUrl_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) MediaUrl_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) MediaUrl_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) MediaUrl_EQ(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Post_Updater) Text_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Text_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) Text_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Text_EQ(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) FormatedText_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) FormatedText_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) FormatedText_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) FormatedText_EQ(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) MediaUrl_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) MediaUrl_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) MediaUrl_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) MediaUrl_EQ(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Post_Selector) Text_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Text_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) Text_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Text_EQ(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) FormatedText_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) FormatedText_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) FormatedText_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) FormatedText_EQ(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) MediaUrl_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) MediaUrl_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) MediaUrl_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) MediaUrl_EQ(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Post_Updater) Id(newVal int) *__Post_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__Post_Updater) UserId(newVal int) *__Post_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Post_Updater) TypeId(newVal int) *__Post_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__Post_Updater) Text(newVal string) *__Post_Updater {
	u.updates[" Text = ? "] = newVal
	return u
}

//ints

//string
func (u *__Post_Updater) FormatedText(newVal string) *__Post_Updater {
	u.updates[" FormatedText = ? "] = newVal
	return u
}

//ints

//string
func (u *__Post_Updater) MediaUrl(newVal string) *__Post_Updater {
	u.updates[" MediaUrl = ? "] = newVal
	return u
}

//ints

func (u *__Post_Updater) MediaServerId(newVal int) *__Post_Updater {
	u.updates[" MediaServerId = ? "] = newVal
	return u
}

//string

//ints

func (u *__Post_Updater) Width(newVal int) *__Post_Updater {
	u.updates[" Width = ? "] = newVal
	return u
}

//string

//ints

func (u *__Post_Updater) Height(newVal int) *__Post_Updater {
	u.updates[" Height = ? "] = newVal
	return u
}

//string

//ints

func (u *__Post_Updater) SharedTo(newVal int) *__Post_Updater {
	u.updates[" SharedTo = ? "] = newVal
	return u
}

//string

//ints

func (u *__Post_Updater) HasTag(newVal int) *__Post_Updater {
	u.updates[" HasTag = ? "] = newVal
	return u
}

//string

//ints

func (u *__Post_Updater) LikesCount(newVal int) *__Post_Updater {
	u.updates[" LikesCount = ? "] = newVal
	return u
}

//string

//ints

func (u *__Post_Updater) CommentsCount(newVal int) *__Post_Updater {
	u.updates[" CommentsCount = ? "] = newVal
	return u
}

//string

//ints

func (u *__Post_Updater) CreatedTime(newVal int) *__Post_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Post_Selector) OrderBy_Id_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Id_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Post_Selector) Select_Id() *__Post_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Post_Selector) OrderBy_UserId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_UserId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Post_Selector) Select_UserId() *__Post_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Post_Selector) OrderBy_TypeId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TypeId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__Post_Selector) Select_TypeId() *__Post_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__Post_Selector) OrderBy_Text_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Text_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__Post_Selector) Select_Text() *__Post_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__Post_Selector) OrderBy_FormatedText_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY FormatedText DESC "
	return u
}

func (u *__Post_Selector) OrderBy_FormatedText_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY FormatedText ASC "
	return u
}

func (u *__Post_Selector) Select_FormatedText() *__Post_Selector {
	u.selectCol = "FormatedText"
	return u
}

func (u *__Post_Selector) OrderBy_MediaUrl_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaUrl DESC "
	return u
}

func (u *__Post_Selector) OrderBy_MediaUrl_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaUrl ASC "
	return u
}

func (u *__Post_Selector) Select_MediaUrl() *__Post_Selector {
	u.selectCol = "MediaUrl"
	return u
}

func (u *__Post_Selector) OrderBy_MediaServerId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaServerId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_MediaServerId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaServerId ASC "
	return u
}

func (u *__Post_Selector) Select_MediaServerId() *__Post_Selector {
	u.selectCol = "MediaServerId"
	return u
}

func (u *__Post_Selector) OrderBy_Width_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Width DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Width_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Width ASC "
	return u
}

func (u *__Post_Selector) Select_Width() *__Post_Selector {
	u.selectCol = "Width"
	return u
}

func (u *__Post_Selector) OrderBy_Height_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Height DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Height_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Height ASC "
	return u
}

func (u *__Post_Selector) Select_Height() *__Post_Selector {
	u.selectCol = "Height"
	return u
}

func (u *__Post_Selector) OrderBy_SharedTo_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY SharedTo DESC "
	return u
}

func (u *__Post_Selector) OrderBy_SharedTo_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY SharedTo ASC "
	return u
}

func (u *__Post_Selector) Select_SharedTo() *__Post_Selector {
	u.selectCol = "SharedTo"
	return u
}

func (u *__Post_Selector) OrderBy_HasTag_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY HasTag DESC "
	return u
}

func (u *__Post_Selector) OrderBy_HasTag_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY HasTag ASC "
	return u
}

func (u *__Post_Selector) Select_HasTag() *__Post_Selector {
	u.selectCol = "HasTag"
	return u
}

func (u *__Post_Selector) OrderBy_LikesCount_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY LikesCount DESC "
	return u
}

func (u *__Post_Selector) OrderBy_LikesCount_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY LikesCount ASC "
	return u
}

func (u *__Post_Selector) Select_LikesCount() *__Post_Selector {
	u.selectCol = "LikesCount"
	return u
}

func (u *__Post_Selector) OrderBy_CommentsCount_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY CommentsCount DESC "
	return u
}

func (u *__Post_Selector) OrderBy_CommentsCount_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY CommentsCount ASC "
	return u
}

func (u *__Post_Selector) Select_CommentsCount() *__Post_Selector {
	u.selectCol = "CommentsCount"
	return u
}

func (u *__Post_Selector) OrderBy_CreatedTime_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Post_Selector) OrderBy_CreatedTime_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Post_Selector) Select_CreatedTime() *__Post_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Post_Selector) Limit(num int) *__Post_Selector {
	u.limit = num
	return u
}

func (u *__Post_Selector) Offset(num int) *__Post_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Post_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.post"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Post_Selector) GetRow(db *sqlx.DB) (*Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Post{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__Post_Selector) GetRows(db *sqlx.DB) ([]Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Post
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Post_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Post_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Post_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Post_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Post_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.post SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Post_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.post WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Post ////////////////
func MassInsert_Post(rows []Post, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.post (" +
		"UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.Text)
		vals = append(vals, row.FormatedText)
		vals = append(vals, row.MediaUrl)
		vals = append(vals, row.MediaServerId)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.SharedTo)
		vals = append(vals, row.HasTag)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.CommentsCount)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Post(rows []Post, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.post (" +
		"UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.Text)
		vals = append(vals, row.FormatedText)
		vals = append(vals, row.MediaUrl)
		vals = append(vals, row.MediaServerId)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.SharedTo)
		vals = append(vals, row.HasTag)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.CommentsCount)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

// RecommendUser represents a row from 'ms.recommend_user'.

// Manualy copy this to project
type __RecommendUser struct {
	Id          int     `json:"Id"`          // Id -
	UserId      int     `json:"UserId"`      // UserId -
	TargetId    int     `json:"TargetId"`    // TargetId -
	Weight      float32 `json:"Weight"`      // Weight -
	CreatedTime int     `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RecommendUser exists in the database.
func (ru *RecommendUser) Exists() bool {
	return ru._exists
}

// Deleted provides information if the RecommendUser has been deleted from the database.
func (ru *RecommendUser) Deleted() bool {
	return ru._deleted
}

// Insert inserts the RecommendUser to the database.
func (ru *RecommendUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ru._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.recommend_user (` +
		`UserId, TargetId, Weight, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ru.UserId, ru.TargetId, ru.Weight, ru.CreatedTime)
	res, err := db.Exec(sqlstr, ru.UserId, ru.TargetId, ru.Weight, ru.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ru.Id = int(id)
	ru._exists = true

	return nil
}

// Insert inserts the RecommendUser to the database.
func (ru *RecommendUser) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.recommend_user (` +
		`UserId, TargetId, Weight, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ru.UserId, ru.TargetId, ru.Weight, ru.CreatedTime)
	res, err := db.Exec(sqlstr, ru.UserId, ru.TargetId, ru.Weight, ru.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ru.Id = int(id)
	ru._exists = true

	return nil
}

// Update updates the RecommendUser in the database.
func (ru *RecommendUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ru._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ru._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.recommend_user SET ` +
		`UserId = ?, TargetId = ?, Weight = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, ru.UserId, ru.TargetId, ru.Weight, ru.CreatedTime, ru.Id)
	_, err = db.Exec(sqlstr, ru.UserId, ru.TargetId, ru.Weight, ru.CreatedTime, ru.Id)
	return err
}

// Save saves the RecommendUser to the database.
func (ru *RecommendUser) Save(db XODB) error {
	if ru.Exists() {
		return ru.Update(db)
	}

	return ru.Replace(db)
}

// Delete deletes the RecommendUser from the database.
func (ru *RecommendUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ru._exists {
		return nil
	}

	// if deleted, bail
	if ru._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.recommend_user WHERE Id = ?`

	// run query
	XOLog(sqlstr, ru.Id)
	_, err = db.Exec(sqlstr, ru.Id)
	if err != nil {
		return err
	}

	// set deleted
	ru._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __RecommendUser_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __RecommendUser_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __RecommendUser_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewRecommendUser_Deleter() *__RecommendUser_Deleter {
	d := __RecommendUser_Deleter{whereSep: " AND "}
	return &d
}

func NewRecommendUser_Updater() *__RecommendUser_Updater {
	u := __RecommendUser_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewRecommendUser_Selector() *__RecommendUser_Selector {
	u := __RecommendUser_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__RecommendUser_Deleter) Or(ins []int) *__RecommendUser_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__RecommendUser_Deleter) Id_In(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Deleter) Id_NotIn(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Deleter) Id_EQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_NotEQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_LT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_LE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_GT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_GE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Deleter) UserId_In(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Deleter) UserId_NotIn(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Deleter) UserId_EQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_NotEQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_LT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_LE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_GT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_GE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Deleter) TargetId_In(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Deleter) TargetId_NotIn(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Deleter) TargetId_EQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_NotEQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_LT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_LE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_GT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_GE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Deleter) CreatedTime_In(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Deleter) CreatedTime_NotIn(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Deleter) CreatedTime_EQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_NotEQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_LT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_LE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_GT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_GE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__RecommendUser_Updater) Or(ins []int) *__RecommendUser_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__RecommendUser_Updater) Id_In(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Updater) Id_NotIn(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Updater) Id_EQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_NotEQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_LT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_LE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_GT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_GE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Updater) UserId_In(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Updater) UserId_NotIn(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Updater) UserId_EQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_NotEQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_LT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_LE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_GT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_GE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Updater) TargetId_In(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Updater) TargetId_NotIn(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Updater) TargetId_EQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_NotEQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_LT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_LE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_GT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_GE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Updater) CreatedTime_In(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Updater) CreatedTime_NotIn(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Updater) CreatedTime_EQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_NotEQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_LT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_LE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_GT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_GE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__RecommendUser_Selector) Or(ins []int) *__RecommendUser_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__RecommendUser_Selector) Id_In(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Selector) Id_NotIn(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Selector) Id_EQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_NotEQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_LT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_LE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_GT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_GE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Selector) UserId_In(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Selector) UserId_NotIn(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Selector) UserId_EQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_NotEQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_LT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_LE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_GT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_GE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Selector) TargetId_In(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Selector) TargetId_NotIn(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Selector) TargetId_EQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_NotEQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_LT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_LE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_GT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_GE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Selector) CreatedTime_In(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Selector) CreatedTime_NotIn(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Selector) CreatedTime_EQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_NotEQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_LT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_LE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_GT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_GE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__RecommendUser_Updater) Id(newVal int) *__RecommendUser_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__RecommendUser_Updater) UserId(newVal int) *__RecommendUser_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

func (u *__RecommendUser_Updater) TargetId(newVal int) *__RecommendUser_Updater {
	u.updates[" TargetId = ? "] = newVal
	return u
}

//string

//ints

//string

//ints

func (u *__RecommendUser_Updater) CreatedTime(newVal int) *__RecommendUser_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__RecommendUser_Selector) OrderBy_Id_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_Id_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_Id() *__RecommendUser_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__RecommendUser_Selector) OrderBy_UserId_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_UserId_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_UserId() *__RecommendUser_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__RecommendUser_Selector) OrderBy_TargetId_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY TargetId DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_TargetId_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY TargetId ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_TargetId() *__RecommendUser_Selector {
	u.selectCol = "TargetId"
	return u
}

func (u *__RecommendUser_Selector) OrderBy_Weight_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY Weight DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_Weight_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY Weight ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_Weight() *__RecommendUser_Selector {
	u.selectCol = "Weight"
	return u
}

func (u *__RecommendUser_Selector) OrderBy_CreatedTime_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_CreatedTime_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_CreatedTime() *__RecommendUser_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__RecommendUser_Selector) Limit(num int) *__RecommendUser_Selector {
	u.limit = num
	return u
}

func (u *__RecommendUser_Selector) Offset(num int) *__RecommendUser_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__RecommendUser_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.recommend_user"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__RecommendUser_Selector) GetRow(db *sqlx.DB) (*RecommendUser, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &RecommendUser{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__RecommendUser_Selector) GetRows(db *sqlx.DB) ([]RecommendUser, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []RecommendUser
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__RecommendUser_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__RecommendUser_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__RecommendUser_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__RecommendUser_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__RecommendUser_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.recommend_user SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__RecommendUser_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.recommend_user WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  RecommendUser ////////////////
func MassInsert_RecommendUser(rows []RecommendUser, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.recommend_user (" +
		"UserId, TargetId, Weight, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.TargetId)
		vals = append(vals, row.Weight)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_RecommendUser(rows []RecommendUser, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.recommend_user (" +
		"UserId, TargetId, Weight, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.TargetId)
		vals = append(vals, row.Weight)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// Session represents a row from 'ms.session'.

// Manualy copy this to project
type __Session struct {
	Id                 int    `json:"Id"`                 // Id -
	UserId             int    `json:"UserId"`             // UserId -
	SessionUuid        string `json:"SessionUuid"`        // SessionUuid -
	ClientUuid         string `json:"ClientUuid"`         // ClientUuid -
	DeviceUuid         string `json:"DeviceUuid"`         // DeviceUuid -
	LastActivityTime   int    `json:"LastActivityTime"`   // LastActivityTime -
	LastIpAddress      string `json:"LastIpAddress"`      // LastIpAddress -
	LastWifiMacAddress string `json:"LastWifiMacAddress"` // LastWifiMacAddress -
	LastNetworkType    string `json:"LastNetworkType"`    // LastNetworkType -
	CreatedTime        int    `json:"CreatedTime"`        // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Session exists in the database.
func (s *Session) Exists() bool {
	return s._exists
}

// Deleted provides information if the Session has been deleted from the database.
func (s *Session) Deleted() bool {
	return s._deleted
}

// Insert inserts the Session to the database.
func (s *Session) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.session (` +
		`Id, UserId, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.Id, s.UserId, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime)
	res, err := db.Exec(sqlstr, s.Id, s.UserId, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.SessionUuid = string(id)
	s._exists = true

	return nil
}

// Insert inserts the Session to the database.
func (s *Session) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.session (` +
		`Id, UserId, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.Id, s.UserId, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime)
	res, err := db.Exec(sqlstr, s.Id, s.UserId, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.SessionUuid = string(id)
	s._exists = true

	return nil
}

// Update updates the Session in the database.
func (s *Session) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.session SET ` +
		`Id = ?, UserId = ?, ClientUuid = ?, DeviceUuid = ?, LastActivityTime = ?, LastIpAddress = ?, LastWifiMacAddress = ?, LastNetworkType = ?, CreatedTime = ?` +
		` WHERE SessionUuid = ?`

	// run query
	XOLog(sqlstr, s.Id, s.UserId, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime, s.SessionUuid)
	_, err = db.Exec(sqlstr, s.Id, s.UserId, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime, s.SessionUuid)
	return err
}

// Save saves the Session to the database.
func (s *Session) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Replace(db)
}

// Delete deletes the Session from the database.
func (s *Session) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.session WHERE SessionUuid = ?`

	// run query
	XOLog(sqlstr, s.SessionUuid)
	_, err = db.Exec(sqlstr, s.SessionUuid)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Session_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Session_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Session_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewSession_Deleter() *__Session_Deleter {
	d := __Session_Deleter{whereSep: " AND "}
	return &d
}

func NewSession_Updater() *__Session_Updater {
	u := __Session_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewSession_Selector() *__Session_Selector {
	u := __Session_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Session_Deleter) Or(ins []int) *__Session_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Session_Deleter) Id_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) Id_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) Id_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) UserId_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) UserId_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) UserId_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) LastActivityTime_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) LastActivityTime_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) LastActivityTime_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) CreatedTime_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) CreatedTime_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) CreatedTime_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Session_Updater) Or(ins []int) *__Session_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Session_Updater) Id_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) Id_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) Id_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) UserId_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) UserId_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) UserId_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) LastActivityTime_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) LastActivityTime_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) LastActivityTime_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) CreatedTime_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) CreatedTime_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) CreatedTime_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Session_Selector) Or(ins []int) *__Session_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Session_Selector) Id_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) Id_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) Id_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) UserId_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) UserId_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) UserId_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) LastActivityTime_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) LastActivityTime_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) LastActivityTime_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) CreatedTime_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) CreatedTime_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) CreatedTime_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Session_Deleter) SessionUuid_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) SessionUuid_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) SessionUuid_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) SessionUuid_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) ClientUuid_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) ClientUuid_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) ClientUuid_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) ClientUuid_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) DeviceUuid_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) DeviceUuid_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) DeviceUuid_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) DeviceUuid_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) LastIpAddress_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) LastIpAddress_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) LastIpAddress_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) LastIpAddress_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) LastWifiMacAddress_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) LastWifiMacAddress_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) LastWifiMacAddress_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) LastWifiMacAddress_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) LastNetworkType_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) LastNetworkType_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) LastNetworkType_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) LastNetworkType_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Session_Updater) SessionUuid_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) SessionUuid_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) SessionUuid_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) SessionUuid_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) ClientUuid_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) ClientUuid_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) ClientUuid_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) ClientUuid_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) DeviceUuid_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) DeviceUuid_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) DeviceUuid_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) DeviceUuid_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) LastIpAddress_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) LastIpAddress_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) LastIpAddress_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) LastIpAddress_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) LastWifiMacAddress_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) LastWifiMacAddress_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) LastWifiMacAddress_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) LastWifiMacAddress_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) LastNetworkType_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) LastNetworkType_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) LastNetworkType_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) LastNetworkType_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Session_Selector) SessionUuid_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) SessionUuid_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) SessionUuid_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) SessionUuid_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) ClientUuid_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) ClientUuid_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) ClientUuid_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) ClientUuid_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) DeviceUuid_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) DeviceUuid_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) DeviceUuid_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) DeviceUuid_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) LastIpAddress_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) LastIpAddress_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) LastIpAddress_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) LastIpAddress_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) LastWifiMacAddress_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) LastWifiMacAddress_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) LastWifiMacAddress_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) LastWifiMacAddress_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) LastNetworkType_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) LastNetworkType_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) LastNetworkType_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) LastNetworkType_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Session_Updater) Id(newVal int) *__Session_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__Session_Updater) UserId(newVal int) *__Session_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__Session_Updater) SessionUuid(newVal string) *__Session_Updater {
	u.updates[" SessionUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) ClientUuid(newVal string) *__Session_Updater {
	u.updates[" ClientUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) DeviceUuid(newVal string) *__Session_Updater {
	u.updates[" DeviceUuid = ? "] = newVal
	return u
}

//ints

func (u *__Session_Updater) LastActivityTime(newVal int) *__Session_Updater {
	u.updates[" LastActivityTime = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__Session_Updater) LastIpAddress(newVal string) *__Session_Updater {
	u.updates[" LastIpAddress = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) LastWifiMacAddress(newVal string) *__Session_Updater {
	u.updates[" LastWifiMacAddress = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) LastNetworkType(newVal string) *__Session_Updater {
	u.updates[" LastNetworkType = ? "] = newVal
	return u
}

//ints

func (u *__Session_Updater) CreatedTime(newVal int) *__Session_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Session_Selector) OrderBy_Id_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Session_Selector) OrderBy_Id_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Session_Selector) Select_Id() *__Session_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Session_Selector) OrderBy_UserId_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Session_Selector) OrderBy_UserId_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Session_Selector) Select_UserId() *__Session_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Session_Selector) OrderBy_SessionUuid_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY SessionUuid DESC "
	return u
}

func (u *__Session_Selector) OrderBy_SessionUuid_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY SessionUuid ASC "
	return u
}

func (u *__Session_Selector) Select_SessionUuid() *__Session_Selector {
	u.selectCol = "SessionUuid"
	return u
}

func (u *__Session_Selector) OrderBy_ClientUuid_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY ClientUuid DESC "
	return u
}

func (u *__Session_Selector) OrderBy_ClientUuid_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY ClientUuid ASC "
	return u
}

func (u *__Session_Selector) Select_ClientUuid() *__Session_Selector {
	u.selectCol = "ClientUuid"
	return u
}

func (u *__Session_Selector) OrderBy_DeviceUuid_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY DeviceUuid DESC "
	return u
}

func (u *__Session_Selector) OrderBy_DeviceUuid_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY DeviceUuid ASC "
	return u
}

func (u *__Session_Selector) Select_DeviceUuid() *__Session_Selector {
	u.selectCol = "DeviceUuid"
	return u
}

func (u *__Session_Selector) OrderBy_LastActivityTime_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY LastActivityTime DESC "
	return u
}

func (u *__Session_Selector) OrderBy_LastActivityTime_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY LastActivityTime ASC "
	return u
}

func (u *__Session_Selector) Select_LastActivityTime() *__Session_Selector {
	u.selectCol = "LastActivityTime"
	return u
}

func (u *__Session_Selector) OrderBy_LastIpAddress_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY LastIpAddress DESC "
	return u
}

func (u *__Session_Selector) OrderBy_LastIpAddress_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY LastIpAddress ASC "
	return u
}

func (u *__Session_Selector) Select_LastIpAddress() *__Session_Selector {
	u.selectCol = "LastIpAddress"
	return u
}

func (u *__Session_Selector) OrderBy_LastWifiMacAddress_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY LastWifiMacAddress DESC "
	return u
}

func (u *__Session_Selector) OrderBy_LastWifiMacAddress_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY LastWifiMacAddress ASC "
	return u
}

func (u *__Session_Selector) Select_LastWifiMacAddress() *__Session_Selector {
	u.selectCol = "LastWifiMacAddress"
	return u
}

func (u *__Session_Selector) OrderBy_LastNetworkType_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY LastNetworkType DESC "
	return u
}

func (u *__Session_Selector) OrderBy_LastNetworkType_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY LastNetworkType ASC "
	return u
}

func (u *__Session_Selector) Select_LastNetworkType() *__Session_Selector {
	u.selectCol = "LastNetworkType"
	return u
}

func (u *__Session_Selector) OrderBy_CreatedTime_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Session_Selector) OrderBy_CreatedTime_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Session_Selector) Select_CreatedTime() *__Session_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Session_Selector) Limit(num int) *__Session_Selector {
	u.limit = num
	return u
}

func (u *__Session_Selector) Offset(num int) *__Session_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Session_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.session"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Session_Selector) GetRow(db *sqlx.DB) (*Session, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Session{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__Session_Selector) GetRows(db *sqlx.DB) ([]Session, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Session
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Session_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Session_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Session_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Session_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Session_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.session SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Session_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.session WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Session ////////////////
func MassInsert_Session(rows []Session, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.session (" +
		"Id, UserId, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.UserId)
		vals = append(vals, row.ClientUuid)
		vals = append(vals, row.DeviceUuid)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.LastIpAddress)
		vals = append(vals, row.LastWifiMacAddress)
		vals = append(vals, row.LastNetworkType)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Session(rows []Session, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.session (" +
		"Id, UserId, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.UserId)
		vals = append(vals, row.ClientUuid)
		vals = append(vals, row.DeviceUuid)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.LastIpAddress)
		vals = append(vals, row.LastWifiMacAddress)
		vals = append(vals, row.LastNetworkType)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

// Tag represents a row from 'ms.tags'.

// Manualy copy this to project
type __Tag struct {
	Id          int    `json:"Id"`          // Id -
	Name        string `json:"Name"`        // Name -
	Count       int    `json:"Count"`       // Count -
	IsBlocked   int    `json:"IsBlocked"`   // IsBlocked -
	CreatedTime int    `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Tag exists in the database.
func (t *Tag) Exists() bool {
	return t._exists
}

// Deleted provides information if the Tag has been deleted from the database.
func (t *Tag) Deleted() bool {
	return t._deleted
}

// Insert inserts the Tag to the database.
func (t *Tag) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.tags (` +
		`Name, Count, IsBlocked, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime)
	res, err := db.Exec(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.Id = int(id)
	t._exists = true

	return nil
}

// Insert inserts the Tag to the database.
func (t *Tag) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.tags (` +
		`Name, Count, IsBlocked, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime)
	res, err := db.Exec(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.Id = int(id)
	t._exists = true

	return nil
}

// Update updates the Tag in the database.
func (t *Tag) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.tags SET ` +
		`Name = ?, Count = ?, IsBlocked = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime, t.Id)
	_, err = db.Exec(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime, t.Id)
	return err
}

// Save saves the Tag to the database.
func (t *Tag) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Replace(db)
}

// Delete deletes the Tag from the database.
func (t *Tag) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.tags WHERE Id = ?`

	// run query
	XOLog(sqlstr, t.Id)
	_, err = db.Exec(sqlstr, t.Id)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Tag_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Tag_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Tag_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewTag_Deleter() *__Tag_Deleter {
	d := __Tag_Deleter{whereSep: " AND "}
	return &d
}

func NewTag_Updater() *__Tag_Updater {
	u := __Tag_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewTag_Selector() *__Tag_Selector {
	u := __Tag_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Tag_Deleter) Or(ins []int) *__Tag_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Deleter) Id_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Id_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Id_EQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) Count_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Count_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Count_EQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) IsBlocked_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) IsBlocked_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) IsBlocked_EQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) CreatedTime_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) CreatedTime_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) CreatedTime_EQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Tag_Updater) Or(ins []int) *__Tag_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Updater) Id_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Id_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Id_EQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) Count_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Count_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Count_EQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) IsBlocked_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) IsBlocked_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) IsBlocked_EQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) CreatedTime_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) CreatedTime_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) CreatedTime_EQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Tag_Selector) Or(ins []int) *__Tag_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Selector) Id_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Id_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Id_EQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) Count_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Count_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Count_EQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) IsBlocked_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) IsBlocked_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) IsBlocked_EQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) CreatedTime_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) CreatedTime_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) CreatedTime_EQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Tag_Deleter) Name_In(ins []string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Name_NotIn(ins []string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Deleter) Name_Like(val string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Name_EQ(val string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Tag_Updater) Name_In(ins []string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Name_NotIn(ins []string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Updater) Name_Like(val string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Name_EQ(val string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Tag_Selector) Name_In(ins []string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Name_NotIn(ins []string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Selector) Name_Like(val string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Name_EQ(val string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Tag_Updater) Id(newVal int) *__Tag_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__Tag_Updater) Name(newVal string) *__Tag_Updater {
	u.updates[" Name = ? "] = newVal
	return u
}

//ints

func (u *__Tag_Updater) Count(newVal int) *__Tag_Updater {
	u.updates[" Count = ? "] = newVal
	return u
}

//string

//ints

func (u *__Tag_Updater) IsBlocked(newVal int) *__Tag_Updater {
	u.updates[" IsBlocked = ? "] = newVal
	return u
}

//string

//ints

func (u *__Tag_Updater) CreatedTime(newVal int) *__Tag_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Tag_Selector) OrderBy_Id_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_Id_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Tag_Selector) Select_Id() *__Tag_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Tag_Selector) OrderBy_Name_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY Name DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_Name_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY Name ASC "
	return u
}

func (u *__Tag_Selector) Select_Name() *__Tag_Selector {
	u.selectCol = "Name"
	return u
}

func (u *__Tag_Selector) OrderBy_Count_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY Count DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_Count_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY Count ASC "
	return u
}

func (u *__Tag_Selector) Select_Count() *__Tag_Selector {
	u.selectCol = "Count"
	return u
}

func (u *__Tag_Selector) OrderBy_IsBlocked_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY IsBlocked DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_IsBlocked_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY IsBlocked ASC "
	return u
}

func (u *__Tag_Selector) Select_IsBlocked() *__Tag_Selector {
	u.selectCol = "IsBlocked"
	return u
}

func (u *__Tag_Selector) OrderBy_CreatedTime_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_CreatedTime_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Tag_Selector) Select_CreatedTime() *__Tag_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Tag_Selector) Limit(num int) *__Tag_Selector {
	u.limit = num
	return u
}

func (u *__Tag_Selector) Offset(num int) *__Tag_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Tag_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.tags"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Tag_Selector) GetRow(db *sqlx.DB) (*Tag, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Tag{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__Tag_Selector) GetRows(db *sqlx.DB) ([]Tag, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Tag
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Tag_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Tag_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Tag_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Tag_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Tag_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.tags SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Tag_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.tags WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Tag ////////////////
func MassInsert_Tag(rows []Tag, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.tags (" +
		"Name, Count, IsBlocked, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.IsBlocked)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Tag(rows []Tag, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.tags (" +
		"Name, Count, IsBlocked, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.IsBlocked)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// TagsPost represents a row from 'ms.tags_posts'.

// Manualy copy this to project
type __TagsPost struct {
	Id          int `json:"Id"`          // Id -
	TagId       int `json:"TagId"`       // TagId -
	PostId      int `json:"PostId"`      // PostId -
	TypeId      int `json:"TypeId"`      // TypeId -
	CreatedTime int `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TagsPost exists in the database.
func (tp *TagsPost) Exists() bool {
	return tp._exists
}

// Deleted provides information if the TagsPost has been deleted from the database.
func (tp *TagsPost) Deleted() bool {
	return tp._deleted
}

// Insert inserts the TagsPost to the database.
func (tp *TagsPost) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.tags_posts (` +
		`TagId, PostId, TypeId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime)
	res, err := db.Exec(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tp.Id = int(id)
	tp._exists = true

	return nil
}

// Insert inserts the TagsPost to the database.
func (tp *TagsPost) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.tags_posts (` +
		`TagId, PostId, TypeId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime)
	res, err := db.Exec(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tp.Id = int(id)
	tp._exists = true

	return nil
}

// Update updates the TagsPost in the database.
func (tp *TagsPost) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.tags_posts SET ` +
		`TagId = ?, PostId = ?, TypeId = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime, tp.Id)
	_, err = db.Exec(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime, tp.Id)
	return err
}

// Save saves the TagsPost to the database.
func (tp *TagsPost) Save(db XODB) error {
	if tp.Exists() {
		return tp.Update(db)
	}

	return tp.Replace(db)
}

// Delete deletes the TagsPost from the database.
func (tp *TagsPost) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tp._exists {
		return nil
	}

	// if deleted, bail
	if tp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.tags_posts WHERE Id = ?`

	// run query
	XOLog(sqlstr, tp.Id)
	_, err = db.Exec(sqlstr, tp.Id)
	if err != nil {
		return err
	}

	// set deleted
	tp._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __TagsPost_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __TagsPost_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __TagsPost_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewTagsPost_Deleter() *__TagsPost_Deleter {
	d := __TagsPost_Deleter{whereSep: " AND "}
	return &d
}

func NewTagsPost_Updater() *__TagsPost_Updater {
	u := __TagsPost_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewTagsPost_Selector() *__TagsPost_Selector {
	u := __TagsPost_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__TagsPost_Deleter) Or(ins []int) *__TagsPost_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__TagsPost_Deleter) Id_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) Id_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) Id_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) TagId_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) TagId_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) TagId_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) PostId_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) PostId_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) PostId_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) TypeId_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) TypeId_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) TypeId_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) CreatedTime_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) CreatedTime_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) CreatedTime_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__TagsPost_Updater) Or(ins []int) *__TagsPost_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__TagsPost_Updater) Id_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) Id_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) Id_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) TagId_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) TagId_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) TagId_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) PostId_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) PostId_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) PostId_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) TypeId_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) TypeId_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) TypeId_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) CreatedTime_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) CreatedTime_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) CreatedTime_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__TagsPost_Selector) Or(ins []int) *__TagsPost_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__TagsPost_Selector) Id_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) Id_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) Id_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) TagId_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) TagId_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) TagId_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) PostId_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) PostId_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) PostId_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) TypeId_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) TypeId_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) TypeId_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) CreatedTime_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) CreatedTime_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) CreatedTime_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__TagsPost_Updater) Id(newVal int) *__TagsPost_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

func (u *__TagsPost_Updater) TagId(newVal int) *__TagsPost_Updater {
	u.updates[" TagId = ? "] = newVal
	return u
}

//string

//ints

func (u *__TagsPost_Updater) PostId(newVal int) *__TagsPost_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

//string

//ints

func (u *__TagsPost_Updater) TypeId(newVal int) *__TagsPost_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

//string

//ints

func (u *__TagsPost_Updater) CreatedTime(newVal int) *__TagsPost_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__TagsPost_Selector) OrderBy_Id_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_Id_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__TagsPost_Selector) Select_Id() *__TagsPost_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__TagsPost_Selector) OrderBy_TagId_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TagId DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_TagId_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TagId ASC "
	return u
}

func (u *__TagsPost_Selector) Select_TagId() *__TagsPost_Selector {
	u.selectCol = "TagId"
	return u
}

func (u *__TagsPost_Selector) OrderBy_PostId_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_PostId_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__TagsPost_Selector) Select_PostId() *__TagsPost_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__TagsPost_Selector) OrderBy_TypeId_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_TypeId_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__TagsPost_Selector) Select_TypeId() *__TagsPost_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__TagsPost_Selector) OrderBy_CreatedTime_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_CreatedTime_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__TagsPost_Selector) Select_CreatedTime() *__TagsPost_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__TagsPost_Selector) Limit(num int) *__TagsPost_Selector {
	u.limit = num
	return u
}

func (u *__TagsPost_Selector) Offset(num int) *__TagsPost_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__TagsPost_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.tags_posts"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__TagsPost_Selector) GetRow(db *sqlx.DB) (*TagsPost, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &TagsPost{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__TagsPost_Selector) GetRows(db *sqlx.DB) ([]TagsPost, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []TagsPost
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__TagsPost_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__TagsPost_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__TagsPost_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__TagsPost_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__TagsPost_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.tags_posts SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__TagsPost_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.tags_posts WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  TagsPost ////////////////
func MassInsert_TagsPost(rows []TagsPost, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.tags_posts (" +
		"TagId, PostId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.TagId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_TagsPost(rows []TagsPost, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.tags_posts (" +
		"TagId, PostId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.TagId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// User represents a row from 'ms.user'.

// Manualy copy this to project
type __User struct {
	Id                   int    `json:"Id"`                   // Id -
	UserName             string `json:"UserName"`             // UserName -
	FirstName            string `json:"FirstName"`            // FirstName -
	LastName             string `json:"LastName"`             // LastName -
	About                string `json:"About"`                // About -
	FullName             string `json:"FullName"`             // FullName -
	AvatarSrc            string `json:"AvatarSrc"`            // AvatarSrc -
	AvatarUrl            string `json:"AvatarUrl"`            // AvatarUrl -
	PrivacyProfile       int    `json:"PrivacyProfile"`       // PrivacyProfile -
	Phone                string `json:"Phone"`                // Phone -
	Email                string `json:"Email"`                // Email -
	IsDeleted            int    `json:"IsDeleted"`            // IsDeleted -
	PasswordHash         string `json:"PasswordHash"`         // PasswordHash -
	PasswordSalt         string `json:"PasswordSalt"`         // PasswordSalt -
	FollowersCount       int    `json:"FollowersCount"`       // FollowersCount -
	FollowingCount       int    `json:"FollowingCount"`       // FollowingCount -
	PostsCount           int    `json:"PostsCount"`           // PostsCount -
	MediaCount           int    `json:"MediaCount"`           // MediaCount -
	LikesCount           int    `json:"LikesCount"`           // LikesCount -
	ResharedCount        int    `json:"ResharedCount"`        // ResharedCount -
	LastActionTime       int    `json:"LastActionTime"`       // LastActionTime -
	LastPostTime         int    `json:"LastPostTime"`         // LastPostTime -
	PrimaryFollowingList int    `json:"PrimaryFollowingList"` // PrimaryFollowingList -
	CreatedTime          int    `json:"CreatedTime"`          // CreatedTime -
	UpdatedTime          int    `json:"UpdatedTime"`          // UpdatedTime -
	SessionUuid          string `json:"SessionUuid"`          // SessionUuid -
	DeviceUuid           string `json:"DeviceUuid"`           // DeviceUuid -
	LastWifiMacAddress   string `json:"LastWifiMacAddress"`   // LastWifiMacAddress -
	LastNetworkType      string `json:"LastNetworkType"`      // LastNetworkType -
	AppVersion           int    `json:"AppVersion"`           // AppVersion -
	LastActivityTime     int    `json:"LastActivityTime"`     // LastActivityTime -
	LastLoginTime        int    `json:"LastLoginTime"`        // LastLoginTime -
	LastIpAddress        string `json:"LastIpAddress"`        // LastIpAddress -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.user (` +
		`UserName, FirstName, LastName, About, FullName, AvatarSrc, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarSrc, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress)
	res, err := db.Exec(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarSrc, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.Id = int(id)
	u._exists = true

	return nil
}

// Insert inserts the User to the database.
func (u *User) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.user (` +
		`UserName, FirstName, LastName, About, FullName, AvatarSrc, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarSrc, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress)
	res, err := db.Exec(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarSrc, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.Id = int(id)
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.user SET ` +
		`UserName = ?, FirstName = ?, LastName = ?, About = ?, FullName = ?, AvatarSrc = ?, AvatarUrl = ?, PrivacyProfile = ?, Phone = ?, Email = ?, IsDeleted = ?, PasswordHash = ?, PasswordSalt = ?, FollowersCount = ?, FollowingCount = ?, PostsCount = ?, MediaCount = ?, LikesCount = ?, ResharedCount = ?, LastActionTime = ?, LastPostTime = ?, PrimaryFollowingList = ?, CreatedTime = ?, UpdatedTime = ?, SessionUuid = ?, DeviceUuid = ?, LastWifiMacAddress = ?, LastNetworkType = ?, AppVersion = ?, LastActivityTime = ?, LastLoginTime = ?, LastIpAddress = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarSrc, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress, u.Id)
	_, err = db.Exec(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarSrc, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress, u.Id)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Replace(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.user WHERE Id = ?`

	// run query
	XOLog(sqlstr, u.Id)
	_, err = db.Exec(sqlstr, u.Id)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __User_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __User_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __User_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewUser_Deleter() *__User_Deleter {
	d := __User_Deleter{whereSep: " AND "}
	return &d
}

func NewUser_Updater() *__User_Updater {
	u := __User_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewUser_Selector() *__User_Selector {
	u := __User_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__User_Deleter) Or(ins []int) *__User_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__User_Deleter) Id_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Id_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Id_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PrivacyProfile_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PrivacyProfile_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PrivacyProfile_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) IsDeleted_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) IsDeleted_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) IsDeleted_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FollowersCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowersCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FollowersCount_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FollowingCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowingCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FollowingCount_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PostsCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PostsCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PostsCount_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) MediaCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) MediaCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) MediaCount_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LikesCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LikesCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LikesCount_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) ResharedCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) ResharedCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) ResharedCount_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastActionTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActionTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastActionTime_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastPostTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastPostTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastPostTime_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PrimaryFollowingList_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PrimaryFollowingList_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PrimaryFollowingList_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) CreatedTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) CreatedTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) CreatedTime_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) UpdatedTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UpdatedTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UpdatedTime_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) AppVersion_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) AppVersion_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) AppVersion_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastActivityTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActivityTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastActivityTime_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastLoginTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastLoginTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastLoginTime_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__User_Updater) Or(ins []int) *__User_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__User_Updater) Id_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Id_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Id_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PrivacyProfile_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PrivacyProfile_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PrivacyProfile_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) IsDeleted_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) IsDeleted_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) IsDeleted_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FollowersCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowersCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FollowersCount_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FollowingCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowingCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FollowingCount_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PostsCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PostsCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PostsCount_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) MediaCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) MediaCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) MediaCount_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LikesCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LikesCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LikesCount_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) ResharedCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) ResharedCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) ResharedCount_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastActionTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActionTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastActionTime_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastPostTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastPostTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastPostTime_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PrimaryFollowingList_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PrimaryFollowingList_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PrimaryFollowingList_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) CreatedTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) CreatedTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) CreatedTime_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) UpdatedTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UpdatedTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UpdatedTime_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) AppVersion_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) AppVersion_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) AppVersion_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastActivityTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActivityTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastActivityTime_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastLoginTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastLoginTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastLoginTime_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__User_Selector) Or(ins []int) *__User_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__User_Selector) Id_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Id_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Id_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PrivacyProfile_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PrivacyProfile_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PrivacyProfile_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) IsDeleted_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) IsDeleted_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) IsDeleted_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FollowersCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowersCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FollowersCount_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FollowingCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowingCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FollowingCount_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PostsCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PostsCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PostsCount_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) MediaCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) MediaCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) MediaCount_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LikesCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LikesCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LikesCount_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) ResharedCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) ResharedCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) ResharedCount_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastActionTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActionTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastActionTime_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastPostTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastPostTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastPostTime_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PrimaryFollowingList_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PrimaryFollowingList_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PrimaryFollowingList_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) CreatedTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) CreatedTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) CreatedTime_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) UpdatedTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UpdatedTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UpdatedTime_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) AppVersion_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) AppVersion_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) AppVersion_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastActivityTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActivityTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastActivityTime_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastLoginTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastLoginTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastLoginTime_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__User_Deleter) UserName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) UserName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UserName_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FirstName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FirstName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) FirstName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FirstName_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastName_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) About_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) About_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) About_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) About_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FullName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FullName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) FullName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FullName_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) AvatarSrc_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) AvatarSrc_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) AvatarSrc_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) AvatarSrc_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) AvatarUrl_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) AvatarUrl_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) AvatarUrl_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) AvatarUrl_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) Phone_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Phone_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) Phone_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Phone_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) Email_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Email_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) Email_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Email_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PasswordHash_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PasswordHash_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) PasswordHash_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PasswordHash_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PasswordSalt_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PasswordSalt_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) PasswordSalt_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PasswordSalt_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) SessionUuid_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) SessionUuid_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) SessionUuid_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) SessionUuid_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) DeviceUuid_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) DeviceUuid_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) DeviceUuid_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) DeviceUuid_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastWifiMacAddress_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastWifiMacAddress_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastWifiMacAddress_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastWifiMacAddress_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastNetworkType_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastNetworkType_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastNetworkType_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastNetworkType_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastIpAddress_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastIpAddress_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastIpAddress_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastIpAddress_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__User_Updater) UserName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) UserName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UserName_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FirstName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FirstName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) FirstName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FirstName_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastName_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) About_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) About_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) About_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) About_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FullName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FullName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) FullName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FullName_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) AvatarSrc_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) AvatarSrc_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) AvatarSrc_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) AvatarSrc_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) AvatarUrl_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) AvatarUrl_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) AvatarUrl_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) AvatarUrl_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) Phone_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Phone_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) Phone_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Phone_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) Email_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Email_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) Email_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Email_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PasswordHash_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PasswordHash_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) PasswordHash_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PasswordHash_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PasswordSalt_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PasswordSalt_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) PasswordSalt_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PasswordSalt_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) SessionUuid_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) SessionUuid_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) SessionUuid_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) SessionUuid_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) DeviceUuid_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) DeviceUuid_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) DeviceUuid_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) DeviceUuid_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastWifiMacAddress_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastWifiMacAddress_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastWifiMacAddress_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastWifiMacAddress_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastNetworkType_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastNetworkType_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastNetworkType_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastNetworkType_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastIpAddress_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastIpAddress_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastIpAddress_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastIpAddress_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__User_Selector) UserName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) UserName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UserName_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FirstName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FirstName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) FirstName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FirstName_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastName_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) About_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) About_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) About_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) About_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FullName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FullName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) FullName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FullName_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) AvatarSrc_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) AvatarSrc_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) AvatarSrc_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) AvatarSrc_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) AvatarUrl_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) AvatarUrl_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) AvatarUrl_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) AvatarUrl_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) Phone_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Phone_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) Phone_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Phone_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) Email_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Email_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) Email_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Email_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PasswordHash_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PasswordHash_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) PasswordHash_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PasswordHash_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PasswordSalt_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PasswordSalt_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) PasswordSalt_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PasswordSalt_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) SessionUuid_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) SessionUuid_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) SessionUuid_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) SessionUuid_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) DeviceUuid_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) DeviceUuid_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) DeviceUuid_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) DeviceUuid_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastWifiMacAddress_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastWifiMacAddress_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastWifiMacAddress_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastWifiMacAddress_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastNetworkType_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastNetworkType_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastNetworkType_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastNetworkType_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastIpAddress_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastIpAddress_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastIpAddress_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastIpAddress_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__User_Updater) Id(newVal int) *__User_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__User_Updater) UserName(newVal string) *__User_Updater {
	u.updates[" UserName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) FirstName(newVal string) *__User_Updater {
	u.updates[" FirstName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) LastName(newVal string) *__User_Updater {
	u.updates[" LastName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) About(newVal string) *__User_Updater {
	u.updates[" About = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) FullName(newVal string) *__User_Updater {
	u.updates[" FullName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) AvatarSrc(newVal string) *__User_Updater {
	u.updates[" AvatarSrc = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) AvatarUrl(newVal string) *__User_Updater {
	u.updates[" AvatarUrl = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) PrivacyProfile(newVal int) *__User_Updater {
	u.updates[" PrivacyProfile = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__User_Updater) Phone(newVal string) *__User_Updater {
	u.updates[" Phone = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) Email(newVal string) *__User_Updater {
	u.updates[" Email = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) IsDeleted(newVal int) *__User_Updater {
	u.updates[" IsDeleted = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__User_Updater) PasswordHash(newVal string) *__User_Updater {
	u.updates[" PasswordHash = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) PasswordSalt(newVal string) *__User_Updater {
	u.updates[" PasswordSalt = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) FollowersCount(newVal int) *__User_Updater {
	u.updates[" FollowersCount = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) FollowingCount(newVal int) *__User_Updater {
	u.updates[" FollowingCount = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) PostsCount(newVal int) *__User_Updater {
	u.updates[" PostsCount = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) MediaCount(newVal int) *__User_Updater {
	u.updates[" MediaCount = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) LikesCount(newVal int) *__User_Updater {
	u.updates[" LikesCount = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) ResharedCount(newVal int) *__User_Updater {
	u.updates[" ResharedCount = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) LastActionTime(newVal int) *__User_Updater {
	u.updates[" LastActionTime = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) LastPostTime(newVal int) *__User_Updater {
	u.updates[" LastPostTime = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) PrimaryFollowingList(newVal int) *__User_Updater {
	u.updates[" PrimaryFollowingList = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) CreatedTime(newVal int) *__User_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) UpdatedTime(newVal int) *__User_Updater {
	u.updates[" UpdatedTime = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__User_Updater) SessionUuid(newVal string) *__User_Updater {
	u.updates[" SessionUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) DeviceUuid(newVal string) *__User_Updater {
	u.updates[" DeviceUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) LastWifiMacAddress(newVal string) *__User_Updater {
	u.updates[" LastWifiMacAddress = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) LastNetworkType(newVal string) *__User_Updater {
	u.updates[" LastNetworkType = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) AppVersion(newVal int) *__User_Updater {
	u.updates[" AppVersion = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) LastActivityTime(newVal int) *__User_Updater {
	u.updates[" LastActivityTime = ? "] = newVal
	return u
}

//string

//ints

func (u *__User_Updater) LastLoginTime(newVal int) *__User_Updater {
	u.updates[" LastLoginTime = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__User_Updater) LastIpAddress(newVal string) *__User_Updater {
	u.updates[" LastIpAddress = ? "] = newVal
	return u
}

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__User_Selector) OrderBy_Id_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__User_Selector) OrderBy_Id_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__User_Selector) Select_Id() *__User_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__User_Selector) OrderBy_UserName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UserName DESC "
	return u
}

func (u *__User_Selector) OrderBy_UserName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UserName ASC "
	return u
}

func (u *__User_Selector) Select_UserName() *__User_Selector {
	u.selectCol = "UserName"
	return u
}

func (u *__User_Selector) OrderBy_FirstName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FirstName DESC "
	return u
}

func (u *__User_Selector) OrderBy_FirstName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FirstName ASC "
	return u
}

func (u *__User_Selector) Select_FirstName() *__User_Selector {
	u.selectCol = "FirstName"
	return u
}

func (u *__User_Selector) OrderBy_LastName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastName DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastName ASC "
	return u
}

func (u *__User_Selector) Select_LastName() *__User_Selector {
	u.selectCol = "LastName"
	return u
}

func (u *__User_Selector) OrderBy_About_Desc() *__User_Selector {
	u.orderBy = " ORDER BY About DESC "
	return u
}

func (u *__User_Selector) OrderBy_About_Asc() *__User_Selector {
	u.orderBy = " ORDER BY About ASC "
	return u
}

func (u *__User_Selector) Select_About() *__User_Selector {
	u.selectCol = "About"
	return u
}

func (u *__User_Selector) OrderBy_FullName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FullName DESC "
	return u
}

func (u *__User_Selector) OrderBy_FullName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FullName ASC "
	return u
}

func (u *__User_Selector) Select_FullName() *__User_Selector {
	u.selectCol = "FullName"
	return u
}

func (u *__User_Selector) OrderBy_AvatarSrc_Desc() *__User_Selector {
	u.orderBy = " ORDER BY AvatarSrc DESC "
	return u
}

func (u *__User_Selector) OrderBy_AvatarSrc_Asc() *__User_Selector {
	u.orderBy = " ORDER BY AvatarSrc ASC "
	return u
}

func (u *__User_Selector) Select_AvatarSrc() *__User_Selector {
	u.selectCol = "AvatarSrc"
	return u
}

func (u *__User_Selector) OrderBy_AvatarUrl_Desc() *__User_Selector {
	u.orderBy = " ORDER BY AvatarUrl DESC "
	return u
}

func (u *__User_Selector) OrderBy_AvatarUrl_Asc() *__User_Selector {
	u.orderBy = " ORDER BY AvatarUrl ASC "
	return u
}

func (u *__User_Selector) Select_AvatarUrl() *__User_Selector {
	u.selectCol = "AvatarUrl"
	return u
}

func (u *__User_Selector) OrderBy_PrivacyProfile_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PrivacyProfile DESC "
	return u
}

func (u *__User_Selector) OrderBy_PrivacyProfile_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PrivacyProfile ASC "
	return u
}

func (u *__User_Selector) Select_PrivacyProfile() *__User_Selector {
	u.selectCol = "PrivacyProfile"
	return u
}

func (u *__User_Selector) OrderBy_Phone_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Phone DESC "
	return u
}

func (u *__User_Selector) OrderBy_Phone_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Phone ASC "
	return u
}

func (u *__User_Selector) Select_Phone() *__User_Selector {
	u.selectCol = "Phone"
	return u
}

func (u *__User_Selector) OrderBy_Email_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Email DESC "
	return u
}

func (u *__User_Selector) OrderBy_Email_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Email ASC "
	return u
}

func (u *__User_Selector) Select_Email() *__User_Selector {
	u.selectCol = "Email"
	return u
}

func (u *__User_Selector) OrderBy_IsDeleted_Desc() *__User_Selector {
	u.orderBy = " ORDER BY IsDeleted DESC "
	return u
}

func (u *__User_Selector) OrderBy_IsDeleted_Asc() *__User_Selector {
	u.orderBy = " ORDER BY IsDeleted ASC "
	return u
}

func (u *__User_Selector) Select_IsDeleted() *__User_Selector {
	u.selectCol = "IsDeleted"
	return u
}

func (u *__User_Selector) OrderBy_PasswordHash_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordHash DESC "
	return u
}

func (u *__User_Selector) OrderBy_PasswordHash_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordHash ASC "
	return u
}

func (u *__User_Selector) Select_PasswordHash() *__User_Selector {
	u.selectCol = "PasswordHash"
	return u
}

func (u *__User_Selector) OrderBy_PasswordSalt_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordSalt DESC "
	return u
}

func (u *__User_Selector) OrderBy_PasswordSalt_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordSalt ASC "
	return u
}

func (u *__User_Selector) Select_PasswordSalt() *__User_Selector {
	u.selectCol = "PasswordSalt"
	return u
}

func (u *__User_Selector) OrderBy_FollowersCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FollowersCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_FollowersCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FollowersCount ASC "
	return u
}

func (u *__User_Selector) Select_FollowersCount() *__User_Selector {
	u.selectCol = "FollowersCount"
	return u
}

func (u *__User_Selector) OrderBy_FollowingCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FollowingCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_FollowingCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FollowingCount ASC "
	return u
}

func (u *__User_Selector) Select_FollowingCount() *__User_Selector {
	u.selectCol = "FollowingCount"
	return u
}

func (u *__User_Selector) OrderBy_PostsCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PostsCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_PostsCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PostsCount ASC "
	return u
}

func (u *__User_Selector) Select_PostsCount() *__User_Selector {
	u.selectCol = "PostsCount"
	return u
}

func (u *__User_Selector) OrderBy_MediaCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY MediaCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_MediaCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY MediaCount ASC "
	return u
}

func (u *__User_Selector) Select_MediaCount() *__User_Selector {
	u.selectCol = "MediaCount"
	return u
}

func (u *__User_Selector) OrderBy_LikesCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LikesCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_LikesCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LikesCount ASC "
	return u
}

func (u *__User_Selector) Select_LikesCount() *__User_Selector {
	u.selectCol = "LikesCount"
	return u
}

func (u *__User_Selector) OrderBy_ResharedCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY ResharedCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_ResharedCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY ResharedCount ASC "
	return u
}

func (u *__User_Selector) Select_ResharedCount() *__User_Selector {
	u.selectCol = "ResharedCount"
	return u
}

func (u *__User_Selector) OrderBy_LastActionTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastActionTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastActionTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastActionTime ASC "
	return u
}

func (u *__User_Selector) Select_LastActionTime() *__User_Selector {
	u.selectCol = "LastActionTime"
	return u
}

func (u *__User_Selector) OrderBy_LastPostTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastPostTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastPostTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastPostTime ASC "
	return u
}

func (u *__User_Selector) Select_LastPostTime() *__User_Selector {
	u.selectCol = "LastPostTime"
	return u
}

func (u *__User_Selector) OrderBy_PrimaryFollowingList_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PrimaryFollowingList DESC "
	return u
}

func (u *__User_Selector) OrderBy_PrimaryFollowingList_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PrimaryFollowingList ASC "
	return u
}

func (u *__User_Selector) Select_PrimaryFollowingList() *__User_Selector {
	u.selectCol = "PrimaryFollowingList"
	return u
}

func (u *__User_Selector) OrderBy_CreatedTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_CreatedTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__User_Selector) Select_CreatedTime() *__User_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__User_Selector) OrderBy_UpdatedTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UpdatedTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_UpdatedTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UpdatedTime ASC "
	return u
}

func (u *__User_Selector) Select_UpdatedTime() *__User_Selector {
	u.selectCol = "UpdatedTime"
	return u
}

func (u *__User_Selector) OrderBy_SessionUuid_Desc() *__User_Selector {
	u.orderBy = " ORDER BY SessionUuid DESC "
	return u
}

func (u *__User_Selector) OrderBy_SessionUuid_Asc() *__User_Selector {
	u.orderBy = " ORDER BY SessionUuid ASC "
	return u
}

func (u *__User_Selector) Select_SessionUuid() *__User_Selector {
	u.selectCol = "SessionUuid"
	return u
}

func (u *__User_Selector) OrderBy_DeviceUuid_Desc() *__User_Selector {
	u.orderBy = " ORDER BY DeviceUuid DESC "
	return u
}

func (u *__User_Selector) OrderBy_DeviceUuid_Asc() *__User_Selector {
	u.orderBy = " ORDER BY DeviceUuid ASC "
	return u
}

func (u *__User_Selector) Select_DeviceUuid() *__User_Selector {
	u.selectCol = "DeviceUuid"
	return u
}

func (u *__User_Selector) OrderBy_LastWifiMacAddress_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastWifiMacAddress DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastWifiMacAddress_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastWifiMacAddress ASC "
	return u
}

func (u *__User_Selector) Select_LastWifiMacAddress() *__User_Selector {
	u.selectCol = "LastWifiMacAddress"
	return u
}

func (u *__User_Selector) OrderBy_LastNetworkType_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastNetworkType DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastNetworkType_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastNetworkType ASC "
	return u
}

func (u *__User_Selector) Select_LastNetworkType() *__User_Selector {
	u.selectCol = "LastNetworkType"
	return u
}

func (u *__User_Selector) OrderBy_AppVersion_Desc() *__User_Selector {
	u.orderBy = " ORDER BY AppVersion DESC "
	return u
}

func (u *__User_Selector) OrderBy_AppVersion_Asc() *__User_Selector {
	u.orderBy = " ORDER BY AppVersion ASC "
	return u
}

func (u *__User_Selector) Select_AppVersion() *__User_Selector {
	u.selectCol = "AppVersion"
	return u
}

func (u *__User_Selector) OrderBy_LastActivityTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastActivityTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastActivityTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastActivityTime ASC "
	return u
}

func (u *__User_Selector) Select_LastActivityTime() *__User_Selector {
	u.selectCol = "LastActivityTime"
	return u
}

func (u *__User_Selector) OrderBy_LastLoginTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastLoginTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastLoginTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastLoginTime ASC "
	return u
}

func (u *__User_Selector) Select_LastLoginTime() *__User_Selector {
	u.selectCol = "LastLoginTime"
	return u
}

func (u *__User_Selector) OrderBy_LastIpAddress_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastIpAddress DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastIpAddress_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastIpAddress ASC "
	return u
}

func (u *__User_Selector) Select_LastIpAddress() *__User_Selector {
	u.selectCol = "LastIpAddress"
	return u
}

func (u *__User_Selector) Limit(num int) *__User_Selector {
	u.limit = num
	return u
}

func (u *__User_Selector) Offset(num int) *__User_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__User_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.user"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__User_Selector) GetRow(db *sqlx.DB) (*User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &User{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__User_Selector) GetRows(db *sqlx.DB) ([]User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []User
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__User_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__User_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__User_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__User_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__User_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.user SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__User_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.user WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  User ////////////////
func MassInsert_User(rows []User, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.user (" +
		"UserName, FirstName, LastName, About, FullName, AvatarSrc, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserName)
		vals = append(vals, row.FirstName)
		vals = append(vals, row.LastName)
		vals = append(vals, row.About)
		vals = append(vals, row.FullName)
		vals = append(vals, row.AvatarSrc)
		vals = append(vals, row.AvatarUrl)
		vals = append(vals, row.PrivacyProfile)
		vals = append(vals, row.Phone)
		vals = append(vals, row.Email)
		vals = append(vals, row.IsDeleted)
		vals = append(vals, row.PasswordHash)
		vals = append(vals, row.PasswordSalt)
		vals = append(vals, row.FollowersCount)
		vals = append(vals, row.FollowingCount)
		vals = append(vals, row.PostsCount)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ResharedCount)
		vals = append(vals, row.LastActionTime)
		vals = append(vals, row.LastPostTime)
		vals = append(vals, row.PrimaryFollowingList)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedTime)
		vals = append(vals, row.SessionUuid)
		vals = append(vals, row.DeviceUuid)
		vals = append(vals, row.LastWifiMacAddress)
		vals = append(vals, row.LastNetworkType)
		vals = append(vals, row.AppVersion)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.LastLoginTime)
		vals = append(vals, row.LastIpAddress)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_User(rows []User, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.user (" +
		"UserName, FirstName, LastName, About, FullName, AvatarSrc, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserName)
		vals = append(vals, row.FirstName)
		vals = append(vals, row.LastName)
		vals = append(vals, row.About)
		vals = append(vals, row.FullName)
		vals = append(vals, row.AvatarSrc)
		vals = append(vals, row.AvatarUrl)
		vals = append(vals, row.PrivacyProfile)
		vals = append(vals, row.Phone)
		vals = append(vals, row.Email)
		vals = append(vals, row.IsDeleted)
		vals = append(vals, row.PasswordHash)
		vals = append(vals, row.PasswordSalt)
		vals = append(vals, row.FollowersCount)
		vals = append(vals, row.FollowingCount)
		vals = append(vals, row.PostsCount)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ResharedCount)
		vals = append(vals, row.LastActionTime)
		vals = append(vals, row.LastPostTime)
		vals = append(vals, row.PrimaryFollowingList)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedTime)
		vals = append(vals, row.SessionUuid)
		vals = append(vals, row.DeviceUuid)
		vals = append(vals, row.LastWifiMacAddress)
		vals = append(vals, row.LastNetworkType)
		vals = append(vals, row.AppVersion)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.LastLoginTime)
		vals = append(vals, row.LastIpAddress)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

// UserPassword represents a row from 'ms.user_password'.

// Manualy copy this to project
type __UserPassword struct {
	UserId      int    `json:"UserId"`      // UserId -
	Password    string `json:"Password"`    // Password -
	CreatedTime int    `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserPassword exists in the database.
func (up *UserPassword) Exists() bool {
	return up._exists
}

// Deleted provides information if the UserPassword has been deleted from the database.
func (up *UserPassword) Deleted() bool {
	return up._deleted
}

// Insert inserts the UserPassword to the database.
func (up *UserPassword) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if up._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO ms.user_password (` +
		`Password, CreatedTime` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, up.Password, up.CreatedTime)
	res, err := db.Exec(sqlstr, up.Password, up.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	up.UserId = int(id)
	up._exists = true

	return nil
}

// Insert inserts the UserPassword to the database.
func (up *UserPassword) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.user_password (` +
		`Password, CreatedTime` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, up.Password, up.CreatedTime)
	res, err := db.Exec(sqlstr, up.Password, up.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	up.UserId = int(id)
	up._exists = true

	return nil
}

// Update updates the UserPassword in the database.
func (up *UserPassword) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if up._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.user_password SET ` +
		`Password = ?, CreatedTime = ?` +
		` WHERE UserId = ?`

	// run query
	XOLog(sqlstr, up.Password, up.CreatedTime, up.UserId)
	_, err = db.Exec(sqlstr, up.Password, up.CreatedTime, up.UserId)
	return err
}

// Save saves the UserPassword to the database.
func (up *UserPassword) Save(db XODB) error {
	if up.Exists() {
		return up.Update(db)
	}

	return up.Replace(db)
}

// Delete deletes the UserPassword from the database.
func (up *UserPassword) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return nil
	}

	// if deleted, bail
	if up._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.user_password WHERE UserId = ?`

	// run query
	XOLog(sqlstr, up.UserId)
	_, err = db.Exec(sqlstr, up.UserId)
	if err != nil {
		return err
	}

	// set deleted
	up._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __UserPassword_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __UserPassword_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __UserPassword_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewUserPassword_Deleter() *__UserPassword_Deleter {
	d := __UserPassword_Deleter{whereSep: " AND "}
	return &d
}

func NewUserPassword_Updater() *__UserPassword_Updater {
	u := __UserPassword_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewUserPassword_Selector() *__UserPassword_Selector {
	u := __UserPassword_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__UserPassword_Deleter) Or(ins []int) *__UserPassword_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__UserPassword_Deleter) UserId_In(ins []int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Deleter) UserId_NotIn(ins []int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Deleter) UserId_EQ(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_NotEQ(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_LT(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_LE(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_GT(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_GE(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserPassword_Deleter) CreatedTime_In(ins []int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Deleter) CreatedTime_NotIn(ins []int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Deleter) CreatedTime_EQ(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_NotEQ(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_LT(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_LE(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_GT(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_GE(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__UserPassword_Updater) Or(ins []int) *__UserPassword_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__UserPassword_Updater) UserId_In(ins []int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Updater) UserId_NotIn(ins []int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Updater) UserId_EQ(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_NotEQ(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_LT(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_LE(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_GT(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_GE(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserPassword_Updater) CreatedTime_In(ins []int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Updater) CreatedTime_NotIn(ins []int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Updater) CreatedTime_EQ(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_NotEQ(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_LT(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_LE(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_GT(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_GE(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__UserPassword_Selector) Or(ins []int) *__UserPassword_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__UserPassword_Selector) UserId_In(ins []int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Selector) UserId_NotIn(ins []int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Selector) UserId_EQ(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_NotEQ(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_LT(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_LE(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_GT(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_GE(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserPassword_Selector) CreatedTime_In(ins []int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Selector) CreatedTime_NotIn(ins []int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Selector) CreatedTime_EQ(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_NotEQ(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_LT(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_LE(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_GT(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_GE(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__UserPassword_Deleter) Password_In(ins []string) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Deleter) Password_NotIn(ins []string) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__UserPassword_Deleter) Password_Like(val string) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Deleter) Password_EQ(val string) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__UserPassword_Updater) Password_In(ins []string) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Updater) Password_NotIn(ins []string) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__UserPassword_Updater) Password_Like(val string) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Updater) Password_EQ(val string) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__UserPassword_Selector) Password_In(ins []string) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Selector) Password_NotIn(ins []string) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__UserPassword_Selector) Password_Like(val string) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Selector) Password_EQ(val string) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__UserPassword_Updater) UserId(newVal int) *__UserPassword_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

//string

//ints

//string
func (u *__UserPassword_Updater) Password(newVal string) *__UserPassword_Updater {
	u.updates[" Password = ? "] = newVal
	return u
}

//ints

func (u *__UserPassword_Updater) CreatedTime(newVal int) *__UserPassword_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__UserPassword_Selector) OrderBy_UserId_Desc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__UserPassword_Selector) OrderBy_UserId_Asc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__UserPassword_Selector) Select_UserId() *__UserPassword_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__UserPassword_Selector) OrderBy_Password_Desc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY Password DESC "
	return u
}

func (u *__UserPassword_Selector) OrderBy_Password_Asc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY Password ASC "
	return u
}

func (u *__UserPassword_Selector) Select_Password() *__UserPassword_Selector {
	u.selectCol = "Password"
	return u
}

func (u *__UserPassword_Selector) OrderBy_CreatedTime_Desc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__UserPassword_Selector) OrderBy_CreatedTime_Asc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__UserPassword_Selector) Select_CreatedTime() *__UserPassword_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__UserPassword_Selector) Limit(num int) *__UserPassword_Selector {
	u.limit = num
	return u
}

func (u *__UserPassword_Selector) Offset(num int) *__UserPassword_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__UserPassword_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.user_password"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__UserPassword_Selector) GetRow(db *sqlx.DB) (*UserPassword, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &UserPassword{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return row, nil
}

func (u *__UserPassword_Selector) GetRows(db *sqlx.DB) ([]UserPassword, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []UserPassword
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__UserPassword_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__UserPassword_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__UserPassword_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__UserPassword_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__UserPassword_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.user_password SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__UserPassword_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.user_password WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  UserPassword ////////////////
func MassInsert_UserPassword(rows []UserPassword, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.user_password (" +
		"Password, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Password)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_UserPassword(rows []UserPassword, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.user_password (" +
		"Password, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Password)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

// CommentById retrieves a row from 'ms.comments' as a Comment.
//
// Generated from index 'comments_Id_pkey'.
func CommentById(db XODB, id int) (*Comment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, PostId, Text, CreatedTime ` +
		`FROM ms.comments ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	c := Comment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.Id, &c.UserId, &c.PostId, &c.Text, &c.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// FollowingListByUserId retrieves a row from 'ms.following_list' as a FollowingList.
//
// Generated from index 'following_list_UserId_pkey'.
func FollowingListByUserId(db XODB, userId int) (*FollowingList, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, ListType, Name, Count, IsAuto, IsPimiry, CreatedTime ` +
		`FROM ms.following_list ` +
		`WHERE UserId = ?`

	// run query
	XOLog(sqlstr, userId)
	fl := FollowingList{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userId).Scan(&fl.Id, &fl.UserId, &fl.ListType, &fl.Name, &fl.Count, &fl.IsAuto, &fl.IsPimiry, &fl.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &fl, nil
}

// FollowingListMembersByFollowedUserIdUserId retrieves a row from 'ms.following_list_member' as a FollowingListMember.
//
// Generated from index 'FollowedUserId'.
func FollowingListMembersByFollowedUserIdUserId(db XODB, followedUserId int, userId int) ([]*FollowingListMember, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs ` +
		`FROM ms.following_list_member ` +
		`WHERE FollowedUserId = ? AND UserId = ?`

	// run query
	XOLog(sqlstr, followedUserId, userId)
	q, err := db.Query(sqlstr, followedUserId, userId)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FollowingListMember{}
	for q.Next() {
		flm := FollowingListMember{
			_exists: true,
		}

		// scan
		err = q.Scan(&flm.Id, &flm.ListId, &flm.UserId, &flm.FollowedUserId, &flm.FollowType, &flm.UpdatedTimeMs)
		if err != nil {
			return nil, err
		}

		res = append(res, &flm)
	}

	return res, nil
}

// FollowingListMembersByUserIdUpdatedTimeMs retrieves a row from 'ms.following_list_member' as a FollowingListMember.
//
// Generated from index 'UserId_2'.
func FollowingListMembersByUserIdUpdatedTimeMs(db XODB, userId int, updatedTimeMs int) ([]*FollowingListMember, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs ` +
		`FROM ms.following_list_member ` +
		`WHERE UserId = ? AND UpdatedTimeMs = ?`

	// run query
	XOLog(sqlstr, userId, updatedTimeMs)
	q, err := db.Query(sqlstr, userId, updatedTimeMs)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FollowingListMember{}
	for q.Next() {
		flm := FollowingListMember{
			_exists: true,
		}

		// scan
		err = q.Scan(&flm.Id, &flm.ListId, &flm.UserId, &flm.FollowedUserId, &flm.FollowType, &flm.UpdatedTimeMs)
		if err != nil {
			return nil, err
		}

		res = append(res, &flm)
	}

	return res, nil
}

// FollowingListMemberById retrieves a row from 'ms.following_list_member' as a FollowingListMember.
//
// Generated from index 'following_list_member_Id_pkey'.
func FollowingListMemberById(db XODB, id int) (*FollowingListMember, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs ` +
		`FROM ms.following_list_member ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	flm := FollowingListMember{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&flm.Id, &flm.ListId, &flm.UserId, &flm.FollowedUserId, &flm.FollowType, &flm.UpdatedTimeMs)
	if err != nil {
		return nil, err
	}

	return &flm, nil
}

// FollowingListMemberHistoryById retrieves a row from 'ms.following_list_member_history' as a FollowingListMemberHistory.
//
// Generated from index 'following_list_member_history_Id_pkey'.
func FollowingListMemberHistoryById(db XODB, id int) (*FollowingListMemberHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs, FollowId ` +
		`FROM ms.following_list_member_history ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	flmh := FollowingListMemberHistory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&flmh.Id, &flmh.ListId, &flmh.UserId, &flmh.FollowedUserId, &flmh.FollowType, &flmh.UpdatedTimeMs, &flmh.FollowId)
	if err != nil {
		return nil, err
	}

	return &flmh, nil
}

// LikeByPostIdUserId retrieves a row from 'ms.likes' as a Like.
//
// Generated from index 'PostId'.
func LikeByPostIdUserId(db XODB, postId int, userId int) (*Like, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PostId, UserId, TypeId, CreatedTime ` +
		`FROM ms.likes ` +
		`WHERE PostId = ? AND UserId = ?`

	// run query
	XOLog(sqlstr, postId, userId)
	l := Like{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, postId, userId).Scan(&l.Id, &l.PostId, &l.UserId, &l.TypeId, &l.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &l, nil
}

// LikesByPostId retrieves a row from 'ms.likes' as a Like.
//
// Generated from index 'PostId_2'.
func LikesByPostId(db XODB, postId int) ([]*Like, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PostId, UserId, TypeId, CreatedTime ` +
		`FROM ms.likes ` +
		`WHERE PostId = ?`

	// run query
	XOLog(sqlstr, postId)
	q, err := db.Query(sqlstr, postId)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Like{}
	for q.Next() {
		l := Like{
			_exists: true,
		}

		// scan
		err = q.Scan(&l.Id, &l.PostId, &l.UserId, &l.TypeId, &l.CreatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}

// LikeByUserId retrieves a row from 'ms.likes' as a Like.
//
// Generated from index 'likes_UserId_pkey'.
func LikeByUserId(db XODB, userId int) (*Like, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PostId, UserId, TypeId, CreatedTime ` +
		`FROM ms.likes ` +
		`WHERE UserId = ?`

	// run query
	XOLog(sqlstr, userId)
	l := Like{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userId).Scan(&l.Id, &l.PostId, &l.UserId, &l.TypeId, &l.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &l, nil
}

// MediaById retrieves a row from 'ms.media' as a Media.
//
// Generated from index 'media_Id_pkey'.
func MediaById(db XODB, id int) (*Media, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, PostId, AlbumId, TypeId, CreatedTime, Src ` +
		`FROM ms.media ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Media{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.Id, &m.UserId, &m.PostId, &m.AlbumId, &m.TypeId, &m.CreatedTime, &m.Src)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// MessagesByToUserId retrieves a row from 'ms.message' as a Message.
//
// Generated from index 'ToUserId'.
func MessagesByToUserId(db XODB, toUserId int) ([]*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs ` +
		`FROM ms.message ` +
		`WHERE ToUserId = ?`

	// run query
	XOLog(sqlstr, toUserId)
	q, err := db.Query(sqlstr, toUserId)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Message{}
	for q.Next() {
		m := Message{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.Id, &m.ToUserId, &m.RoomKey, &m.MessageKey, &m.FromUserID, &m.Data, &m.TimeMs)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}

// MessagesByToUserIdTimeMs retrieves a row from 'ms.message' as a Message.
//
// Generated from index 'ToUserId_2'.
func MessagesByToUserIdTimeMs(db XODB, toUserId int, timeMs int) ([]*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs ` +
		`FROM ms.message ` +
		`WHERE ToUserId = ? AND TimeMs = ?`

	// run query
	XOLog(sqlstr, toUserId, timeMs)
	q, err := db.Query(sqlstr, toUserId, timeMs)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Message{}
	for q.Next() {
		m := Message{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.Id, &m.ToUserId, &m.RoomKey, &m.MessageKey, &m.FromUserID, &m.Data, &m.TimeMs)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}

// MessageById retrieves a row from 'ms.message' as a Message.
//
// Generated from index 'message_Id_pkey'.
func MessageById(db XODB, id int) (*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs ` +
		`FROM ms.message ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Message{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.Id, &m.ToUserId, &m.RoomKey, &m.MessageKey, &m.FromUserID, &m.Data, &m.TimeMs)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// MsgDeletedFromServerById retrieves a row from 'ms.msg_deleted_from_server' as a MsgDeletedFromServer.
//
// Generated from index 'msg_deleted_from_server_Id_pkey'.
func MsgDeletedFromServerById(db XODB, id int) (*MsgDeletedFromServer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, MsgKey, PeerUserId, RoomKey, AtTime ` +
		`FROM ms.msg_deleted_from_server ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	mdfs := MsgDeletedFromServer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mdfs.Id, &mdfs.ToUserId, &mdfs.MsgKey, &mdfs.PeerUserId, &mdfs.RoomKey, &mdfs.AtTime)
	if err != nil {
		return nil, err
	}

	return &mdfs, nil
}

// MsgReceivedToPeerById retrieves a row from 'ms.msg_received_to_peer' as a MsgReceivedToPeer.
//
// Generated from index 'msg_received_to_peer_Id_pkey'.
func MsgReceivedToPeerById(db XODB, id int) (*MsgReceivedToPeer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, MsgKey, RoomKey, PeerUserId, AtTime ` +
		`FROM ms.msg_received_to_peer ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	mrtp := MsgReceivedToPeer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mrtp.Id, &mrtp.ToUserId, &mrtp.MsgKey, &mrtp.RoomKey, &mrtp.PeerUserId, &mrtp.AtTime)
	if err != nil {
		return nil, err
	}

	return &mrtp, nil
}

// MsgSeenByPeerById retrieves a row from 'ms.msg_seen_by_peer' as a MsgSeenByPeer.
//
// Generated from index 'msg_seen_by_peer_Id_pkey'.
func MsgSeenByPeerById(db XODB, id int) (*MsgSeenByPeer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, MsgKey, RoomKey, PeerUserId, AtTime ` +
		`FROM ms.msg_seen_by_peer ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	msbp := MsgSeenByPeer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&msbp.Id, &msbp.ToUserId, &msbp.MsgKey, &msbp.RoomKey, &msbp.PeerUserId, &msbp.AtTime)
	if err != nil {
		return nil, err
	}

	return &msbp, nil
}

// NotificationsByForUserId retrieves a row from 'ms.notification' as a Notification.
//
// Generated from index 'ForUserId'.
func NotificationsByForUserId(db XODB, forUserId int) ([]*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TargetId, ObjectId, SeenStatus, CreatedTime ` +
		`FROM ms.notification ` +
		`WHERE ForUserId = ?`

	// run query
	XOLog(sqlstr, forUserId)
	q, err := db.Query(sqlstr, forUserId)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Notification{}
	for q.Next() {
		n := Notification{
			_exists: true,
		}

		// scan
		err = q.Scan(&n.Id, &n.ForUserId, &n.ActorUserId, &n.ActionTypeId, &n.ObjectTypeId, &n.TargetId, &n.ObjectId, &n.SeenStatus, &n.CreatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &n)
	}

	return res, nil
}

// NotificationsByTargetId retrieves a row from 'ms.notification' as a Notification.
//
// Generated from index 'TargetId'.
func NotificationsByTargetId(db XODB, targetId int) ([]*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TargetId, ObjectId, SeenStatus, CreatedTime ` +
		`FROM ms.notification ` +
		`WHERE TargetId = ?`

	// run query
	XOLog(sqlstr, targetId)
	q, err := db.Query(sqlstr, targetId)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Notification{}
	for q.Next() {
		n := Notification{
			_exists: true,
		}

		// scan
		err = q.Scan(&n.Id, &n.ForUserId, &n.ActorUserId, &n.ActionTypeId, &n.ObjectTypeId, &n.TargetId, &n.ObjectId, &n.SeenStatus, &n.CreatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &n)
	}

	return res, nil
}

// NotificationById retrieves a row from 'ms.notification' as a Notification.
//
// Generated from index 'notification_Id_pkey'.
func NotificationById(db XODB, id int) (*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TargetId, ObjectId, SeenStatus, CreatedTime ` +
		`FROM ms.notification ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	n := Notification{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&n.Id, &n.ForUserId, &n.ActorUserId, &n.ActionTypeId, &n.ObjectTypeId, &n.TargetId, &n.ObjectId, &n.SeenStatus, &n.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &n, nil
}

// PhoneContactByPhoneContactRowIdUserId retrieves a row from 'ms.phone_contacts' as a PhoneContact.
//
// Generated from index 'PhoneContactRowId'.
func PhoneContactByPhoneContactRowIdUserId(db XODB, phoneContactRowId int, userId int) (*PhoneContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime ` +
		`FROM ms.phone_contacts ` +
		`WHERE PhoneContactRowId = ? AND UserId = ?`

	// run query
	XOLog(sqlstr, phoneContactRowId, userId)
	pc := PhoneContact{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, phoneContactRowId, userId).Scan(&pc.Id, &pc.PhoneDisplayName, &pc.PhoneFamilyName, &pc.PhoneNumber, &pc.PhoneNormalizedNumber, &pc.PhoneContactRowId, &pc.UserId, &pc.DeviceUuidId, &pc.CreatedTime, &pc.UpdatedTime)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PhoneContactsByPhoneNormalizedNumber retrieves a row from 'ms.phone_contacts' as a PhoneContact.
//
// Generated from index 'PhoneNormalizedNumber'.
func PhoneContactsByPhoneNormalizedNumber(db XODB, phoneNormalizedNumber string) ([]*PhoneContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime ` +
		`FROM ms.phone_contacts ` +
		`WHERE PhoneNormalizedNumber = ?`

	// run query
	XOLog(sqlstr, phoneNormalizedNumber)
	q, err := db.Query(sqlstr, phoneNormalizedNumber)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PhoneContact{}
	for q.Next() {
		pc := PhoneContact{
			_exists: true,
		}

		// scan
		err = q.Scan(&pc.Id, &pc.PhoneDisplayName, &pc.PhoneFamilyName, &pc.PhoneNumber, &pc.PhoneNormalizedNumber, &pc.PhoneContactRowId, &pc.UserId, &pc.DeviceUuidId, &pc.CreatedTime, &pc.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PhoneContactsByPhoneNumber retrieves a row from 'ms.phone_contacts' as a PhoneContact.
//
// Generated from index 'PhoneNumber'.
func PhoneContactsByPhoneNumber(db XODB, phoneNumber string) ([]*PhoneContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime ` +
		`FROM ms.phone_contacts ` +
		`WHERE PhoneNumber = ?`

	// run query
	XOLog(sqlstr, phoneNumber)
	q, err := db.Query(sqlstr, phoneNumber)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PhoneContact{}
	for q.Next() {
		pc := PhoneContact{
			_exists: true,
		}

		// scan
		err = q.Scan(&pc.Id, &pc.PhoneDisplayName, &pc.PhoneFamilyName, &pc.PhoneNumber, &pc.PhoneNormalizedNumber, &pc.PhoneContactRowId, &pc.UserId, &pc.DeviceUuidId, &pc.CreatedTime, &pc.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PhoneContactsByUserId retrieves a row from 'ms.phone_contacts' as a PhoneContact.
//
// Generated from index 'UserId'.
func PhoneContactsByUserId(db XODB, userId int) ([]*PhoneContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime ` +
		`FROM ms.phone_contacts ` +
		`WHERE UserId = ?`

	// run query
	XOLog(sqlstr, userId)
	q, err := db.Query(sqlstr, userId)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PhoneContact{}
	for q.Next() {
		pc := PhoneContact{
			_exists: true,
		}

		// scan
		err = q.Scan(&pc.Id, &pc.PhoneDisplayName, &pc.PhoneFamilyName, &pc.PhoneNumber, &pc.PhoneNormalizedNumber, &pc.PhoneContactRowId, &pc.UserId, &pc.DeviceUuidId, &pc.CreatedTime, &pc.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PhoneContactsByUserIdCreatedTime retrieves a row from 'ms.phone_contacts' as a PhoneContact.
//
// Generated from index 'UserId_Time'.
func PhoneContactsByUserIdCreatedTime(db XODB, userId int, createdTime int) ([]*PhoneContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime ` +
		`FROM ms.phone_contacts ` +
		`WHERE UserId = ? AND CreatedTime = ?`

	// run query
	XOLog(sqlstr, userId, createdTime)
	q, err := db.Query(sqlstr, userId, createdTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PhoneContact{}
	for q.Next() {
		pc := PhoneContact{
			_exists: true,
		}

		// scan
		err = q.Scan(&pc.Id, &pc.PhoneDisplayName, &pc.PhoneFamilyName, &pc.PhoneNumber, &pc.PhoneNormalizedNumber, &pc.PhoneContactRowId, &pc.UserId, &pc.DeviceUuidId, &pc.CreatedTime, &pc.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PhoneContactById retrieves a row from 'ms.phone_contacts' as a PhoneContact.
//
// Generated from index 'phone_contacts_Id_pkey'.
func PhoneContactById(db XODB, id int) (*PhoneContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime ` +
		`FROM ms.phone_contacts ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	pc := PhoneContact{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pc.Id, &pc.PhoneDisplayName, &pc.PhoneFamilyName, &pc.PhoneNumber, &pc.PhoneNormalizedNumber, &pc.PhoneContactRowId, &pc.UserId, &pc.DeviceUuidId, &pc.CreatedTime, &pc.UpdatedTime)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PostById retrieves a row from 'ms.post' as a Post.
//
// Generated from index 'post_Id_pkey'.
func PostById(db XODB, id int) (*Post, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, TypeId, Text, FormatedText, MediaUrl, MediaServerId, Width, Height, SharedTo, HasTag, LikesCount, CommentsCount, CreatedTime ` +
		`FROM ms.post ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	p := Post{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.Id, &p.UserId, &p.TypeId, &p.Text, &p.FormatedText, &p.MediaUrl, &p.MediaServerId, &p.Width, &p.Height, &p.SharedTo, &p.HasTag, &p.LikesCount, &p.CommentsCount, &p.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// RecommendUserById retrieves a row from 'ms.recommend_user' as a RecommendUser.
//
// Generated from index 'recommend_user_Id_pkey'.
func RecommendUserById(db XODB, id int) (*RecommendUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, TargetId, Weight, CreatedTime ` +
		`FROM ms.recommend_user ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	ru := RecommendUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ru.Id, &ru.UserId, &ru.TargetId, &ru.Weight, &ru.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &ru, nil
}

// SessionsById retrieves a row from 'ms.session' as a Session.
//
// Generated from index 'Id'.
func SessionsById(db XODB, id int) ([]*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, SessionUuid, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime ` +
		`FROM ms.session ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	q, err := db.Query(sqlstr, id)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Session{}
	for q.Next() {
		s := Session{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.Id, &s.UserId, &s.SessionUuid, &s.ClientUuid, &s.DeviceUuid, &s.LastActivityTime, &s.LastIpAddress, &s.LastWifiMacAddress, &s.LastNetworkType, &s.CreatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// SessionBySessionUuid retrieves a row from 'ms.session' as a Session.
//
// Generated from index 'session_SessionUuid_pkey'.
func SessionBySessionUuid(db XODB, sessionUuid string) (*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, SessionUuid, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime ` +
		`FROM ms.session ` +
		`WHERE SessionUuid = ?`

	// run query
	XOLog(sqlstr, sessionUuid)
	s := Session{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, sessionUuid).Scan(&s.Id, &s.UserId, &s.SessionUuid, &s.ClientUuid, &s.DeviceUuid, &s.LastActivityTime, &s.LastIpAddress, &s.LastWifiMacAddress, &s.LastNetworkType, &s.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// TagByName retrieves a row from 'ms.tags' as a Tag.
//
// Generated from index 'Name'.
func TagByName(db XODB, name string) (*Tag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Name, Count, IsBlocked, CreatedTime ` +
		`FROM ms.tags ` +
		`WHERE Name = ?`

	// run query
	XOLog(sqlstr, name)
	t := Tag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&t.Id, &t.Name, &t.Count, &t.IsBlocked, &t.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &t, nil
}

// TagById retrieves a row from 'ms.tags' as a Tag.
//
// Generated from index 'tags_Id_pkey'.
func TagById(db XODB, id int) (*Tag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Name, Count, IsBlocked, CreatedTime ` +
		`FROM ms.tags ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	t := Tag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&t.Id, &t.Name, &t.Count, &t.IsBlocked, &t.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &t, nil
}

// TagsPostByTagIdPostId retrieves a row from 'ms.tags_posts' as a TagsPost.
//
// Generated from index 'TagId'.
func TagsPostByTagIdPostId(db XODB, tagId int, postId int) (*TagsPost, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, TagId, PostId, TypeId, CreatedTime ` +
		`FROM ms.tags_posts ` +
		`WHERE TagId = ? AND PostId = ?`

	// run query
	XOLog(sqlstr, tagId, postId)
	tp := TagsPost{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tagId, postId).Scan(&tp.Id, &tp.TagId, &tp.PostId, &tp.TypeId, &tp.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &tp, nil
}

// TagsPostById retrieves a row from 'ms.tags_posts' as a TagsPost.
//
// Generated from index 'tags_posts_Id_pkey'.
func TagsPostById(db XODB, id int) (*TagsPost, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, TagId, PostId, TypeId, CreatedTime ` +
		`FROM ms.tags_posts ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	tp := TagsPost{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&tp.Id, &tp.TagId, &tp.PostId, &tp.TypeId, &tp.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &tp, nil
}

// UserByEmail retrieves a row from 'ms.user' as a User.
//
// Generated from index 'Email'.
func UserByEmail(db XODB, email string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarSrc, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE Email = ?`

	// run query
	XOLog(sqlstr, email)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarSrc, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UsersByPhone retrieves a row from 'ms.user' as a User.
//
// Generated from index 'Phone'.
func UsersByPhone(db XODB, phone string) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarSrc, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE Phone = ?`

	// run query
	XOLog(sqlstr, phone)
	q, err := db.Query(sqlstr, phone)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarSrc, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UsersBySessionUuid retrieves a row from 'ms.user' as a User.
//
// Generated from index 'SessionUuid'.
func UsersBySessionUuid(db XODB, sessionUuid string) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarSrc, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE SessionUuid = ?`

	// run query
	XOLog(sqlstr, sessionUuid)
	q, err := db.Query(sqlstr, sessionUuid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarSrc, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UserByUserName retrieves a row from 'ms.user' as a User.
//
// Generated from index 'UserName'.
func UserByUserName(db XODB, userName string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarSrc, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE UserName = ?`

	// run query
	XOLog(sqlstr, userName)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userName).Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarSrc, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserById retrieves a row from 'ms.user' as a User.
//
// Generated from index 'user_Id_pkey'.
func UserById(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarSrc, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarSrc, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserPasswordByUserId retrieves a row from 'ms.user_password' as a UserPassword.
//
// Generated from index 'user_password_UserId_pkey'.
func UserPasswordByUserId(db XODB, userId int) (*UserPassword, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UserId, Password, CreatedTime ` +
		`FROM ms.user_password ` +
		`WHERE UserId = ?`

	// run query
	XOLog(sqlstr, userId)
	up := UserPassword{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userId).Scan(&up.UserId, &up.Password, &up.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &up, nil
}

// XODB is the common interface for database operations that can be used with
// types from schema 'ms'.
//
// This should work with database/sql.DB and database/sql.Tx.
type XODB interface {
	Exec(string, ...interface{}) (sql.Result, error)
	Query(string, ...interface{}) (*sql.Rows, error)
	QueryRow(string, ...interface{}) *sql.Row
}

// XOLog provides the log func used by generated queries.
var _sqlLogFile *os.File
var XOLog = func(strings ...interface{}) {
	if config.IS_DEBUG {
		if _sqlLogFile == nil {
			_sqlLogFile, _ = os.OpenFile("./logs/sql_"+helper.IntToStr(helper.TimeNow())+".sql", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
		}
		_sqlLogFile.WriteString(fmt.Sprintln(strings...))
		_sqlLogFile.Sync()
	}
}

// ScannerValuer is the common interface for types that implement both the
// database/sql.Scanner and sql/driver.Valuer interfaces.
type ScannerValuer interface {
	sql.Scanner
	driver.Valuer
}

// StringSlice is a slice of strings.
type StringSlice []string

// quoteEscapeRegex is the regex to match escaped characters in a string.
var quoteEscapeRegex = regexp.MustCompile(`([^\\]([\\]{2})*)\\"`)

// Scan satisfies the sql.Scanner interface for StringSlice.
func (ss *StringSlice) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid StringSlice")
	}

	// change quote escapes for csv parser
	str := quoteEscapeRegex.ReplaceAllString(string(buf), `$1""`)
	str = strings.Replace(str, `\\`, `\`, -1)

	// remove braces
	str = str[1 : len(str)-1]

	// bail if only one
	if len(str) == 0 {
		*ss = StringSlice([]string{})
		return nil
	}

	// parse with csv reader
	cr := csv.NewReader(strings.NewReader(str))
	slice, err := cr.Read()
	if err != nil {
		fmt.Printf("exiting!: %v\n", err)
		return err
	}

	*ss = StringSlice(slice)

	return nil
}

// Value satisfies the driver.Valuer interface for StringSlice.
func (ss StringSlice) Value() (driver.Value, error) {
	v := make([]string, len(ss))
	for i, s := range ss {
		v[i] = `"` + strings.Replace(strings.Replace(s, `\`, `\\\`, -1), `"`, `\"`, -1) + `"`
	}
	return "{" + strings.Join(v, ",") + "}", nil
}

// Slice is a slice of ScannerValuers.
type Slice []ScannerValuer

////////////// ME /////////////
type whereClause struct {
	condition string
	args      []interface{}
}

func whereClusesToSql(wheres []whereClause, whereSep string) (string, []interface{}) {
	var wheresArr []string
	for _, w := range wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, whereSep)

	var args []interface{}
	for _, w := range wheres {
		args = append(args, w.args...)
	}
	return wheresStr, args
}
