// Package models contains the types for schema 'ms'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// TagsPost represents a row from 'ms.tags_posts'.

// Manualy copy this to project
type TagsPost__ struct {
	Id          int `json:"Id"`          // Id -
	TagId       int `json:"TagId"`       // TagId -
	PostId      int `json:"PostId"`      // PostId -
	TypeId      int `json:"TypeId"`      // TypeId -
	CreatedTime int `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TagsPost exists in the database.
func (tp *TagsPost) Exists() bool {
	return tp._exists
}

// Deleted provides information if the TagsPost has been deleted from the database.
func (tp *TagsPost) Deleted() bool {
	return tp._deleted
}

// Insert inserts the TagsPost to the database.
func (tp *TagsPost) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.tags_posts (` +
		`TagId, PostId, TypeId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime)
	res, err := db.Exec(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	tp.Id = int(id)
	tp._exists = true

	OnTagsPost_AfterInsert(tp)

	return nil
}

// Insert inserts the TagsPost to the database.
func (tp *TagsPost) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.tags_posts (` +
		`TagId, PostId, TypeId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime)
	res, err := db.Exec(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	tp.Id = int(id)
	tp._exists = true

	OnTagsPost_AfterInsert(tp)

	return nil
}

// Update updates the TagsPost in the database.
func (tp *TagsPost) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.tags_posts SET ` +
		`TagId = ?, PostId = ?, TypeId = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime, tp.Id)
	_, err = db.Exec(sqlstr, tp.TagId, tp.PostId, tp.TypeId, tp.CreatedTime, tp.Id)

	XOLogErr(err)
	OnTagsPost_AfterUpdate(tp)

	return err
}

// Save saves the TagsPost to the database.
func (tp *TagsPost) Save(db XODB) error {
	if tp.Exists() {
		return tp.Update(db)
	}

	return tp.Replace(db)
}

// Delete deletes the TagsPost from the database.
func (tp *TagsPost) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tp._exists {
		return nil
	}

	// if deleted, bail
	if tp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.tags_posts WHERE Id = ?`

	// run query
	XOLog(sqlstr, tp.Id)
	_, err = db.Exec(sqlstr, tp.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	tp._deleted = true

	OnTagsPost_AfterDelete(tp)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __TagsPost_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __TagsPost_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __TagsPost_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewTagsPost_Deleter() *__TagsPost_Deleter {
	d := __TagsPost_Deleter{whereSep: " AND "}
	return &d
}

func NewTagsPost_Updater() *__TagsPost_Updater {
	u := __TagsPost_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewTagsPost_Selector() *__TagsPost_Selector {
	u := __TagsPost_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__TagsPost_Deleter) Or() *__TagsPost_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__TagsPost_Deleter) Id_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) Id_Ins(ins ...int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) Id_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) Id_Eq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_NotEq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) TagId_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) TagId_Ins(ins ...int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) TagId_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) TagId_Eq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_NotEq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) PostId_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) PostId_Ins(ins ...int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) PostId_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) PostId_Eq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_NotEq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) TypeId_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) TypeId_Ins(ins ...int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) TypeId_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) TypeId_Eq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_NotEq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) CreatedTime_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) CreatedTime_Ins(ins ...int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) CreatedTime_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) CreatedTime_Eq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_NotEq(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__TagsPost_Updater) Or() *__TagsPost_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__TagsPost_Updater) Id_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) Id_Ins(ins ...int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) Id_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) Id_Eq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_NotEq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) TagId_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) TagId_Ins(ins ...int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) TagId_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) TagId_Eq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_NotEq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) PostId_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) PostId_Ins(ins ...int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) PostId_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) PostId_Eq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_NotEq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) TypeId_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) TypeId_Ins(ins ...int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) TypeId_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) TypeId_Eq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_NotEq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) CreatedTime_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) CreatedTime_Ins(ins ...int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) CreatedTime_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) CreatedTime_Eq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_NotEq(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__TagsPost_Selector) Or() *__TagsPost_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__TagsPost_Selector) Id_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) Id_Ins(ins ...int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) Id_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) Id_Eq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_NotEq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) TagId_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) TagId_Ins(ins ...int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) TagId_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) TagId_Eq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_NotEq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) PostId_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) PostId_Ins(ins ...int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) PostId_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) PostId_Eq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_NotEq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) TypeId_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) TypeId_Ins(ins ...int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) TypeId_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) TypeId_Eq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_NotEq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) CreatedTime_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) CreatedTime_Ins(ins ...int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) CreatedTime_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) CreatedTime_Eq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_NotEq(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__TagsPost_Updater) Id(newVal int) *__TagsPost_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) Id_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TagsPost_Updater) TagId(newVal int) *__TagsPost_Updater {
	u.updates[" TagId = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) TagId_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" TagId = TagId+? "] = count
	}

	if count < 0 {
		u.updates[" TagId = TagId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TagsPost_Updater) PostId(newVal int) *__TagsPost_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) PostId_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TagsPost_Updater) TypeId(newVal int) *__TagsPost_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) TypeId_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" TypeId = TypeId+? "] = count
	}

	if count < 0 {
		u.updates[" TypeId = TypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TagsPost_Updater) CreatedTime(newVal int) *__TagsPost_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) CreatedTime_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__TagsPost_Selector) OrderBy_Id_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_Id_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__TagsPost_Selector) Select_Id() *__TagsPost_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__TagsPost_Selector) OrderBy_TagId_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TagId DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_TagId_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TagId ASC "
	return u
}

func (u *__TagsPost_Selector) Select_TagId() *__TagsPost_Selector {
	u.selectCol = "TagId"
	return u
}

func (u *__TagsPost_Selector) OrderBy_PostId_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_PostId_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__TagsPost_Selector) Select_PostId() *__TagsPost_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__TagsPost_Selector) OrderBy_TypeId_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_TypeId_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__TagsPost_Selector) Select_TypeId() *__TagsPost_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__TagsPost_Selector) OrderBy_CreatedTime_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_CreatedTime_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__TagsPost_Selector) Select_CreatedTime() *__TagsPost_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__TagsPost_Selector) Limit(num int) *__TagsPost_Selector {
	u.limit = num
	return u
}

func (u *__TagsPost_Selector) Offset(num int) *__TagsPost_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__TagsPost_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.tags_posts"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__TagsPost_Selector) GetRow(db *sqlx.DB) (*TagsPost, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &TagsPost{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnTagsPost_LoadOne(row)

	return row, nil
}

func (u *__TagsPost_Selector) GetRows(db *sqlx.DB) ([]*TagsPost, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*TagsPost
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnTagsPost_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__TagsPost_Selector) GetRows2(db *sqlx.DB) ([]TagsPost, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*TagsPost
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnTagsPost_LoadMany(rows)

	rows2 := make([]TagsPost, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__TagsPost_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__TagsPost_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__TagsPost_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__TagsPost_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__TagsPost_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.tags_posts SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__TagsPost_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.tags_posts WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  TagsPost ////////////////
func MassInsert_TagsPost(rows []TagsPost, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.tags_posts (" +
		"TagId, PostId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.TagId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_TagsPost(rows []TagsPost, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.tags_posts (" +
		"TagId, PostId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.TagId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// TagsPostByTagIdPostId retrieves a row from 'ms.tags_posts' as a TagsPost.
//
// Generated from index 'TagId'.
func TagsPostByTagIdPostId(db XODB, tagId int, postId int) (*TagsPost, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, TagId, PostId, TypeId, CreatedTime ` +
		`FROM ms.tags_posts ` +
		`WHERE TagId = ? AND PostId = ?`

	// run query
	XOLog(sqlstr, tagId, postId)
	tp := TagsPost{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tagId, postId).Scan(&tp.Id, &tp.TagId, &tp.PostId, &tp.TypeId, &tp.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnTagsPost_LoadOne(&tp)

	return &tp, nil
}

// TagsPostById retrieves a row from 'ms.tags_posts' as a TagsPost.
//
// Generated from index 'tags_posts_Id_pkey'.
func TagsPostById(db XODB, id int) (*TagsPost, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, TagId, PostId, TypeId, CreatedTime ` +
		`FROM ms.tags_posts ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	tp := TagsPost{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&tp.Id, &tp.TagId, &tp.PostId, &tp.TypeId, &tp.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnTagsPost_LoadOne(&tp)

	return &tp, nil
}
