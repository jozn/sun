// Package models contains the types for schema 'ms'.
package models

import (
	"ms/sun/base"
	"strconv"
)

// GENERATED BY XO. DO NOT EDIT.

//Comment Events
func GetCommentById__(Id int) (*Comment, bool) {
	obj, err := Cacher.Get("Comment:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = CommentById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//FollowingList Events
func GetFollowingListByUserId__(UserId int) (*FollowingList, bool) {
	obj, err := Cacher.Get("FollowingList:" + strconv.Itoa(UserId))
	if err == nil {
		return obj, true
	}
	obj, err = FollowingListByUserId(base.DB, UserId)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//FollowingListMember Events
func GetFollowingListMemberById__(Id int) (*FollowingListMember, bool) {
	obj, err := Cacher.Get("FollowingListMember:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = FollowingListMemberById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//FollowingListMemberHistory Events
func GetFollowingListMemberHistoryById__(Id int) (*FollowingListMemberHistory, bool) {
	obj, err := Cacher.Get("FollowingListMemberHistory:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = FollowingListMemberHistoryById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//Like Events
func GetLikeById__(Id int) (*Like, bool) {
	obj, err := Cacher.Get("Like:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = LikeById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//Media Events
func GetMediaById__(Id int) (*Media, bool) {
	obj, err := Cacher.Get("Media:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = MediaById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//Message Events
func GetMessageById__(Id int) (*Message, bool) {
	obj, err := Cacher.Get("Message:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = MessageById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//MsgDeletedFromServer Events
func GetMsgDeletedFromServerById__(Id int) (*MsgDeletedFromServer, bool) {
	obj, err := Cacher.Get("MsgDeletedFromServer:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = MsgDeletedFromServerById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//MsgReceivedToPeer Events
func GetMsgReceivedToPeerById__(Id int) (*MsgReceivedToPeer, bool) {
	obj, err := Cacher.Get("MsgReceivedToPeer:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = MsgReceivedToPeerById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//MsgSeenByPeer Events
func GetMsgSeenByPeerById__(Id int) (*MsgSeenByPeer, bool) {
	obj, err := Cacher.Get("MsgSeenByPeer:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = MsgSeenByPeerById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//Notification Events
func GetNotificationById__(Id int) (*Notification, bool) {
	obj, err := Cacher.Get("Notification:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = NotificationById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//NotificationRemoved Events
func GetNotificationRemovedByNotificationId__(NotificationId int) (*NotificationRemoved, bool) {
	obj, err := Cacher.Get("NotificationRemoved:" + strconv.Itoa(NotificationId))
	if err == nil {
		return obj, true
	}
	obj, err = NotificationRemovedByNotificationId(base.DB, NotificationId)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//PhoneContact Events
func GetPhoneContactById__(Id int) (*PhoneContact, bool) {
	obj, err := Cacher.Get("PhoneContact:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = PhoneContactById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//Post Events
func GetPostById__(Id int) (*Post, bool) {
	obj, err := Cacher.Get("Post:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = PostById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//RecommendUser Events
func GetRecommendUserById__(Id int) (*RecommendUser, bool) {
	obj, err := Cacher.Get("RecommendUser:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = RecommendUserById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//SearchClicked Events
func GetSearchClickedById__(Id int) (*SearchClicked, bool) {
	obj, err := Cacher.Get("SearchClicked:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = SearchClickedById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//Session Events
func GetSessionBySessionUuid__(SessionUuid int) (*Session, bool) {
	obj, err := Cacher.Get("Session:" + strconv.Itoa(SessionUuid))
	if err == nil {
		return obj, true
	}
	obj, err = SessionBySessionUuid(base.DB, SessionUuid)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//Tag Events
func GetTagById__(Id int) (*Tag, bool) {
	obj, err := Cacher.Get("Tag:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = TagById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//TagsPost Events
func GetTagsPostById__(Id int) (*TagsPost, bool) {
	obj, err := Cacher.Get("TagsPost:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = TagsPostById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//User Events
func GetUserById__(Id int) (*User, bool) {
	obj, err := Cacher.Get("User:" + strconv.Itoa(Id))
	if err == nil {
		return obj, true
	}
	obj, err = UserById(base.DB, Id)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//UserMetaInfo Events
func GetUserMetaInfoByUserId__(UserId int) (*UserMetaInfo, bool) {
	obj, err := Cacher.Get("UserMetaInfo:" + strconv.Itoa(UserId))
	if err == nil {
		return obj, true
	}
	obj, err = UserMetaInfoByUserId(base.DB, UserId)
	if err == nil {
		return obj, true
	}
	return nil, true
}

//UserPassword Events
func GetUserPasswordByUserId__(UserId int) (*UserPassword, bool) {
	obj, err := Cacher.Get("UserPassword:" + strconv.Itoa(UserId))
	if err == nil {
		return obj, true
	}
	obj, err = UserPasswordByUserId(base.DB, UserId)
	if err == nil {
		return obj, true
	}
	return nil, true
}
