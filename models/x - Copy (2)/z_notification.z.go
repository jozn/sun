// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// Notification represents a row from 'ms.notification'.

// Manualy copy this to project
type Notification__ struct {
	Id           int `json:"Id"`           // Id -
	ForUserId    int `json:"ForUserId"`    // ForUserId -
	ActorUserId  int `json:"ActorUserId"`  // ActorUserId -
	ActionTypeId int `json:"ActionTypeId"` // ActionTypeId -
	ObjectTypeId int `json:"ObjectTypeId"` // ObjectTypeId -
	RowId        int `json:"RowId"`        // RowId -
	RootId       int `json:"RootId"`       // RootId -
	RefId        int `json:"RefId"`        // RefId -
	SeenStatus   int `json:"SeenStatus"`   // SeenStatus -
	CreatedTime  int `json:"CreatedTime"`  // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Notification exists in the database.
func (n *Notification) Exists() bool {
	return n._exists
}

// Deleted provides information if the Notification has been deleted from the database.
func (n *Notification) Deleted() bool {
	return n._deleted
}

// Insert inserts the Notification to the database.
func (n *Notification) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.notification (` +
		`ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, RowId, RootId, RefId, SeenStatus, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.RowId, n.RootId, n.RefId, n.SeenStatus, n.CreatedTime)
	res, err := db.Exec(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.RowId, n.RootId, n.RefId, n.SeenStatus, n.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	n.Id = int(id)
	n._exists = true

	OnNotification_AfterInsert(n)

	return nil
}

// Insert inserts the Notification to the database.
func (n *Notification) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.notification (` +
		`ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, RowId, RootId, RefId, SeenStatus, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.RowId, n.RootId, n.RefId, n.SeenStatus, n.CreatedTime)
	res, err := db.Exec(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.RowId, n.RootId, n.RefId, n.SeenStatus, n.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	n.Id = int(id)
	n._exists = true

	OnNotification_AfterInsert(n)

	return nil
}

// Update updates the Notification in the database.
func (n *Notification) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if n._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.notification SET ` +
		`ForUserId = ?, ActorUserId = ?, ActionTypeId = ?, ObjectTypeId = ?, RowId = ?, RootId = ?, RefId = ?, SeenStatus = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.RowId, n.RootId, n.RefId, n.SeenStatus, n.CreatedTime, n.Id)
	_, err = db.Exec(sqlstr, n.ForUserId, n.ActorUserId, n.ActionTypeId, n.ObjectTypeId, n.RowId, n.RootId, n.RefId, n.SeenStatus, n.CreatedTime, n.Id)

	XOLogErr(err)
	OnNotification_AfterUpdate(n)

	return err
}

// Save saves the Notification to the database.
func (n *Notification) Save(db XODB) error {
	if n.Exists() {
		return n.Update(db)
	}

	return n.Replace(db)
}

// Delete deletes the Notification from the database.
func (n *Notification) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return nil
	}

	// if deleted, bail
	if n._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.notification WHERE Id = ?`

	// run query
	XOLog(sqlstr, n.Id)
	_, err = db.Exec(sqlstr, n.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	n._deleted = true

	OnNotification_AfterDelete(n)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Notification_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Notification_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Notification_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewNotification_Deleter() *__Notification_Deleter {
	d := __Notification_Deleter{whereSep: " AND "}
	return &d
}

func NewNotification_Updater() *__Notification_Updater {
	u := __Notification_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewNotification_Selector() *__Notification_Selector {
	u := __Notification_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Notification_Deleter) Or() *__Notification_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Notification_Deleter) Id_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) Id_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) Id_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) Id_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ForUserId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ForUserId_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ForUserId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ForUserId_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ActorUserId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ActorUserId_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ActorUserId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ActorUserId_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ActionTypeId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ActionTypeId_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ActionTypeId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ActionTypeId_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ObjectTypeId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ObjectTypeId_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ObjectTypeId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ObjectTypeId_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) RowId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) RowId_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) RowId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) RowId_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RowId_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RowId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RowId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RowId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RowId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) RootId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RootId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) RootId_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RootId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) RootId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RootId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) RootId_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RootId_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RootId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RootId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RootId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RootId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) RefId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RefId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) RefId_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RefId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) RefId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RefId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) RefId_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RefId_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RefId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RefId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RefId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) RefId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) SeenStatus_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) SeenStatus_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) SeenStatus_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) SeenStatus_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) SeenStatus_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) CreatedTime_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) CreatedTime_Ins(ins ...int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) CreatedTime_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) CreatedTime_Eq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_NotEq(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) CreatedTime_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Notification_Updater) Or() *__Notification_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Notification_Updater) Id_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) Id_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) Id_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) Id_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ForUserId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ForUserId_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ForUserId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ForUserId_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ActorUserId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ActorUserId_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ActorUserId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ActorUserId_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ActionTypeId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ActionTypeId_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ActionTypeId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ActionTypeId_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ObjectTypeId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ObjectTypeId_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ObjectTypeId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ObjectTypeId_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) RowId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) RowId_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) RowId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) RowId_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RowId_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RowId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RowId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RowId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RowId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) RootId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RootId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) RootId_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RootId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) RootId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RootId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) RootId_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RootId_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RootId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RootId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RootId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RootId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) RefId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RefId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) RefId_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RefId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) RefId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RefId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) RefId_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RefId_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RefId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RefId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RefId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) RefId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) SeenStatus_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) SeenStatus_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) SeenStatus_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) SeenStatus_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) SeenStatus_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) CreatedTime_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) CreatedTime_Ins(ins ...int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) CreatedTime_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) CreatedTime_Eq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_NotEq(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) CreatedTime_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Notification_Selector) Or() *__Notification_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Notification_Selector) Id_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) Id_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) Id_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) Id_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ForUserId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ForUserId_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ForUserId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ForUserId_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ActorUserId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ActorUserId_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ActorUserId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ActorUserId_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ActionTypeId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ActionTypeId_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ActionTypeId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ActionTypeId_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ObjectTypeId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ObjectTypeId_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ObjectTypeId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ObjectTypeId_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) RowId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) RowId_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) RowId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) RowId_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RowId_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RowId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RowId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RowId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RowId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) RootId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RootId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) RootId_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RootId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) RootId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RootId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) RootId_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RootId_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RootId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RootId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RootId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RootId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RootId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) RefId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RefId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) RefId_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RefId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) RefId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RefId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) RefId_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RefId_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RefId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RefId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RefId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) RefId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RefId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) SeenStatus_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) SeenStatus_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) SeenStatus_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) SeenStatus_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) SeenStatus_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) CreatedTime_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) CreatedTime_Ins(ins ...int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) CreatedTime_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) CreatedTime_Eq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_NotEq(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) CreatedTime_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Notification_Updater) Id(newVal int) *__Notification_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Notification_Updater) Id_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) ForUserId(newVal int) *__Notification_Updater {
	u.updates[" ForUserId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) ForUserId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" ForUserId = ForUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ForUserId = ForUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) ActorUserId(newVal int) *__Notification_Updater {
	u.updates[" ActorUserId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) ActorUserId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" ActorUserId = ActorUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ActorUserId = ActorUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) ActionTypeId(newVal int) *__Notification_Updater {
	u.updates[" ActionTypeId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) ActionTypeId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" ActionTypeId = ActionTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" ActionTypeId = ActionTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) ObjectTypeId(newVal int) *__Notification_Updater {
	u.updates[" ObjectTypeId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) ObjectTypeId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" ObjectTypeId = ObjectTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" ObjectTypeId = ObjectTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) RowId(newVal int) *__Notification_Updater {
	u.updates[" RowId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) RowId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" RowId = RowId+? "] = count
	}

	if count < 0 {
		u.updates[" RowId = RowId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) RootId(newVal int) *__Notification_Updater {
	u.updates[" RootId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) RootId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" RootId = RootId+? "] = count
	}

	if count < 0 {
		u.updates[" RootId = RootId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) RefId(newVal int) *__Notification_Updater {
	u.updates[" RefId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) RefId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" RefId = RefId+? "] = count
	}

	if count < 0 {
		u.updates[" RefId = RefId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) SeenStatus(newVal int) *__Notification_Updater {
	u.updates[" SeenStatus = ? "] = newVal
	return u
}

func (u *__Notification_Updater) SeenStatus_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" SeenStatus = SeenStatus+? "] = count
	}

	if count < 0 {
		u.updates[" SeenStatus = SeenStatus-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) CreatedTime(newVal int) *__Notification_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Notification_Updater) CreatedTime_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Notification_Selector) OrderBy_Id_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_Id_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Notification_Selector) Select_Id() *__Notification_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Notification_Selector) OrderBy_ForUserId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ForUserId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ForUserId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ForUserId ASC "
	return u
}

func (u *__Notification_Selector) Select_ForUserId() *__Notification_Selector {
	u.selectCol = "ForUserId"
	return u
}

func (u *__Notification_Selector) OrderBy_ActorUserId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActorUserId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ActorUserId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActorUserId ASC "
	return u
}

func (u *__Notification_Selector) Select_ActorUserId() *__Notification_Selector {
	u.selectCol = "ActorUserId"
	return u
}

func (u *__Notification_Selector) OrderBy_ActionTypeId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActionTypeId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ActionTypeId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActionTypeId ASC "
	return u
}

func (u *__Notification_Selector) Select_ActionTypeId() *__Notification_Selector {
	u.selectCol = "ActionTypeId"
	return u
}

func (u *__Notification_Selector) OrderBy_ObjectTypeId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ObjectTypeId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ObjectTypeId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ObjectTypeId ASC "
	return u
}

func (u *__Notification_Selector) Select_ObjectTypeId() *__Notification_Selector {
	u.selectCol = "ObjectTypeId"
	return u
}

func (u *__Notification_Selector) OrderBy_RowId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY RowId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_RowId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY RowId ASC "
	return u
}

func (u *__Notification_Selector) Select_RowId() *__Notification_Selector {
	u.selectCol = "RowId"
	return u
}

func (u *__Notification_Selector) OrderBy_RootId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY RootId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_RootId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY RootId ASC "
	return u
}

func (u *__Notification_Selector) Select_RootId() *__Notification_Selector {
	u.selectCol = "RootId"
	return u
}

func (u *__Notification_Selector) OrderBy_RefId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY RefId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_RefId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY RefId ASC "
	return u
}

func (u *__Notification_Selector) Select_RefId() *__Notification_Selector {
	u.selectCol = "RefId"
	return u
}

func (u *__Notification_Selector) OrderBy_SeenStatus_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY SeenStatus DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_SeenStatus_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY SeenStatus ASC "
	return u
}

func (u *__Notification_Selector) Select_SeenStatus() *__Notification_Selector {
	u.selectCol = "SeenStatus"
	return u
}

func (u *__Notification_Selector) OrderBy_CreatedTime_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_CreatedTime_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Notification_Selector) Select_CreatedTime() *__Notification_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Notification_Selector) Limit(num int) *__Notification_Selector {
	u.limit = num
	return u
}

func (u *__Notification_Selector) Offset(num int) *__Notification_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Notification_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.notification"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Notification_Selector) GetRow(db *sqlx.DB) (*Notification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Notification{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnNotification_LoadOne(row)

	return row, nil
}

func (u *__Notification_Selector) GetRows(db *sqlx.DB) ([]*Notification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Notification
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnNotification_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Notification_Selector) GetRows2(db *sqlx.DB) ([]Notification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Notification
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnNotification_LoadMany(rows)

	rows2 := make([]Notification, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Notification_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__Notification_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Notification_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Notification_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Notification_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.notification SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__Notification_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.notification WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Notification ////////////////
func MassInsert_Notification(rows []Notification, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.notification (" +
		"ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, RowId, RootId, RefId, SeenStatus, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.ActionTypeId)
		vals = append(vals, row.ObjectTypeId)
		vals = append(vals, row.RowId)
		vals = append(vals, row.RootId)
		vals = append(vals, row.RefId)
		vals = append(vals, row.SeenStatus)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_Notification(rows []Notification, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.notification (" +
		"ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, RowId, RootId, RefId, SeenStatus, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.ActionTypeId)
		vals = append(vals, row.ObjectTypeId)
		vals = append(vals, row.RowId)
		vals = append(vals, row.RootId)
		vals = append(vals, row.RefId)
		vals = append(vals, row.SeenStatus)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

// NotificationByForUserIdId retrieves a row from 'ms.notification' as a Notification.
//
// Generated from index 'ForUserId'.
func NotificationByForUserIdId(db XODB, forUserId int, id int) (*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, RowId, RootId, RefId, SeenStatus, CreatedTime ` +
		`FROM ms.notification ` +
		`WHERE ForUserId = ? AND Id = ?`

	// run query
	XOLog(sqlstr, forUserId, id)
	n := Notification{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, forUserId, id).Scan(&n.Id, &n.ForUserId, &n.ActorUserId, &n.ActionTypeId, &n.ObjectTypeId, &n.RowId, &n.RootId, &n.RefId, &n.SeenStatus, &n.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnNotification_LoadOne(&n)

	return &n, nil
}

// NotificationsByRowId retrieves a row from 'ms.notification' as a Notification.
//
// Generated from index 'TargetId'.
func NotificationsByRowId(db XODB, rowId int) ([]*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, RowId, RootId, RefId, SeenStatus, CreatedTime ` +
		`FROM ms.notification ` +
		`WHERE RowId = ?`

	// run query
	XOLog(sqlstr, rowId)
	q, err := db.Query(sqlstr, rowId)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Notification{}
	for q.Next() {
		n := Notification{
			_exists: true,
		}

		// scan
		err = q.Scan(&n.Id, &n.ForUserId, &n.ActorUserId, &n.ActionTypeId, &n.ObjectTypeId, &n.RowId, &n.RootId, &n.RefId, &n.SeenStatus, &n.CreatedTime)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &n)
	}

	OnNotification_LoadMany(res)

	return res, nil
}

// NotificationById retrieves a row from 'ms.notification' as a Notification.
//
// Generated from index 'notification_Id_pkey'.
func NotificationById(db XODB, id int) (*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, RowId, RootId, RefId, SeenStatus, CreatedTime ` +
		`FROM ms.notification ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	n := Notification{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&n.Id, &n.ForUserId, &n.ActorUserId, &n.ActionTypeId, &n.ObjectTypeId, &n.RowId, &n.RootId, &n.RefId, &n.SeenStatus, &n.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnNotification_LoadOne(&n)

	return &n, nil
}
