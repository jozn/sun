// Package models contains the types for schema 'ms'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// User represents a row from 'ms.user'.

// Manualy copy this to project
type User__ struct {
	Id                   int    `json:"Id"`                   // Id -
	UserName             string `json:"UserName"`             // UserName -
	FirstName            string `json:"FirstName"`            // FirstName -
	LastName             string `json:"LastName"`             // LastName -
	About                string `json:"About"`                // About -
	FullName             string `json:"FullName"`             // FullName -
	AvatarUrl            string `json:"AvatarUrl"`            // AvatarUrl -
	PrivacyProfile       int    `json:"PrivacyProfile"`       // PrivacyProfile -
	Phone                string `json:"Phone"`                // Phone -
	Email                string `json:"Email"`                // Email -
	IsDeleted            int    `json:"IsDeleted"`            // IsDeleted -
	PasswordHash         string `json:"PasswordHash"`         // PasswordHash -
	PasswordSalt         string `json:"PasswordSalt"`         // PasswordSalt -
	FollowersCount       int    `json:"FollowersCount"`       // FollowersCount -
	FollowingCount       int    `json:"FollowingCount"`       // FollowingCount -
	PostsCount           int    `json:"PostsCount"`           // PostsCount -
	MediaCount           int    `json:"MediaCount"`           // MediaCount -
	LikesCount           int    `json:"LikesCount"`           // LikesCount -
	ResharedCount        int    `json:"ResharedCount"`        // ResharedCount -
	LastActionTime       int    `json:"LastActionTime"`       // LastActionTime -
	LastPostTime         int    `json:"LastPostTime"`         // LastPostTime -
	PrimaryFollowingList int    `json:"PrimaryFollowingList"` // PrimaryFollowingList -
	CreatedTime          int    `json:"CreatedTime"`          // CreatedTime -
	UpdatedTime          int    `json:"UpdatedTime"`          // UpdatedTime -
	SessionUuid          string `json:"SessionUuid"`          // SessionUuid -
	DeviceUuid           string `json:"DeviceUuid"`           // DeviceUuid -
	LastWifiMacAddress   string `json:"LastWifiMacAddress"`   // LastWifiMacAddress -
	LastNetworkType      string `json:"LastNetworkType"`      // LastNetworkType -
	AppVersion           int    `json:"AppVersion"`           // AppVersion -
	LastActivityTime     int    `json:"LastActivityTime"`     // LastActivityTime -
	LastLoginTime        int    `json:"LastLoginTime"`        // LastLoginTime -
	LastIpAddress        string `json:"LastIpAddress"`        // LastIpAddress -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.user (` +
		`UserName, FirstName, LastName, About, FullName, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress)
	res, err := db.Exec(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	u.Id = int(id)
	u._exists = true

	OnUser_AfterInsert(u)

	return nil
}

// Insert inserts the User to the database.
func (u *User) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.user (` +
		`UserName, FirstName, LastName, About, FullName, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress)
	res, err := db.Exec(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	u.Id = int(id)
	u._exists = true

	OnUser_AfterInsert(u)

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.user SET ` +
		`UserName = ?, FirstName = ?, LastName = ?, About = ?, FullName = ?, AvatarUrl = ?, PrivacyProfile = ?, Phone = ?, Email = ?, IsDeleted = ?, PasswordHash = ?, PasswordSalt = ?, FollowersCount = ?, FollowingCount = ?, PostsCount = ?, MediaCount = ?, LikesCount = ?, ResharedCount = ?, LastActionTime = ?, LastPostTime = ?, PrimaryFollowingList = ?, CreatedTime = ?, UpdatedTime = ?, SessionUuid = ?, DeviceUuid = ?, LastWifiMacAddress = ?, LastNetworkType = ?, AppVersion = ?, LastActivityTime = ?, LastLoginTime = ?, LastIpAddress = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress, u.Id)
	_, err = db.Exec(sqlstr, u.UserName, u.FirstName, u.LastName, u.About, u.FullName, u.AvatarUrl, u.PrivacyProfile, u.Phone, u.Email, u.IsDeleted, u.PasswordHash, u.PasswordSalt, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedTime, u.UpdatedTime, u.SessionUuid, u.DeviceUuid, u.LastWifiMacAddress, u.LastNetworkType, u.AppVersion, u.LastActivityTime, u.LastLoginTime, u.LastIpAddress, u.Id)

	XOLogErr(err)
	OnUser_AfterUpdate(u)

	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Replace(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.user WHERE Id = ?`

	// run query
	XOLog(sqlstr, u.Id)
	_, err = db.Exec(sqlstr, u.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	u._deleted = true

	OnUser_AfterDelete(u)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __User_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __User_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __User_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewUser_Deleter() *__User_Deleter {
	d := __User_Deleter{whereSep: " AND "}
	return &d
}

func NewUser_Updater() *__User_Updater {
	u := __User_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewUser_Selector() *__User_Selector {
	u := __User_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__User_Deleter) Or() *__User_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__User_Deleter) Id_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Id_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Id_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Id_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PrivacyProfile_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PrivacyProfile_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PrivacyProfile_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PrivacyProfile_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrivacyProfile_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) IsDeleted_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) IsDeleted_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) IsDeleted_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) IsDeleted_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) IsDeleted_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FollowersCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowersCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowersCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FollowersCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FollowingCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowingCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowingCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FollowingCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PostsCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PostsCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PostsCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PostsCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) MediaCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) MediaCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) MediaCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) MediaCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LikesCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LikesCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LikesCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LikesCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) ResharedCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) ResharedCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) ResharedCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) ResharedCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastActionTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActionTime_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActionTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastActionTime_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastPostTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastPostTime_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastPostTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastPostTime_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PrimaryFollowingList_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PrimaryFollowingList_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PrimaryFollowingList_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PrimaryFollowingList_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) CreatedTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) CreatedTime_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) CreatedTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) CreatedTime_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) UpdatedTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UpdatedTime_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UpdatedTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UpdatedTime_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) AppVersion_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) AppVersion_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) AppVersion_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) AppVersion_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AppVersion_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastActivityTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActivityTime_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActivityTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastActivityTime_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastLoginTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastLoginTime_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastLoginTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastLoginTime_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastLoginTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__User_Updater) Or() *__User_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__User_Updater) Id_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Id_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Id_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Id_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PrivacyProfile_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PrivacyProfile_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PrivacyProfile_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PrivacyProfile_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrivacyProfile_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) IsDeleted_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) IsDeleted_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) IsDeleted_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) IsDeleted_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) IsDeleted_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FollowersCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowersCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowersCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FollowersCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FollowingCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowingCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowingCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FollowingCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PostsCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PostsCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PostsCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PostsCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) MediaCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) MediaCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) MediaCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) MediaCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LikesCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LikesCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LikesCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LikesCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) ResharedCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) ResharedCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) ResharedCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) ResharedCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastActionTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActionTime_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActionTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastActionTime_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastPostTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastPostTime_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastPostTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastPostTime_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PrimaryFollowingList_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PrimaryFollowingList_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PrimaryFollowingList_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PrimaryFollowingList_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) CreatedTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) CreatedTime_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) CreatedTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) CreatedTime_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) UpdatedTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UpdatedTime_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UpdatedTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UpdatedTime_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) AppVersion_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) AppVersion_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) AppVersion_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) AppVersion_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AppVersion_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastActivityTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActivityTime_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActivityTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastActivityTime_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastLoginTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastLoginTime_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastLoginTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastLoginTime_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastLoginTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__User_Selector) Or() *__User_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__User_Selector) Id_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Id_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Id_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Id_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PrivacyProfile_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PrivacyProfile_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PrivacyProfile_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrivacyProfile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PrivacyProfile_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrivacyProfile_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrivacyProfile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) IsDeleted_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) IsDeleted_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) IsDeleted_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeleted NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) IsDeleted_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) IsDeleted_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeleted >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FollowersCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowersCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowersCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FollowersCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FollowingCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowingCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowingCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FollowingCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PostsCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PostsCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PostsCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PostsCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) MediaCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) MediaCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) MediaCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) MediaCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LikesCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LikesCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LikesCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LikesCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) ResharedCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) ResharedCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) ResharedCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) ResharedCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastActionTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActionTime_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActionTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastActionTime_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastPostTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastPostTime_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastPostTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastPostTime_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PrimaryFollowingList_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PrimaryFollowingList_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PrimaryFollowingList_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PrimaryFollowingList_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) CreatedTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) CreatedTime_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) CreatedTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) CreatedTime_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) UpdatedTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UpdatedTime_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UpdatedTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UpdatedTime_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) AppVersion_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) AppVersion_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) AppVersion_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppVersion NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) AppVersion_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AppVersion_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppVersion >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastActivityTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActivityTime_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActivityTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastActivityTime_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastLoginTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastLoginTime_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastLoginTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastLoginTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastLoginTime_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastLoginTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastLoginTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__User_Deleter) UserName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) UserName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UserName_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserName_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FirstName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FirstName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) FirstName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FirstName_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FirstName_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastName_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastName_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) About_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) About_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) About_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) About_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) About_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FullName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FullName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) FullName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FullName_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FullName_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) AvatarUrl_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) AvatarUrl_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) AvatarUrl_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) AvatarUrl_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AvatarUrl_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) Phone_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Phone_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) Phone_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Phone_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Phone_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) Email_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Email_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) Email_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Email_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Email_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PasswordHash_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PasswordHash_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) PasswordHash_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PasswordHash_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PasswordHash_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PasswordSalt_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PasswordSalt_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) PasswordSalt_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PasswordSalt_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PasswordSalt_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) SessionUuid_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) SessionUuid_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) SessionUuid_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) SessionUuid_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) SessionUuid_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) DeviceUuid_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) DeviceUuid_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) DeviceUuid_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) DeviceUuid_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) DeviceUuid_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastWifiMacAddress_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastWifiMacAddress_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastWifiMacAddress_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastWifiMacAddress_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastWifiMacAddress_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastNetworkType_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastNetworkType_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastNetworkType_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastNetworkType_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastNetworkType_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastIpAddress_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastIpAddress_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastIpAddress_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastIpAddress_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastIpAddress_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__User_Updater) UserName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) UserName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UserName_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserName_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FirstName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FirstName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) FirstName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FirstName_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FirstName_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastName_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastName_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) About_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) About_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) About_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) About_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) About_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FullName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FullName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) FullName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FullName_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FullName_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) AvatarUrl_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) AvatarUrl_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) AvatarUrl_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) AvatarUrl_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AvatarUrl_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) Phone_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Phone_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) Phone_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Phone_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Phone_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) Email_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Email_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) Email_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Email_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Email_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PasswordHash_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PasswordHash_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) PasswordHash_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PasswordHash_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PasswordHash_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PasswordSalt_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PasswordSalt_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) PasswordSalt_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PasswordSalt_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PasswordSalt_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) SessionUuid_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) SessionUuid_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) SessionUuid_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) SessionUuid_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) SessionUuid_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) DeviceUuid_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) DeviceUuid_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) DeviceUuid_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) DeviceUuid_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) DeviceUuid_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastWifiMacAddress_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastWifiMacAddress_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastWifiMacAddress_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastWifiMacAddress_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastWifiMacAddress_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastNetworkType_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastNetworkType_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastNetworkType_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastNetworkType_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastNetworkType_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastIpAddress_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastIpAddress_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastIpAddress_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastIpAddress_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastIpAddress_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__User_Selector) UserName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) UserName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UserName_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserName_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FirstName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FirstName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) FirstName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FirstName_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FirstName_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastName_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastName_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) About_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) About_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) About_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) About_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) About_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FullName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FullName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FullName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) FullName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FullName_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FullName_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FullName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) AvatarUrl_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) AvatarUrl_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarUrl NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) AvatarUrl_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) AvatarUrl_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AvatarUrl_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarUrl != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) Phone_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Phone_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) Phone_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Phone_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Phone_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) Email_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Email_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) Email_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Email_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Email_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PasswordHash_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PasswordHash_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) PasswordHash_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PasswordHash_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PasswordHash_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PasswordSalt_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PasswordSalt_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) PasswordSalt_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PasswordSalt_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PasswordSalt_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) SessionUuid_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) SessionUuid_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) SessionUuid_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) SessionUuid_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) SessionUuid_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) DeviceUuid_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) DeviceUuid_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) DeviceUuid_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) DeviceUuid_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) DeviceUuid_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastWifiMacAddress_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastWifiMacAddress_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastWifiMacAddress_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastWifiMacAddress_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastWifiMacAddress_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastNetworkType_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastNetworkType_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastNetworkType_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastNetworkType_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastNetworkType_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastIpAddress_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastIpAddress_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastIpAddress_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastIpAddress_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastIpAddress_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__User_Updater) Id(newVal int) *__User_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__User_Updater) Id_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) UserName(newVal string) *__User_Updater {
	u.updates[" UserName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) FirstName(newVal string) *__User_Updater {
	u.updates[" FirstName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) LastName(newVal string) *__User_Updater {
	u.updates[" LastName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) About(newVal string) *__User_Updater {
	u.updates[" About = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) FullName(newVal string) *__User_Updater {
	u.updates[" FullName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) AvatarUrl(newVal string) *__User_Updater {
	u.updates[" AvatarUrl = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) PrivacyProfile(newVal int) *__User_Updater {
	u.updates[" PrivacyProfile = ? "] = newVal
	return u
}

func (u *__User_Updater) PrivacyProfile_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" PrivacyProfile = PrivacyProfile+? "] = count
	}

	if count < 0 {
		u.updates[" PrivacyProfile = PrivacyProfile-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) Phone(newVal string) *__User_Updater {
	u.updates[" Phone = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) Email(newVal string) *__User_Updater {
	u.updates[" Email = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) IsDeleted(newVal int) *__User_Updater {
	u.updates[" IsDeleted = ? "] = newVal
	return u
}

func (u *__User_Updater) IsDeleted_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" IsDeleted = IsDeleted+? "] = count
	}

	if count < 0 {
		u.updates[" IsDeleted = IsDeleted-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) PasswordHash(newVal string) *__User_Updater {
	u.updates[" PasswordHash = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) PasswordSalt(newVal string) *__User_Updater {
	u.updates[" PasswordSalt = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) FollowersCount(newVal int) *__User_Updater {
	u.updates[" FollowersCount = ? "] = newVal
	return u
}

func (u *__User_Updater) FollowersCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" FollowersCount = FollowersCount+? "] = count
	}

	if count < 0 {
		u.updates[" FollowersCount = FollowersCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) FollowingCount(newVal int) *__User_Updater {
	u.updates[" FollowingCount = ? "] = newVal
	return u
}

func (u *__User_Updater) FollowingCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" FollowingCount = FollowingCount+? "] = count
	}

	if count < 0 {
		u.updates[" FollowingCount = FollowingCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) PostsCount(newVal int) *__User_Updater {
	u.updates[" PostsCount = ? "] = newVal
	return u
}

func (u *__User_Updater) PostsCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" PostsCount = PostsCount+? "] = count
	}

	if count < 0 {
		u.updates[" PostsCount = PostsCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) MediaCount(newVal int) *__User_Updater {
	u.updates[" MediaCount = ? "] = newVal
	return u
}

func (u *__User_Updater) MediaCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" MediaCount = MediaCount+? "] = count
	}

	if count < 0 {
		u.updates[" MediaCount = MediaCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) LikesCount(newVal int) *__User_Updater {
	u.updates[" LikesCount = ? "] = newVal
	return u
}

func (u *__User_Updater) LikesCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" LikesCount = LikesCount+? "] = count
	}

	if count < 0 {
		u.updates[" LikesCount = LikesCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) ResharedCount(newVal int) *__User_Updater {
	u.updates[" ResharedCount = ? "] = newVal
	return u
}

func (u *__User_Updater) ResharedCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" ResharedCount = ResharedCount+? "] = count
	}

	if count < 0 {
		u.updates[" ResharedCount = ResharedCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) LastActionTime(newVal int) *__User_Updater {
	u.updates[" LastActionTime = ? "] = newVal
	return u
}

func (u *__User_Updater) LastActionTime_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" LastActionTime = LastActionTime+? "] = count
	}

	if count < 0 {
		u.updates[" LastActionTime = LastActionTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) LastPostTime(newVal int) *__User_Updater {
	u.updates[" LastPostTime = ? "] = newVal
	return u
}

func (u *__User_Updater) LastPostTime_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" LastPostTime = LastPostTime+? "] = count
	}

	if count < 0 {
		u.updates[" LastPostTime = LastPostTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) PrimaryFollowingList(newVal int) *__User_Updater {
	u.updates[" PrimaryFollowingList = ? "] = newVal
	return u
}

func (u *__User_Updater) PrimaryFollowingList_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" PrimaryFollowingList = PrimaryFollowingList+? "] = count
	}

	if count < 0 {
		u.updates[" PrimaryFollowingList = PrimaryFollowingList-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) CreatedTime(newVal int) *__User_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__User_Updater) CreatedTime_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) UpdatedTime(newVal int) *__User_Updater {
	u.updates[" UpdatedTime = ? "] = newVal
	return u
}

func (u *__User_Updater) UpdatedTime_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" UpdatedTime = UpdatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" UpdatedTime = UpdatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) SessionUuid(newVal string) *__User_Updater {
	u.updates[" SessionUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) DeviceUuid(newVal string) *__User_Updater {
	u.updates[" DeviceUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) LastWifiMacAddress(newVal string) *__User_Updater {
	u.updates[" LastWifiMacAddress = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) LastNetworkType(newVal string) *__User_Updater {
	u.updates[" LastNetworkType = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) AppVersion(newVal int) *__User_Updater {
	u.updates[" AppVersion = ? "] = newVal
	return u
}

func (u *__User_Updater) AppVersion_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" AppVersion = AppVersion+? "] = count
	}

	if count < 0 {
		u.updates[" AppVersion = AppVersion-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) LastActivityTime(newVal int) *__User_Updater {
	u.updates[" LastActivityTime = ? "] = newVal
	return u
}

func (u *__User_Updater) LastActivityTime_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" LastActivityTime = LastActivityTime+? "] = count
	}

	if count < 0 {
		u.updates[" LastActivityTime = LastActivityTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) LastLoginTime(newVal int) *__User_Updater {
	u.updates[" LastLoginTime = ? "] = newVal
	return u
}

func (u *__User_Updater) LastLoginTime_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" LastLoginTime = LastLoginTime+? "] = count
	}

	if count < 0 {
		u.updates[" LastLoginTime = LastLoginTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) LastIpAddress(newVal string) *__User_Updater {
	u.updates[" LastIpAddress = ? "] = newVal
	return u
}

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__User_Selector) OrderBy_Id_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__User_Selector) OrderBy_Id_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__User_Selector) Select_Id() *__User_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__User_Selector) OrderBy_UserName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UserName DESC "
	return u
}

func (u *__User_Selector) OrderBy_UserName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UserName ASC "
	return u
}

func (u *__User_Selector) Select_UserName() *__User_Selector {
	u.selectCol = "UserName"
	return u
}

func (u *__User_Selector) OrderBy_FirstName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FirstName DESC "
	return u
}

func (u *__User_Selector) OrderBy_FirstName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FirstName ASC "
	return u
}

func (u *__User_Selector) Select_FirstName() *__User_Selector {
	u.selectCol = "FirstName"
	return u
}

func (u *__User_Selector) OrderBy_LastName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastName DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastName ASC "
	return u
}

func (u *__User_Selector) Select_LastName() *__User_Selector {
	u.selectCol = "LastName"
	return u
}

func (u *__User_Selector) OrderBy_About_Desc() *__User_Selector {
	u.orderBy = " ORDER BY About DESC "
	return u
}

func (u *__User_Selector) OrderBy_About_Asc() *__User_Selector {
	u.orderBy = " ORDER BY About ASC "
	return u
}

func (u *__User_Selector) Select_About() *__User_Selector {
	u.selectCol = "About"
	return u
}

func (u *__User_Selector) OrderBy_FullName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FullName DESC "
	return u
}

func (u *__User_Selector) OrderBy_FullName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FullName ASC "
	return u
}

func (u *__User_Selector) Select_FullName() *__User_Selector {
	u.selectCol = "FullName"
	return u
}

func (u *__User_Selector) OrderBy_AvatarUrl_Desc() *__User_Selector {
	u.orderBy = " ORDER BY AvatarUrl DESC "
	return u
}

func (u *__User_Selector) OrderBy_AvatarUrl_Asc() *__User_Selector {
	u.orderBy = " ORDER BY AvatarUrl ASC "
	return u
}

func (u *__User_Selector) Select_AvatarUrl() *__User_Selector {
	u.selectCol = "AvatarUrl"
	return u
}

func (u *__User_Selector) OrderBy_PrivacyProfile_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PrivacyProfile DESC "
	return u
}

func (u *__User_Selector) OrderBy_PrivacyProfile_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PrivacyProfile ASC "
	return u
}

func (u *__User_Selector) Select_PrivacyProfile() *__User_Selector {
	u.selectCol = "PrivacyProfile"
	return u
}

func (u *__User_Selector) OrderBy_Phone_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Phone DESC "
	return u
}

func (u *__User_Selector) OrderBy_Phone_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Phone ASC "
	return u
}

func (u *__User_Selector) Select_Phone() *__User_Selector {
	u.selectCol = "Phone"
	return u
}

func (u *__User_Selector) OrderBy_Email_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Email DESC "
	return u
}

func (u *__User_Selector) OrderBy_Email_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Email ASC "
	return u
}

func (u *__User_Selector) Select_Email() *__User_Selector {
	u.selectCol = "Email"
	return u
}

func (u *__User_Selector) OrderBy_IsDeleted_Desc() *__User_Selector {
	u.orderBy = " ORDER BY IsDeleted DESC "
	return u
}

func (u *__User_Selector) OrderBy_IsDeleted_Asc() *__User_Selector {
	u.orderBy = " ORDER BY IsDeleted ASC "
	return u
}

func (u *__User_Selector) Select_IsDeleted() *__User_Selector {
	u.selectCol = "IsDeleted"
	return u
}

func (u *__User_Selector) OrderBy_PasswordHash_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordHash DESC "
	return u
}

func (u *__User_Selector) OrderBy_PasswordHash_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordHash ASC "
	return u
}

func (u *__User_Selector) Select_PasswordHash() *__User_Selector {
	u.selectCol = "PasswordHash"
	return u
}

func (u *__User_Selector) OrderBy_PasswordSalt_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordSalt DESC "
	return u
}

func (u *__User_Selector) OrderBy_PasswordSalt_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordSalt ASC "
	return u
}

func (u *__User_Selector) Select_PasswordSalt() *__User_Selector {
	u.selectCol = "PasswordSalt"
	return u
}

func (u *__User_Selector) OrderBy_FollowersCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FollowersCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_FollowersCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FollowersCount ASC "
	return u
}

func (u *__User_Selector) Select_FollowersCount() *__User_Selector {
	u.selectCol = "FollowersCount"
	return u
}

func (u *__User_Selector) OrderBy_FollowingCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FollowingCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_FollowingCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FollowingCount ASC "
	return u
}

func (u *__User_Selector) Select_FollowingCount() *__User_Selector {
	u.selectCol = "FollowingCount"
	return u
}

func (u *__User_Selector) OrderBy_PostsCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PostsCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_PostsCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PostsCount ASC "
	return u
}

func (u *__User_Selector) Select_PostsCount() *__User_Selector {
	u.selectCol = "PostsCount"
	return u
}

func (u *__User_Selector) OrderBy_MediaCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY MediaCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_MediaCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY MediaCount ASC "
	return u
}

func (u *__User_Selector) Select_MediaCount() *__User_Selector {
	u.selectCol = "MediaCount"
	return u
}

func (u *__User_Selector) OrderBy_LikesCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LikesCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_LikesCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LikesCount ASC "
	return u
}

func (u *__User_Selector) Select_LikesCount() *__User_Selector {
	u.selectCol = "LikesCount"
	return u
}

func (u *__User_Selector) OrderBy_ResharedCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY ResharedCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_ResharedCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY ResharedCount ASC "
	return u
}

func (u *__User_Selector) Select_ResharedCount() *__User_Selector {
	u.selectCol = "ResharedCount"
	return u
}

func (u *__User_Selector) OrderBy_LastActionTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastActionTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastActionTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastActionTime ASC "
	return u
}

func (u *__User_Selector) Select_LastActionTime() *__User_Selector {
	u.selectCol = "LastActionTime"
	return u
}

func (u *__User_Selector) OrderBy_LastPostTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastPostTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastPostTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastPostTime ASC "
	return u
}

func (u *__User_Selector) Select_LastPostTime() *__User_Selector {
	u.selectCol = "LastPostTime"
	return u
}

func (u *__User_Selector) OrderBy_PrimaryFollowingList_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PrimaryFollowingList DESC "
	return u
}

func (u *__User_Selector) OrderBy_PrimaryFollowingList_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PrimaryFollowingList ASC "
	return u
}

func (u *__User_Selector) Select_PrimaryFollowingList() *__User_Selector {
	u.selectCol = "PrimaryFollowingList"
	return u
}

func (u *__User_Selector) OrderBy_CreatedTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_CreatedTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__User_Selector) Select_CreatedTime() *__User_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__User_Selector) OrderBy_UpdatedTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UpdatedTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_UpdatedTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UpdatedTime ASC "
	return u
}

func (u *__User_Selector) Select_UpdatedTime() *__User_Selector {
	u.selectCol = "UpdatedTime"
	return u
}

func (u *__User_Selector) OrderBy_SessionUuid_Desc() *__User_Selector {
	u.orderBy = " ORDER BY SessionUuid DESC "
	return u
}

func (u *__User_Selector) OrderBy_SessionUuid_Asc() *__User_Selector {
	u.orderBy = " ORDER BY SessionUuid ASC "
	return u
}

func (u *__User_Selector) Select_SessionUuid() *__User_Selector {
	u.selectCol = "SessionUuid"
	return u
}

func (u *__User_Selector) OrderBy_DeviceUuid_Desc() *__User_Selector {
	u.orderBy = " ORDER BY DeviceUuid DESC "
	return u
}

func (u *__User_Selector) OrderBy_DeviceUuid_Asc() *__User_Selector {
	u.orderBy = " ORDER BY DeviceUuid ASC "
	return u
}

func (u *__User_Selector) Select_DeviceUuid() *__User_Selector {
	u.selectCol = "DeviceUuid"
	return u
}

func (u *__User_Selector) OrderBy_LastWifiMacAddress_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastWifiMacAddress DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastWifiMacAddress_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastWifiMacAddress ASC "
	return u
}

func (u *__User_Selector) Select_LastWifiMacAddress() *__User_Selector {
	u.selectCol = "LastWifiMacAddress"
	return u
}

func (u *__User_Selector) OrderBy_LastNetworkType_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastNetworkType DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastNetworkType_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastNetworkType ASC "
	return u
}

func (u *__User_Selector) Select_LastNetworkType() *__User_Selector {
	u.selectCol = "LastNetworkType"
	return u
}

func (u *__User_Selector) OrderBy_AppVersion_Desc() *__User_Selector {
	u.orderBy = " ORDER BY AppVersion DESC "
	return u
}

func (u *__User_Selector) OrderBy_AppVersion_Asc() *__User_Selector {
	u.orderBy = " ORDER BY AppVersion ASC "
	return u
}

func (u *__User_Selector) Select_AppVersion() *__User_Selector {
	u.selectCol = "AppVersion"
	return u
}

func (u *__User_Selector) OrderBy_LastActivityTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastActivityTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastActivityTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastActivityTime ASC "
	return u
}

func (u *__User_Selector) Select_LastActivityTime() *__User_Selector {
	u.selectCol = "LastActivityTime"
	return u
}

func (u *__User_Selector) OrderBy_LastLoginTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastLoginTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastLoginTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastLoginTime ASC "
	return u
}

func (u *__User_Selector) Select_LastLoginTime() *__User_Selector {
	u.selectCol = "LastLoginTime"
	return u
}

func (u *__User_Selector) OrderBy_LastIpAddress_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastIpAddress DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastIpAddress_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastIpAddress ASC "
	return u
}

func (u *__User_Selector) Select_LastIpAddress() *__User_Selector {
	u.selectCol = "LastIpAddress"
	return u
}

func (u *__User_Selector) Limit(num int) *__User_Selector {
	u.limit = num
	return u
}

func (u *__User_Selector) Offset(num int) *__User_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__User_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.user"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__User_Selector) GetRow(db *sqlx.DB) (*User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &User{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnUser_LoadOne(row)

	return row, nil
}

func (u *__User_Selector) GetRows(db *sqlx.DB) ([]*User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*User
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnUser_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__User_Selector) GetRows2(db *sqlx.DB) ([]User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*User
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnUser_LoadMany(rows)

	rows2 := make([]User, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__User_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__User_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__User_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__User_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__User_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.user SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__User_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.user WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  User ////////////////
func MassInsert_User(rows []User, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.user (" +
		"UserName, FirstName, LastName, About, FullName, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserName)
		vals = append(vals, row.FirstName)
		vals = append(vals, row.LastName)
		vals = append(vals, row.About)
		vals = append(vals, row.FullName)
		vals = append(vals, row.AvatarUrl)
		vals = append(vals, row.PrivacyProfile)
		vals = append(vals, row.Phone)
		vals = append(vals, row.Email)
		vals = append(vals, row.IsDeleted)
		vals = append(vals, row.PasswordHash)
		vals = append(vals, row.PasswordSalt)
		vals = append(vals, row.FollowersCount)
		vals = append(vals, row.FollowingCount)
		vals = append(vals, row.PostsCount)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ResharedCount)
		vals = append(vals, row.LastActionTime)
		vals = append(vals, row.LastPostTime)
		vals = append(vals, row.PrimaryFollowingList)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedTime)
		vals = append(vals, row.SessionUuid)
		vals = append(vals, row.DeviceUuid)
		vals = append(vals, row.LastWifiMacAddress)
		vals = append(vals, row.LastNetworkType)
		vals = append(vals, row.AppVersion)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.LastLoginTime)
		vals = append(vals, row.LastIpAddress)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_User(rows []User, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.user (" +
		"UserName, FirstName, LastName, About, FullName, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserName)
		vals = append(vals, row.FirstName)
		vals = append(vals, row.LastName)
		vals = append(vals, row.About)
		vals = append(vals, row.FullName)
		vals = append(vals, row.AvatarUrl)
		vals = append(vals, row.PrivacyProfile)
		vals = append(vals, row.Phone)
		vals = append(vals, row.Email)
		vals = append(vals, row.IsDeleted)
		vals = append(vals, row.PasswordHash)
		vals = append(vals, row.PasswordSalt)
		vals = append(vals, row.FollowersCount)
		vals = append(vals, row.FollowingCount)
		vals = append(vals, row.PostsCount)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ResharedCount)
		vals = append(vals, row.LastActionTime)
		vals = append(vals, row.LastPostTime)
		vals = append(vals, row.PrimaryFollowingList)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedTime)
		vals = append(vals, row.SessionUuid)
		vals = append(vals, row.DeviceUuid)
		vals = append(vals, row.LastWifiMacAddress)
		vals = append(vals, row.LastNetworkType)
		vals = append(vals, row.AppVersion)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.LastLoginTime)
		vals = append(vals, row.LastIpAddress)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

// UserByEmail retrieves a row from 'ms.user' as a User.
//
// Generated from index 'Email'.
func UserByEmail(db XODB, email string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE Email = ?`

	// run query
	XOLog(sqlstr, email)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnUser_LoadOne(&u)

	return &u, nil
}

// UsersByPhone retrieves a row from 'ms.user' as a User.
//
// Generated from index 'Phone'.
func UsersByPhone(db XODB, phone string) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE Phone = ?`

	// run query
	XOLog(sqlstr, phone)
	q, err := db.Query(sqlstr, phone)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &u)
	}

	OnUser_LoadMany(res)

	return res, nil
}

// UsersBySessionUuid retrieves a row from 'ms.user' as a User.
//
// Generated from index 'SessionUuid'.
func UsersBySessionUuid(db XODB, sessionUuid string) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE SessionUuid = ?`

	// run query
	XOLog(sqlstr, sessionUuid)
	q, err := db.Query(sqlstr, sessionUuid)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &u)
	}

	OnUser_LoadMany(res)

	return res, nil
}

// UserByUserName retrieves a row from 'ms.user' as a User.
//
// Generated from index 'UserName'.
func UserByUserName(db XODB, userName string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE UserName = ?`

	// run query
	XOLog(sqlstr, userName)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userName).Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnUser_LoadOne(&u)

	return &u, nil
}

// UserById retrieves a row from 'ms.user' as a User.
//
// Generated from index 'user_Id_pkey'.
func UserById(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, FullName, AvatarUrl, PrivacyProfile, Phone, Email, IsDeleted, PasswordHash, PasswordSalt, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedTime, UpdatedTime, SessionUuid, DeviceUuid, LastWifiMacAddress, LastNetworkType, AppVersion, LastActivityTime, LastLoginTime, LastIpAddress ` +
		`FROM ms.user ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.Id, &u.UserName, &u.FirstName, &u.LastName, &u.About, &u.FullName, &u.AvatarUrl, &u.PrivacyProfile, &u.Phone, &u.Email, &u.IsDeleted, &u.PasswordHash, &u.PasswordSalt, &u.FollowersCount, &u.FollowingCount, &u.PostsCount, &u.MediaCount, &u.LikesCount, &u.ResharedCount, &u.LastActionTime, &u.LastPostTime, &u.PrimaryFollowingList, &u.CreatedTime, &u.UpdatedTime, &u.SessionUuid, &u.DeviceUuid, &u.LastWifiMacAddress, &u.LastNetworkType, &u.AppVersion, &u.LastActivityTime, &u.LastLoginTime, &u.LastIpAddress)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnUser_LoadOne(&u)

	return &u, nil
}
