// Code generated by protoc-gen-go.
// source: 1.proto
// DO NOT EDIT!

/*
Package tutorial is a generated protocol buffer package.

It is generated from these files:
	1.proto

It has these top-level messages:
	User
	AddressBook
	Post
	UserReq
	UserRes
*/
package mesg

import "github.com/golang/protobuf/proto"
import "fmt"
import "math"

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User_PhoneType int32

const (
	User_MOBILE User_PhoneType = 0
	User_HOME   User_PhoneType = 1
	User_WORK   User_PhoneType = 2
)

var User_PhoneType_name = map[int32]string{
	0: "MOBILE",
	1: "HOME",
	2: "WORK",
}
var User_PhoneType_value = map[string]int32{
	"MOBILE": 0,
	"HOME":   1,
	"WORK":   2,
}

func (x User_PhoneType) String() string {
	return proto.EnumName(User_PhoneType_name, int32(x))
}
func (User_PhoneType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// [START messages]
type User struct {
	Name   string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id     int32         `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Email  string        `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phones []*User_Phone `protobuf:"bytes,4,rep,name=phones" json:"phones,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPhones() []*User_Phone {
	if m != nil {
		return m.Phones
	}
	return nil
}

type User_Phone struct {
	Number string         `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Type   User_PhoneType `protobuf:"varint,2,opt,name=type,enum=tutorial.User_PhoneType" json:"type,omitempty"`
}

func (m *User_Phone) Reset()                    { *m = User_Phone{} }
func (m *User_Phone) String() string            { return proto.CompactTextString(m) }
func (*User_Phone) ProtoMessage()               {}
func (*User_Phone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *User_Phone) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *User_Phone) GetType() User_PhoneType {
	if m != nil {
		return m.Type
	}
	return User_MOBILE
}

// Our address book file is just one of these.
type AddressBook struct {
	People []*User `protobuf:"bytes,1,rep,name=people" json:"people,omitempty"`
}

func (m *AddressBook) Reset()                    { *m = AddressBook{} }
func (m *AddressBook) String() string            { return proto.CompactTextString(m) }
func (*AddressBook) ProtoMessage()               {}
func (*AddressBook) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddressBook) GetPeople() []*User {
	if m != nil {
		return m.People
	}
	return nil
}

type Post struct {
	Id     int64  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	UserId int64  `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty"`
	Seq    int32  `protobuf:"varint,3,opt,name=Seq" json:"Seq,omitempty"`
	Text   string `protobuf:"bytes,4,opt,name=Text" json:"Text,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Post) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Post) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Post) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Post) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type UserReq struct {
	Limit int32 `protobuf:"varint,1,opt,name=Limit" json:"Limit,omitempty"`
	Page  int32 `protobuf:"varint,3,opt,name=Page" json:"Page,omitempty"`
}

func (m *UserReq) Reset()                    { *m = UserReq{} }
func (m *UserReq) String() string            { return proto.CompactTextString(m) }
func (*UserReq) ProtoMessage()               {}
func (*UserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *UserReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type UserRes struct {
	Users []*User `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (m *UserRes) Reset()                    { *m = UserRes{} }
func (m *UserRes) String() string            { return proto.CompactTextString(m) }
func (*UserRes) ProtoMessage()               {}
func (*UserRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserRes) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "tutorial.User")
	proto.RegisterType((*User_Phone)(nil), "tutorial.User.Phone")
	proto.RegisterType((*AddressBook)(nil), "tutorial.AddressBook")
	proto.RegisterType((*Post)(nil), "tutorial.Post")
	proto.RegisterType((*UserReq)(nil), "tutorial.UserReq")
	proto.RegisterType((*UserRes)(nil), "tutorial.UserRes")
	proto.RegisterEnum("tutorial.User_PhoneType", User_PhoneType_name, User_PhoneType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	GetUsers(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := grpc.Invoke(ctx, "/tutorial.UserService/getUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	GetUsers(context.Context, *UserReq) (*UserRes, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tutorial.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "1.proto",
}

func init() { proto.RegisterFile("1.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0xed, 0x8a, 0xda, 0x50,
	0x10, 0xdd, 0x7c, 0xae, 0x3b, 0x82, 0x64, 0x2f, 0x4b, 0x09, 0xfb, 0x4b, 0xc2, 0x52, 0x84, 0x2e,
	0x29, 0x8d, 0xf4, 0x01, 0x0c, 0xd8, 0x1a, 0xaa, 0x18, 0xae, 0x96, 0xfe, 0x8e, 0xcd, 0xd4, 0x86,
	0x26, 0xde, 0x98, 0x7b, 0x2d, 0xfa, 0x4a, 0x7d, 0xb4, 0x3e, 0x45, 0x99, 0x9b, 0x28, 0xf6, 0xeb,
	0xdf, 0x99, 0x99, 0x33, 0x67, 0x66, 0x0e, 0x03, 0xb7, 0x6f, 0xc2, 0xba, 0x11, 0x4a, 0xb0, 0x9e,
	0x3a, 0x28, 0xd1, 0x14, 0x59, 0x19, 0xfc, 0x34, 0xc0, 0xfe, 0x28, 0xb1, 0x61, 0x0c, 0xec, 0x5d,
	0x56, 0xa1, 0x6f, 0x0c, 0x8d, 0xd1, 0x1d, 0xd7, 0x98, 0x0d, 0xc0, 0x2c, 0x72, 0xdf, 0x1c, 0x1a,
	0x23, 0x87, 0x9b, 0x45, 0xce, 0x1e, 0xc0, 0xc1, 0x2a, 0x2b, 0x4a, 0xdf, 0xd2, 0xa4, 0x36, 0x60,
	0xcf, 0xe0, 0xd6, 0x5f, 0xc5, 0x0e, 0xa5, 0x6f, 0x0f, 0xad, 0x51, 0x3f, 0x7a, 0x08, 0xcf, 0xea,
	0x21, 0x29, 0x87, 0x29, 0x15, 0x79, 0xc7, 0x79, 0x5c, 0x80, 0xa3, 0x13, 0xec, 0x05, 0xb8, 0xbb,
	0x43, 0xb5, 0xc1, 0xa6, 0x1b, 0xd9, 0x45, 0xec, 0x19, 0x6c, 0x75, 0xaa, 0x51, 0x8f, 0x1d, 0x44,
	0xfe, 0xbf, 0xc4, 0xd6, 0xa7, 0x1a, 0xb9, 0x66, 0x05, 0xaf, 0xe0, 0xee, 0x92, 0x62, 0x00, 0xee,
	0x62, 0x19, 0x27, 0xf3, 0xa9, 0x77, 0xc3, 0x7a, 0x60, 0xcf, 0x96, 0x8b, 0xa9, 0x67, 0x10, 0xfa,
	0xb4, 0xe4, 0x1f, 0x3c, 0x33, 0x78, 0x0b, 0xfd, 0x49, 0x9e, 0x37, 0x28, 0x65, 0x2c, 0xc4, 0x37,
	0xf6, 0x12, 0xdc, 0x1a, 0x45, 0x5d, 0xd2, 0xd1, 0xb4, 0xf8, 0xe0, 0xf7, 0x59, 0xbc, 0xab, 0x06,
	0x6b, 0xb0, 0x53, 0x21, 0x15, 0xd9, 0x91, 0xe4, 0x7a, 0x5b, 0x8b, 0x9b, 0x49, 0x4e, 0x17, 0x10,
	0x2f, 0x69, 0x2d, 0xb2, 0x78, 0x17, 0x31, 0x0f, 0xac, 0x15, 0xee, 0xb5, 0x49, 0x0e, 0x27, 0x48,
	0xe6, 0xae, 0xf1, 0xa8, 0x7c, 0xbb, 0x35, 0x97, 0x70, 0x30, 0x86, 0x5b, 0x3d, 0x05, 0xf7, 0xe4,
	0xeb, 0xbc, 0xa8, 0x0a, 0xa5, 0xb5, 0x1d, 0xde, 0x06, 0xd4, 0x94, 0x66, 0x5b, 0xec, 0x74, 0x34,
	0x0e, 0x5e, 0x9f, 0x9b, 0x24, 0x7b, 0x02, 0x87, 0xa0, 0xfc, 0xcf, 0xf2, 0x6d, 0x31, 0x9a, 0x40,
	0x9f, 0xc0, 0x0a, 0x9b, 0xef, 0xc5, 0x67, 0x64, 0x11, 0xf4, 0xb6, 0xa8, 0x74, 0x89, 0xdd, 0xff,
	0xd1, 0x81, 0xfb, 0xc7, 0xbf, 0x52, 0x32, 0xb8, 0x89, 0xdf, 0xc1, 0xe5, 0x5d, 0xe2, 0xfb, 0x2b,
	0xff, 0x52, 0x7a, 0x25, 0x39, 0x33, 0x7f, 0x98, 0x4f, 0xef, 0x85, 0xd8, 0x96, 0x18, 0xea, 0xcc,
	0xe6, 0xf0, 0x25, 0x9c, 0x1e, 0xb3, 0xaa, 0x2e, 0x51, 0x86, 0x57, 0xf4, 0x8d, 0xab, 0x7f, 0x6f,
	0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xbe, 0xb9, 0xb3, 0x86, 0x02, 0x00, 0x00,
}
