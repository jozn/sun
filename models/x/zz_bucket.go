package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Bucket represents a row from 'ms.bucket'.

// Manualy copy this to project
type Bucket__ struct {
	BucketId            int    `json:"BucketId"`            // BucketId -
	BucketName          string `json:"BucketName"`          // BucketName -
	Server1Id           int    `json:"Server1Id"`           // Server1Id -
	Server2Id           int    `json:"Server2Id"`           // Server2Id -
	BackupServerId      int    `json:"BackupServerId"`      // BackupServerId -
	ContentObjectTypeId int    `json:"ContentObjectTypeId"` // ContentObjectTypeId -
	ContentObjectCount  int    `json:"ContentObjectCount"`  // ContentObjectCount -
	CreatedTime         int    `json:"CreatedTime"`         // CreatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Bucket exists in the database.
func (b *Bucket) Exists() bool {
	return b._exists
}

// Deleted provides information if the Bucket has been deleted from the database.
func (b *Bucket) Deleted() bool {
	return b._deleted
}

// Insert inserts the Bucket to the database.
func (b *Bucket) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.bucket (` +
		`BucketName, Server1Id, Server2Id, BackupServerId, ContentObjectTypeId, ContentObjectCount, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, b.BucketName, b.Server1Id, b.Server2Id, b.BackupServerId, b.ContentObjectTypeId, b.ContentObjectCount, b.CreatedTime)
	res, err := db.Exec(sqlstr, b.BucketName, b.Server1Id, b.Server2Id, b.BackupServerId, b.ContentObjectTypeId, b.ContentObjectCount, b.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	b.BucketId = int(id)
	b._exists = true

	OnBucket_AfterInsert(b)

	return nil
}

// Insert inserts the Bucket to the database.
func (b *Bucket) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.bucket (` +
		`BucketName, Server1Id, Server2Id, BackupServerId, ContentObjectTypeId, ContentObjectCount, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, b.BucketName, b.Server1Id, b.Server2Id, b.BackupServerId, b.ContentObjectTypeId, b.ContentObjectCount, b.CreatedTime)
	res, err := db.Exec(sqlstr, b.BucketName, b.Server1Id, b.Server2Id, b.BackupServerId, b.ContentObjectTypeId, b.ContentObjectCount, b.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	b.BucketId = int(id)
	b._exists = true

	OnBucket_AfterInsert(b)

	return nil
}

// Update updates the Bucket in the database.
func (b *Bucket) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.bucket SET ` +
		`BucketName = ?, Server1Id = ?, Server2Id = ?, BackupServerId = ?, ContentObjectTypeId = ?, ContentObjectCount = ?, CreatedTime = ?` +
		` WHERE BucketId = ?`

	// run query
	XOLog(sqlstr, b.BucketName, b.Server1Id, b.Server2Id, b.BackupServerId, b.ContentObjectTypeId, b.ContentObjectCount, b.CreatedTime, b.BucketId)
	_, err = db.Exec(sqlstr, b.BucketName, b.Server1Id, b.Server2Id, b.BackupServerId, b.ContentObjectTypeId, b.ContentObjectCount, b.CreatedTime, b.BucketId)

	XOLogErr(err)
	OnBucket_AfterUpdate(b)

	return err
}

// Save saves the Bucket to the database.
func (b *Bucket) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Replace(db)
}

// Delete deletes the Bucket from the database.
func (b *Bucket) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.bucket WHERE BucketId = ?`

	// run query
	XOLog(sqlstr, b.BucketId)
	_, err = db.Exec(sqlstr, b.BucketId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	b._deleted = true

	OnBucket_AfterDelete(b)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Bucket_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Bucket_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Bucket_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewBucket_Deleter() *__Bucket_Deleter {
	d := __Bucket_Deleter{whereSep: " AND "}
	return &d
}

func NewBucket_Updater() *__Bucket_Updater {
	u := __Bucket_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewBucket_Selector() *__Bucket_Selector {
	u := __Bucket_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Bucket_Deleter) Or() *__Bucket_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Bucket_Deleter) BucketId_In(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) BucketId_Ins(ins ...int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) BucketId_NotIn(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Deleter) BucketId_Eq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BucketId_NotEq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BucketId_LT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BucketId_LE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BucketId_GT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BucketId_GE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Deleter) Server1Id_In(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server1Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) Server1Id_Ins(ins ...int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server1Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) Server1Id_NotIn(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server1Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Deleter) Server1Id_Eq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server1Id_NotEq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server1Id_LT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server1Id_LE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server1Id_GT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server1Id_GE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Deleter) Server2Id_In(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server2Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) Server2Id_Ins(ins ...int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server2Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) Server2Id_NotIn(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server2Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Deleter) Server2Id_Eq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server2Id_NotEq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server2Id_LT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server2Id_LE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server2Id_GT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) Server2Id_GE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Deleter) BackupServerId_In(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BackupServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) BackupServerId_Ins(ins ...int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BackupServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) BackupServerId_NotIn(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BackupServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Deleter) BackupServerId_Eq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BackupServerId_NotEq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BackupServerId_LT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BackupServerId_LE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BackupServerId_GT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BackupServerId_GE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Deleter) ContentObjectTypeId_In(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) ContentObjectTypeId_Ins(ins ...int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) ContentObjectTypeId_NotIn(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Deleter) ContentObjectTypeId_Eq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectTypeId_NotEq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectTypeId_LT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectTypeId_LE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectTypeId_GT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectTypeId_GE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Deleter) ContentObjectCount_In(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) ContentObjectCount_Ins(ins ...int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) ContentObjectCount_NotIn(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Deleter) ContentObjectCount_Eq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectCount_NotEq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectCount_LT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectCount_LE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectCount_GT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) ContentObjectCount_GE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Deleter) CreatedTime_In(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) CreatedTime_Ins(ins ...int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) CreatedTime_NotIn(ins []int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Deleter) CreatedTime_Eq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) CreatedTime_NotEq(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) CreatedTime_LT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) CreatedTime_LE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) CreatedTime_GT(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) CreatedTime_GE(val int) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Bucket_Updater) Or() *__Bucket_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Bucket_Updater) BucketId_In(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) BucketId_Ins(ins ...int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) BucketId_NotIn(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Updater) BucketId_Eq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BucketId_NotEq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BucketId_LT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BucketId_LE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BucketId_GT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BucketId_GE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Updater) Server1Id_In(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server1Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) Server1Id_Ins(ins ...int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server1Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) Server1Id_NotIn(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server1Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Updater) Server1Id_Eq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server1Id_NotEq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server1Id_LT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server1Id_LE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server1Id_GT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server1Id_GE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Updater) Server2Id_In(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server2Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) Server2Id_Ins(ins ...int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server2Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) Server2Id_NotIn(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server2Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Updater) Server2Id_Eq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server2Id_NotEq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server2Id_LT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server2Id_LE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server2Id_GT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) Server2Id_GE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Updater) BackupServerId_In(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BackupServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) BackupServerId_Ins(ins ...int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BackupServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) BackupServerId_NotIn(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BackupServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Updater) BackupServerId_Eq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BackupServerId_NotEq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BackupServerId_LT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BackupServerId_LE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BackupServerId_GT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BackupServerId_GE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Updater) ContentObjectTypeId_In(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) ContentObjectTypeId_Ins(ins ...int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) ContentObjectTypeId_NotIn(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Updater) ContentObjectTypeId_Eq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectTypeId_NotEq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectTypeId_LT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectTypeId_LE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectTypeId_GT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectTypeId_GE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Updater) ContentObjectCount_In(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) ContentObjectCount_Ins(ins ...int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) ContentObjectCount_NotIn(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Updater) ContentObjectCount_Eq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectCount_NotEq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectCount_LT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectCount_LE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectCount_GT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) ContentObjectCount_GE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Updater) CreatedTime_In(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) CreatedTime_Ins(ins ...int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) CreatedTime_NotIn(ins []int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Updater) CreatedTime_Eq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) CreatedTime_NotEq(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) CreatedTime_LT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) CreatedTime_LE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) CreatedTime_GT(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) CreatedTime_GE(val int) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Bucket_Selector) Or() *__Bucket_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Bucket_Selector) BucketId_In(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) BucketId_Ins(ins ...int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) BucketId_NotIn(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Selector) BucketId_Eq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BucketId_NotEq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BucketId_LT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BucketId_LE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BucketId_GT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BucketId_GE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Selector) Server1Id_In(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server1Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) Server1Id_Ins(ins ...int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server1Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) Server1Id_NotIn(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server1Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Selector) Server1Id_Eq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server1Id_NotEq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server1Id_LT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server1Id_LE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server1Id_GT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server1Id_GE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server1Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Selector) Server2Id_In(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server2Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) Server2Id_Ins(ins ...int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server2Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) Server2Id_NotIn(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Server2Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Selector) Server2Id_Eq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server2Id_NotEq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server2Id_LT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server2Id_LE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server2Id_GT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) Server2Id_GE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Server2Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Selector) BackupServerId_In(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BackupServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) BackupServerId_Ins(ins ...int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BackupServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) BackupServerId_NotIn(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BackupServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Selector) BackupServerId_Eq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BackupServerId_NotEq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BackupServerId_LT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BackupServerId_LE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BackupServerId_GT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BackupServerId_GE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BackupServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Selector) ContentObjectTypeId_In(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) ContentObjectTypeId_Ins(ins ...int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) ContentObjectTypeId_NotIn(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Selector) ContentObjectTypeId_Eq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectTypeId_NotEq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectTypeId_LT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectTypeId_LE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectTypeId_GT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectTypeId_GE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Selector) ContentObjectCount_In(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) ContentObjectCount_Ins(ins ...int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) ContentObjectCount_NotIn(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ContentObjectCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Selector) ContentObjectCount_Eq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectCount_NotEq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectCount_LT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectCount_LE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectCount_GT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) ContentObjectCount_GE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ContentObjectCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bucket_Selector) CreatedTime_In(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) CreatedTime_Ins(ins ...int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) CreatedTime_NotIn(ins []int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Selector) CreatedTime_Eq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) CreatedTime_NotEq(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) CreatedTime_LT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) CreatedTime_LE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) CreatedTime_GT(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) CreatedTime_GE(val int) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Bucket_Deleter) BucketName_In(ins []string) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Deleter) BucketName_NotIn(ins []string) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Bucket_Deleter) BucketName_Like(val string) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Deleter) BucketName_Eq(val string) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Deleter) BucketName_NotEq(val string) *__Bucket_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Bucket_Updater) BucketName_In(ins []string) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Updater) BucketName_NotIn(ins []string) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Bucket_Updater) BucketName_Like(val string) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Updater) BucketName_Eq(val string) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Updater) BucketName_NotEq(val string) *__Bucket_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Bucket_Selector) BucketName_In(ins []string) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bucket_Selector) BucketName_NotIn(ins []string) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Bucket_Selector) BucketName_Like(val string) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bucket_Selector) BucketName_Eq(val string) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bucket_Selector) BucketName_NotEq(val string) *__Bucket_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Bucket_Updater) BucketId(newVal int) *__Bucket_Updater {
	u.updates[" BucketId = ? "] = newVal
	return u
}

func (u *__Bucket_Updater) BucketId_Increment(count int) *__Bucket_Updater {
	if count > 0 {
		u.updates[" BucketId = BucketId+? "] = count
	}

	if count < 0 {
		u.updates[" BucketId = BucketId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Bucket_Updater) BucketName(newVal string) *__Bucket_Updater {
	u.updates[" BucketName = ? "] = newVal
	return u
}

//ints

func (u *__Bucket_Updater) Server1Id(newVal int) *__Bucket_Updater {
	u.updates[" Server1Id = ? "] = newVal
	return u
}

func (u *__Bucket_Updater) Server1Id_Increment(count int) *__Bucket_Updater {
	if count > 0 {
		u.updates[" Server1Id = Server1Id+? "] = count
	}

	if count < 0 {
		u.updates[" Server1Id = Server1Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Bucket_Updater) Server2Id(newVal int) *__Bucket_Updater {
	u.updates[" Server2Id = ? "] = newVal
	return u
}

func (u *__Bucket_Updater) Server2Id_Increment(count int) *__Bucket_Updater {
	if count > 0 {
		u.updates[" Server2Id = Server2Id+? "] = count
	}

	if count < 0 {
		u.updates[" Server2Id = Server2Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Bucket_Updater) BackupServerId(newVal int) *__Bucket_Updater {
	u.updates[" BackupServerId = ? "] = newVal
	return u
}

func (u *__Bucket_Updater) BackupServerId_Increment(count int) *__Bucket_Updater {
	if count > 0 {
		u.updates[" BackupServerId = BackupServerId+? "] = count
	}

	if count < 0 {
		u.updates[" BackupServerId = BackupServerId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Bucket_Updater) ContentObjectTypeId(newVal int) *__Bucket_Updater {
	u.updates[" ContentObjectTypeId = ? "] = newVal
	return u
}

func (u *__Bucket_Updater) ContentObjectTypeId_Increment(count int) *__Bucket_Updater {
	if count > 0 {
		u.updates[" ContentObjectTypeId = ContentObjectTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" ContentObjectTypeId = ContentObjectTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Bucket_Updater) ContentObjectCount(newVal int) *__Bucket_Updater {
	u.updates[" ContentObjectCount = ? "] = newVal
	return u
}

func (u *__Bucket_Updater) ContentObjectCount_Increment(count int) *__Bucket_Updater {
	if count > 0 {
		u.updates[" ContentObjectCount = ContentObjectCount+? "] = count
	}

	if count < 0 {
		u.updates[" ContentObjectCount = ContentObjectCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Bucket_Updater) CreatedTime(newVal int) *__Bucket_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Bucket_Updater) CreatedTime_Increment(count int) *__Bucket_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Bucket_Selector) OrderBy_BucketId_Desc() *__Bucket_Selector {
	u.orderBy = " ORDER BY BucketId DESC "
	return u
}

func (u *__Bucket_Selector) OrderBy_BucketId_Asc() *__Bucket_Selector {
	u.orderBy = " ORDER BY BucketId ASC "
	return u
}

func (u *__Bucket_Selector) Select_BucketId() *__Bucket_Selector {
	u.selectCol = "BucketId"
	return u
}

func (u *__Bucket_Selector) OrderBy_BucketName_Desc() *__Bucket_Selector {
	u.orderBy = " ORDER BY BucketName DESC "
	return u
}

func (u *__Bucket_Selector) OrderBy_BucketName_Asc() *__Bucket_Selector {
	u.orderBy = " ORDER BY BucketName ASC "
	return u
}

func (u *__Bucket_Selector) Select_BucketName() *__Bucket_Selector {
	u.selectCol = "BucketName"
	return u
}

func (u *__Bucket_Selector) OrderBy_Server1Id_Desc() *__Bucket_Selector {
	u.orderBy = " ORDER BY Server1Id DESC "
	return u
}

func (u *__Bucket_Selector) OrderBy_Server1Id_Asc() *__Bucket_Selector {
	u.orderBy = " ORDER BY Server1Id ASC "
	return u
}

func (u *__Bucket_Selector) Select_Server1Id() *__Bucket_Selector {
	u.selectCol = "Server1Id"
	return u
}

func (u *__Bucket_Selector) OrderBy_Server2Id_Desc() *__Bucket_Selector {
	u.orderBy = " ORDER BY Server2Id DESC "
	return u
}

func (u *__Bucket_Selector) OrderBy_Server2Id_Asc() *__Bucket_Selector {
	u.orderBy = " ORDER BY Server2Id ASC "
	return u
}

func (u *__Bucket_Selector) Select_Server2Id() *__Bucket_Selector {
	u.selectCol = "Server2Id"
	return u
}

func (u *__Bucket_Selector) OrderBy_BackupServerId_Desc() *__Bucket_Selector {
	u.orderBy = " ORDER BY BackupServerId DESC "
	return u
}

func (u *__Bucket_Selector) OrderBy_BackupServerId_Asc() *__Bucket_Selector {
	u.orderBy = " ORDER BY BackupServerId ASC "
	return u
}

func (u *__Bucket_Selector) Select_BackupServerId() *__Bucket_Selector {
	u.selectCol = "BackupServerId"
	return u
}

func (u *__Bucket_Selector) OrderBy_ContentObjectTypeId_Desc() *__Bucket_Selector {
	u.orderBy = " ORDER BY ContentObjectTypeId DESC "
	return u
}

func (u *__Bucket_Selector) OrderBy_ContentObjectTypeId_Asc() *__Bucket_Selector {
	u.orderBy = " ORDER BY ContentObjectTypeId ASC "
	return u
}

func (u *__Bucket_Selector) Select_ContentObjectTypeId() *__Bucket_Selector {
	u.selectCol = "ContentObjectTypeId"
	return u
}

func (u *__Bucket_Selector) OrderBy_ContentObjectCount_Desc() *__Bucket_Selector {
	u.orderBy = " ORDER BY ContentObjectCount DESC "
	return u
}

func (u *__Bucket_Selector) OrderBy_ContentObjectCount_Asc() *__Bucket_Selector {
	u.orderBy = " ORDER BY ContentObjectCount ASC "
	return u
}

func (u *__Bucket_Selector) Select_ContentObjectCount() *__Bucket_Selector {
	u.selectCol = "ContentObjectCount"
	return u
}

func (u *__Bucket_Selector) OrderBy_CreatedTime_Desc() *__Bucket_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Bucket_Selector) OrderBy_CreatedTime_Asc() *__Bucket_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Bucket_Selector) Select_CreatedTime() *__Bucket_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Bucket_Selector) Limit(num int) *__Bucket_Selector {
	u.limit = num
	return u
}

func (u *__Bucket_Selector) Offset(num int) *__Bucket_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Bucket_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.bucket"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Bucket_Selector) GetRow(db *sqlx.DB) (*Bucket, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Bucket{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnBucket_LoadOne(row)

	return row, nil
}

func (u *__Bucket_Selector) GetRows(db *sqlx.DB) ([]*Bucket, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Bucket
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnBucket_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Bucket_Selector) GetRows2(db *sqlx.DB) ([]Bucket, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Bucket
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnBucket_LoadMany(rows)

	rows2 := make([]Bucket, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Bucket_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__Bucket_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Bucket_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Bucket_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Bucket_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.bucket SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__Bucket_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.bucket WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Bucket ////////////////

func MassInsert_Bucket(rows []Bucket, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "( ms_question_mark .Columns .PrimaryKey.ColumnName }})," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.bucket (" +
		"BucketName, Server1Id, Server2Id, BackupServerId, ContentObjectTypeId, ContentObjectCount, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.BucketName)
		vals = append(vals, row.Server1Id)
		vals = append(vals, row.Server2Id)
		vals = append(vals, row.BackupServerId)
		vals = append(vals, row.ContentObjectTypeId)
		vals = append(vals, row.ContentObjectCount)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_Bucket(rows []Bucket, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.bucket (" +
		"BucketName, Server1Id, Server2Id, BackupServerId, ContentObjectTypeId, ContentObjectCount, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.BucketName)
		vals = append(vals, row.Server1Id)
		vals = append(vals, row.Server2Id)
		vals = append(vals, row.BackupServerId)
		vals = append(vals, row.ContentObjectTypeId)
		vals = append(vals, row.ContentObjectCount)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//
