package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// FollowingListMember represents a row from 'ms.following_list_member'.

// Manualy copy this to project
type FollowingListMember__ struct {
	Id             int `json:"Id"`             // Id -
	ListId         int `json:"ListId"`         // ListId -
	UserId         int `json:"UserId"`         // UserId -
	FollowedUserId int `json:"FollowedUserId"` // FollowedUserId -
	FollowType     int `json:"FollowType"`     // FollowType -
	UpdatedTimeMs  int `json:"UpdatedTimeMs"`  // UpdatedTimeMs -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FollowingListMember exists in the database.
func (flm *FollowingListMember) Exists() bool {
	return flm._exists
}

// Deleted provides information if the FollowingListMember has been deleted from the database.
func (flm *FollowingListMember) Deleted() bool {
	return flm._deleted
}

// Insert inserts the FollowingListMember to the database.
func (flm *FollowingListMember) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if flm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.following_list_member (` +
		`ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs)
	res, err := db.Exec(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	flm.Id = int(id)
	flm._exists = true

	OnFollowingListMember_AfterInsert(flm)

	return nil
}

// Insert inserts the FollowingListMember to the database.
func (flm *FollowingListMember) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.following_list_member (` +
		`ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs)
	res, err := db.Exec(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	flm.Id = int(id)
	flm._exists = true

	OnFollowingListMember_AfterInsert(flm)

	return nil
}

// Update updates the FollowingListMember in the database.
func (flm *FollowingListMember) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if flm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.following_list_member SET ` +
		`ListId = ?, UserId = ?, FollowedUserId = ?, FollowType = ?, UpdatedTimeMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs, flm.Id)
	_, err = db.Exec(sqlstr, flm.ListId, flm.UserId, flm.FollowedUserId, flm.FollowType, flm.UpdatedTimeMs, flm.Id)

	XOLogErr(err)
	OnFollowingListMember_AfterUpdate(flm)

	return err
}

// Save saves the FollowingListMember to the database.
func (flm *FollowingListMember) Save(db XODB) error {
	if flm.Exists() {
		return flm.Update(db)
	}

	return flm.Replace(db)
}

// Delete deletes the FollowingListMember from the database.
func (flm *FollowingListMember) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flm._exists {
		return nil
	}

	// if deleted, bail
	if flm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.following_list_member WHERE Id = ?`

	// run query
	XOLog(sqlstr, flm.Id)
	_, err = db.Exec(sqlstr, flm.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	flm._deleted = true

	OnFollowingListMember_AfterDelete(flm)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __FollowingListMember_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __FollowingListMember_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __FollowingListMember_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewFollowingListMember_Deleter() *__FollowingListMember_Deleter {
	d := __FollowingListMember_Deleter{whereSep: " AND "}
	return &d
}

func NewFollowingListMember_Updater() *__FollowingListMember_Updater {
	u := __FollowingListMember_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewFollowingListMember_Selector() *__FollowingListMember_Selector {
	u := __FollowingListMember_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__FollowingListMember_Deleter) Or() *__FollowingListMember_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMember_Deleter) Id_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) Id_Ins(ins ...int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) Id_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) Id_Eq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_NotEq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) ListId_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) ListId_Ins(ins ...int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) ListId_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) ListId_Eq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_NotEq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) UserId_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) UserId_Ins(ins ...int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) UserId_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) UserId_Eq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_NotEq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) FollowedUserId_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) FollowedUserId_Ins(ins ...int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) FollowedUserId_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) FollowedUserId_Eq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_NotEq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) FollowType_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) FollowType_Ins(ins ...int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) FollowType_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) FollowType_Eq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_NotEq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) UpdatedTimeMs_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) UpdatedTimeMs_Ins(ins ...int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) UpdatedTimeMs_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_Eq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_NotEq(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UpdatedTimeMs_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMember_Updater) Or() *__FollowingListMember_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMember_Updater) Id_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) Id_Ins(ins ...int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) Id_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) Id_Eq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_NotEq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) ListId_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) ListId_Ins(ins ...int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) ListId_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) ListId_Eq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_NotEq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) UserId_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) UserId_Ins(ins ...int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) UserId_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) UserId_Eq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_NotEq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) FollowedUserId_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) FollowedUserId_Ins(ins ...int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) FollowedUserId_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) FollowedUserId_Eq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_NotEq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) FollowType_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) FollowType_Ins(ins ...int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) FollowType_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) FollowType_Eq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_NotEq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) UpdatedTimeMs_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) UpdatedTimeMs_Ins(ins ...int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) UpdatedTimeMs_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_Eq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_NotEq(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UpdatedTimeMs_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMember_Selector) Or() *__FollowingListMember_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMember_Selector) Id_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) Id_Ins(ins ...int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) Id_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) Id_Eq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_NotEq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) ListId_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) ListId_Ins(ins ...int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) ListId_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) ListId_Eq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_NotEq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) UserId_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) UserId_Ins(ins ...int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) UserId_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) UserId_Eq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_NotEq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) FollowedUserId_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) FollowedUserId_Ins(ins ...int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) FollowedUserId_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) FollowedUserId_Eq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_NotEq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) FollowType_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) FollowType_Ins(ins ...int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) FollowType_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) FollowType_Eq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_NotEq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) UpdatedTimeMs_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) UpdatedTimeMs_Ins(ins ...int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) UpdatedTimeMs_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_Eq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_NotEq(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UpdatedTimeMs_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__FollowingListMember_Updater) Id(newVal int) *__FollowingListMember_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) Id_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) ListId(newVal int) *__FollowingListMember_Updater {
	u.updates[" ListId = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) ListId_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" ListId = ListId+? "] = count
	}

	if count < 0 {
		u.updates[" ListId = ListId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) UserId(newVal int) *__FollowingListMember_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) UserId_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) FollowedUserId(newVal int) *__FollowingListMember_Updater {
	u.updates[" FollowedUserId = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) FollowedUserId_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" FollowedUserId = FollowedUserId+? "] = count
	}

	if count < 0 {
		u.updates[" FollowedUserId = FollowedUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) FollowType(newVal int) *__FollowingListMember_Updater {
	u.updates[" FollowType = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) FollowType_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" FollowType = FollowType+? "] = count
	}

	if count < 0 {
		u.updates[" FollowType = FollowType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) UpdatedTimeMs(newVal int) *__FollowingListMember_Updater {
	u.updates[" UpdatedTimeMs = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) UpdatedTimeMs_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" UpdatedTimeMs = UpdatedTimeMs+? "] = count
	}

	if count < 0 {
		u.updates[" UpdatedTimeMs = UpdatedTimeMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__FollowingListMember_Selector) OrderBy_Id_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_Id_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_Id() *__FollowingListMember_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_ListId_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY ListId DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_ListId_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY ListId ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_ListId() *__FollowingListMember_Selector {
	u.selectCol = "ListId"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UserId_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UserId_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_UserId() *__FollowingListMember_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowedUserId_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowedUserId DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowedUserId_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowedUserId ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_FollowedUserId() *__FollowingListMember_Selector {
	u.selectCol = "FollowedUserId"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowType_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowType DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowType_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowType ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_FollowType() *__FollowingListMember_Selector {
	u.selectCol = "FollowType"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UpdatedTimeMs_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UpdatedTimeMs DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UpdatedTimeMs_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UpdatedTimeMs ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_UpdatedTimeMs() *__FollowingListMember_Selector {
	u.selectCol = "UpdatedTimeMs"
	return u
}

func (u *__FollowingListMember_Selector) Limit(num int) *__FollowingListMember_Selector {
	u.limit = num
	return u
}

func (u *__FollowingListMember_Selector) Offset(num int) *__FollowingListMember_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__FollowingListMember_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.following_list_member"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__FollowingListMember_Selector) GetRow(db *sqlx.DB) (*FollowingListMember, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &FollowingListMember{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnFollowingListMember_LoadOne(row)

	return row, nil
}

func (u *__FollowingListMember_Selector) GetRows(db *sqlx.DB) ([]*FollowingListMember, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*FollowingListMember
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnFollowingListMember_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__FollowingListMember_Selector) GetRows2(db *sqlx.DB) ([]FollowingListMember, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*FollowingListMember
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnFollowingListMember_LoadMany(rows)

	rows2 := make([]FollowingListMember, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__FollowingListMember_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__FollowingListMember_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMember_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMember_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__FollowingListMember_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.following_list_member SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__FollowingListMember_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.following_list_member WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  FollowingListMember ////////////////

func MassInsert_FollowingListMember(rows []FollowingListMember, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "( ms_question_mark .Columns .PrimaryKey.ColumnName }})," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.following_list_member (" +
		"ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ListId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.FollowedUserId)
		vals = append(vals, row.FollowType)
		vals = append(vals, row.UpdatedTimeMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_FollowingListMember(rows []FollowingListMember, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.following_list_member (" +
		"ListId, UserId, FollowedUserId, FollowType, UpdatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ListId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.FollowedUserId)
		vals = append(vals, row.FollowType)
		vals = append(vals, row.UpdatedTimeMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//
