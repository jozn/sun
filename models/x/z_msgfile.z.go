// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// MsgFile represents a row from 'ms.msg_file'.

// Manualy copy this to project
type MsgFile__ struct {
	Id          int    `json:"Id"`          // Id -
	Name        string `json:"Name"`        // Name -
	Size        int    `json:"Size"`        // Size -
	FileType    int    `json:"FileType"`    // FileType -
	MimeType    string `json:"MimeType"`    // MimeType -
	Width       int    `json:"Width"`       // Width -
	Height      int    `json:"Height"`      // Height -
	Duration    int    `json:"Duration"`    // Duration -
	Extension   string `json:"Extension"`   // Extension -
	ThumbData   []byte `json:"ThumbData"`   // ThumbData -
	ThumbData64 string `json:"ThumbData64"` // ThumbData64 -
	ServerSrc   string `json:"ServerSrc"`   // ServerSrc -
	ServerPath  string `json:"ServerPath"`  // ServerPath -
	ServerId    int    `json:"ServerId"`    // ServerId -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MsgFile exists in the database.
func (mf *MsgFile) Exists() bool {
	return mf._exists
}

// Deleted provides information if the MsgFile has been deleted from the database.
func (mf *MsgFile) Deleted() bool {
	return mf._deleted
}

// Insert inserts the MsgFile to the database.
func (mf *MsgFile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.msg_file (` +
		`Name, Size, FileType, MimeType, Width, Height, Duration, Extension, ThumbData, ThumbData64, ServerSrc, ServerPath, ServerId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mf.Name, mf.Size, mf.FileType, mf.MimeType, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.ThumbData, mf.ThumbData64, mf.ServerSrc, mf.ServerPath, mf.ServerId)
	res, err := db.Exec(sqlstr, mf.Name, mf.Size, mf.FileType, mf.MimeType, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.ThumbData, mf.ThumbData64, mf.ServerSrc, mf.ServerPath, mf.ServerId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	mf.Id = int(id)
	mf._exists = true

	OnMsgFile_AfterInsert(mf)

	return nil
}

// Insert inserts the MsgFile to the database.
func (mf *MsgFile) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.msg_file (` +
		`Name, Size, FileType, MimeType, Width, Height, Duration, Extension, ThumbData, ThumbData64, ServerSrc, ServerPath, ServerId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mf.Name, mf.Size, mf.FileType, mf.MimeType, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.ThumbData, mf.ThumbData64, mf.ServerSrc, mf.ServerPath, mf.ServerId)
	res, err := db.Exec(sqlstr, mf.Name, mf.Size, mf.FileType, mf.MimeType, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.ThumbData, mf.ThumbData64, mf.ServerSrc, mf.ServerPath, mf.ServerId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	mf.Id = int(id)
	mf._exists = true

	OnMsgFile_AfterInsert(mf)

	return nil
}

// Update updates the MsgFile in the database.
func (mf *MsgFile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mf._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.msg_file SET ` +
		`Name = ?, Size = ?, FileType = ?, MimeType = ?, Width = ?, Height = ?, Duration = ?, Extension = ?, ThumbData = ?, ThumbData64 = ?, ServerSrc = ?, ServerPath = ?, ServerId = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, mf.Name, mf.Size, mf.FileType, mf.MimeType, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.ThumbData, mf.ThumbData64, mf.ServerSrc, mf.ServerPath, mf.ServerId, mf.Id)
	_, err = db.Exec(sqlstr, mf.Name, mf.Size, mf.FileType, mf.MimeType, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.ThumbData, mf.ThumbData64, mf.ServerSrc, mf.ServerPath, mf.ServerId, mf.Id)

	XOLogErr(err)
	OnMsgFile_AfterUpdate(mf)

	return err
}

// Save saves the MsgFile to the database.
func (mf *MsgFile) Save(db XODB) error {
	if mf.Exists() {
		return mf.Update(db)
	}

	return mf.Replace(db)
}

// Delete deletes the MsgFile from the database.
func (mf *MsgFile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mf._exists {
		return nil
	}

	// if deleted, bail
	if mf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.msg_file WHERE Id = ?`

	// run query
	XOLog(sqlstr, mf.Id)
	_, err = db.Exec(sqlstr, mf.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	mf._deleted = true

	OnMsgFile_AfterDelete(mf)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MsgFile_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MsgFile_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MsgFile_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMsgFile_Deleter() *__MsgFile_Deleter {
	d := __MsgFile_Deleter{whereSep: " AND "}
	return &d
}

func NewMsgFile_Updater() *__MsgFile_Updater {
	u := __MsgFile_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMsgFile_Selector() *__MsgFile_Selector {
	u := __MsgFile_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MsgFile_Deleter) Or() *__MsgFile_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MsgFile_Deleter) Id_In(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Id_Ins(ins ...int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Id_NotIn(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) Id_Eq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Id_NotEq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Id_LT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Id_LE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Id_GT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Id_GE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) Size_In(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Size_Ins(ins ...int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Size_NotIn(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) Size_Eq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Size_NotEq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Size_LT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Size_LE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Size_GT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Size_GE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) FileType_In(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) FileType_Ins(ins ...int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) FileType_NotIn(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) FileType_Eq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) FileType_NotEq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) FileType_LT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) FileType_LE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) FileType_GT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) FileType_GE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) Width_In(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Width_Ins(ins ...int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Width_NotIn(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) Width_Eq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Width_NotEq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Width_LT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Width_LE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Width_GT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Width_GE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) Height_In(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Height_Ins(ins ...int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Height_NotIn(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) Height_Eq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Height_NotEq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Height_LT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Height_LE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Height_GT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Height_GE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) Duration_In(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Duration_Ins(ins ...int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Duration_NotIn(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) Duration_Eq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Duration_NotEq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Duration_LT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Duration_LE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Duration_GT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Duration_GE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) ServerId_In(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) ServerId_Ins(ins ...int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) ServerId_NotIn(ins []int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) ServerId_Eq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) ServerId_NotEq(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) ServerId_LT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) ServerId_LE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) ServerId_GT(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) ServerId_GE(val int) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgFile_Updater) Or() *__MsgFile_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MsgFile_Updater) Id_In(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Id_Ins(ins ...int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Id_NotIn(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) Id_Eq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Id_NotEq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Id_LT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Id_LE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Id_GT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Id_GE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) Size_In(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Size_Ins(ins ...int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Size_NotIn(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) Size_Eq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Size_NotEq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Size_LT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Size_LE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Size_GT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Size_GE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) FileType_In(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) FileType_Ins(ins ...int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) FileType_NotIn(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) FileType_Eq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) FileType_NotEq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) FileType_LT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) FileType_LE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) FileType_GT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) FileType_GE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) Width_In(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Width_Ins(ins ...int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Width_NotIn(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) Width_Eq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Width_NotEq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Width_LT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Width_LE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Width_GT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Width_GE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) Height_In(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Height_Ins(ins ...int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Height_NotIn(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) Height_Eq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Height_NotEq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Height_LT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Height_LE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Height_GT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Height_GE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) Duration_In(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Duration_Ins(ins ...int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Duration_NotIn(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) Duration_Eq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Duration_NotEq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Duration_LT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Duration_LE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Duration_GT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Duration_GE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) ServerId_In(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) ServerId_Ins(ins ...int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) ServerId_NotIn(ins []int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) ServerId_Eq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) ServerId_NotEq(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) ServerId_LT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) ServerId_LE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) ServerId_GT(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) ServerId_GE(val int) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgFile_Selector) Or() *__MsgFile_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MsgFile_Selector) Id_In(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Id_Ins(ins ...int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Id_NotIn(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) Id_Eq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Id_NotEq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Id_LT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Id_LE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Id_GT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Id_GE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) Size_In(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Size_Ins(ins ...int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Size_NotIn(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) Size_Eq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Size_NotEq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Size_LT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Size_LE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Size_GT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Size_GE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) FileType_In(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) FileType_Ins(ins ...int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) FileType_NotIn(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) FileType_Eq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) FileType_NotEq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) FileType_LT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) FileType_LE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) FileType_GT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) FileType_GE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) Width_In(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Width_Ins(ins ...int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Width_NotIn(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) Width_Eq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Width_NotEq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Width_LT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Width_LE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Width_GT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Width_GE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) Height_In(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Height_Ins(ins ...int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Height_NotIn(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) Height_Eq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Height_NotEq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Height_LT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Height_LE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Height_GT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Height_GE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) Duration_In(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Duration_Ins(ins ...int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Duration_NotIn(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) Duration_Eq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Duration_NotEq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Duration_LT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Duration_LE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Duration_GT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Duration_GE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) ServerId_In(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) ServerId_Ins(ins ...int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) ServerId_NotIn(ins []int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) ServerId_Eq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) ServerId_NotEq(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) ServerId_LT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) ServerId_LE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) ServerId_GT(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) ServerId_GE(val int) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MsgFile_Deleter) Name_In(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Name_NotIn(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Deleter) Name_Like(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) Name_Eq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Name_NotEq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) MimeType_In(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MimeType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) MimeType_NotIn(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MimeType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Deleter) MimeType_Like(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MimeType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) MimeType_Eq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MimeType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) MimeType_NotEq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MimeType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) Extension_In(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) Extension_NotIn(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Deleter) Extension_Like(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) Extension_Eq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) Extension_NotEq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) ThumbData64_In(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ThumbData64 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) ThumbData64_NotIn(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ThumbData64 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Deleter) ThumbData64_Like(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ThumbData64 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) ThumbData64_Eq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ThumbData64 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) ThumbData64_NotEq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ThumbData64 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) ServerSrc_In(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) ServerSrc_NotIn(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Deleter) ServerSrc_Like(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) ServerSrc_Eq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) ServerSrc_NotEq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Deleter) ServerPath_In(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Deleter) ServerPath_NotIn(ins []string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Deleter) ServerPath_Like(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Deleter) ServerPath_Eq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Deleter) ServerPath_NotEq(val string) *__MsgFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgFile_Updater) Name_In(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Name_NotIn(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Updater) Name_Like(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) Name_Eq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Name_NotEq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) MimeType_In(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MimeType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) MimeType_NotIn(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MimeType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Updater) MimeType_Like(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MimeType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) MimeType_Eq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MimeType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) MimeType_NotEq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MimeType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) Extension_In(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) Extension_NotIn(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Updater) Extension_Like(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) Extension_Eq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) Extension_NotEq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) ThumbData64_In(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ThumbData64 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) ThumbData64_NotIn(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ThumbData64 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Updater) ThumbData64_Like(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ThumbData64 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) ThumbData64_Eq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ThumbData64 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) ThumbData64_NotEq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ThumbData64 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) ServerSrc_In(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) ServerSrc_NotIn(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Updater) ServerSrc_Like(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) ServerSrc_Eq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) ServerSrc_NotEq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Updater) ServerPath_In(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Updater) ServerPath_NotIn(ins []string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Updater) ServerPath_Like(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Updater) ServerPath_Eq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Updater) ServerPath_NotEq(val string) *__MsgFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgFile_Selector) Name_In(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Name_NotIn(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Selector) Name_Like(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) Name_Eq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Name_NotEq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) MimeType_In(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MimeType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) MimeType_NotIn(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MimeType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Selector) MimeType_Like(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MimeType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) MimeType_Eq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MimeType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) MimeType_NotEq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MimeType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) Extension_In(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) Extension_NotIn(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Selector) Extension_Like(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) Extension_Eq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) Extension_NotEq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) ThumbData64_In(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ThumbData64 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) ThumbData64_NotIn(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ThumbData64 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Selector) ThumbData64_Like(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ThumbData64 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) ThumbData64_Eq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ThumbData64 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) ThumbData64_NotEq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ThumbData64 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) ServerSrc_In(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) ServerSrc_NotIn(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Selector) ServerSrc_Like(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) ServerSrc_Eq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) ServerSrc_NotEq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgFile_Selector) ServerPath_In(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgFile_Selector) ServerPath_NotIn(ins []string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgFile_Selector) ServerPath_Like(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgFile_Selector) ServerPath_Eq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgFile_Selector) ServerPath_NotEq(val string) *__MsgFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MsgFile_Updater) Id(newVal int) *__MsgFile_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__MsgFile_Updater) Id_Increment(count int) *__MsgFile_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MsgFile_Updater) Name(newVal string) *__MsgFile_Updater {
	u.updates[" Name = ? "] = newVal
	return u
}

//ints

func (u *__MsgFile_Updater) Size(newVal int) *__MsgFile_Updater {
	u.updates[" Size = ? "] = newVal
	return u
}

func (u *__MsgFile_Updater) Size_Increment(count int) *__MsgFile_Updater {
	if count > 0 {
		u.updates[" Size = Size+? "] = count
	}

	if count < 0 {
		u.updates[" Size = Size-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgFile_Updater) FileType(newVal int) *__MsgFile_Updater {
	u.updates[" FileType = ? "] = newVal
	return u
}

func (u *__MsgFile_Updater) FileType_Increment(count int) *__MsgFile_Updater {
	if count > 0 {
		u.updates[" FileType = FileType+? "] = count
	}

	if count < 0 {
		u.updates[" FileType = FileType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MsgFile_Updater) MimeType(newVal string) *__MsgFile_Updater {
	u.updates[" MimeType = ? "] = newVal
	return u
}

//ints

func (u *__MsgFile_Updater) Width(newVal int) *__MsgFile_Updater {
	u.updates[" Width = ? "] = newVal
	return u
}

func (u *__MsgFile_Updater) Width_Increment(count int) *__MsgFile_Updater {
	if count > 0 {
		u.updates[" Width = Width+? "] = count
	}

	if count < 0 {
		u.updates[" Width = Width-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgFile_Updater) Height(newVal int) *__MsgFile_Updater {
	u.updates[" Height = ? "] = newVal
	return u
}

func (u *__MsgFile_Updater) Height_Increment(count int) *__MsgFile_Updater {
	if count > 0 {
		u.updates[" Height = Height+? "] = count
	}

	if count < 0 {
		u.updates[" Height = Height-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgFile_Updater) Duration(newVal int) *__MsgFile_Updater {
	u.updates[" Duration = ? "] = newVal
	return u
}

func (u *__MsgFile_Updater) Duration_Increment(count int) *__MsgFile_Updater {
	if count > 0 {
		u.updates[" Duration = Duration+? "] = count
	}

	if count < 0 {
		u.updates[" Duration = Duration-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MsgFile_Updater) Extension(newVal string) *__MsgFile_Updater {
	u.updates[" Extension = ? "] = newVal
	return u
}

//ints

//string

//ints

//string
func (u *__MsgFile_Updater) ThumbData64(newVal string) *__MsgFile_Updater {
	u.updates[" ThumbData64 = ? "] = newVal
	return u
}

//ints

//string
func (u *__MsgFile_Updater) ServerSrc(newVal string) *__MsgFile_Updater {
	u.updates[" ServerSrc = ? "] = newVal
	return u
}

//ints

//string
func (u *__MsgFile_Updater) ServerPath(newVal string) *__MsgFile_Updater {
	u.updates[" ServerPath = ? "] = newVal
	return u
}

//ints

func (u *__MsgFile_Updater) ServerId(newVal int) *__MsgFile_Updater {
	u.updates[" ServerId = ? "] = newVal
	return u
}

func (u *__MsgFile_Updater) ServerId_Increment(count int) *__MsgFile_Updater {
	if count > 0 {
		u.updates[" ServerId = ServerId+? "] = count
	}

	if count < 0 {
		u.updates[" ServerId = ServerId-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MsgFile_Selector) OrderBy_Id_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_Id_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MsgFile_Selector) Select_Id() *__MsgFile_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MsgFile_Selector) OrderBy_Name_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Name DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_Name_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Name ASC "
	return u
}

func (u *__MsgFile_Selector) Select_Name() *__MsgFile_Selector {
	u.selectCol = "Name"
	return u
}

func (u *__MsgFile_Selector) OrderBy_Size_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Size DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_Size_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Size ASC "
	return u
}

func (u *__MsgFile_Selector) Select_Size() *__MsgFile_Selector {
	u.selectCol = "Size"
	return u
}

func (u *__MsgFile_Selector) OrderBy_FileType_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY FileType DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_FileType_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY FileType ASC "
	return u
}

func (u *__MsgFile_Selector) Select_FileType() *__MsgFile_Selector {
	u.selectCol = "FileType"
	return u
}

func (u *__MsgFile_Selector) OrderBy_MimeType_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY MimeType DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_MimeType_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY MimeType ASC "
	return u
}

func (u *__MsgFile_Selector) Select_MimeType() *__MsgFile_Selector {
	u.selectCol = "MimeType"
	return u
}

func (u *__MsgFile_Selector) OrderBy_Width_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Width DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_Width_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Width ASC "
	return u
}

func (u *__MsgFile_Selector) Select_Width() *__MsgFile_Selector {
	u.selectCol = "Width"
	return u
}

func (u *__MsgFile_Selector) OrderBy_Height_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Height DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_Height_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Height ASC "
	return u
}

func (u *__MsgFile_Selector) Select_Height() *__MsgFile_Selector {
	u.selectCol = "Height"
	return u
}

func (u *__MsgFile_Selector) OrderBy_Duration_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Duration DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_Duration_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Duration ASC "
	return u
}

func (u *__MsgFile_Selector) Select_Duration() *__MsgFile_Selector {
	u.selectCol = "Duration"
	return u
}

func (u *__MsgFile_Selector) OrderBy_Extension_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Extension DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_Extension_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY Extension ASC "
	return u
}

func (u *__MsgFile_Selector) Select_Extension() *__MsgFile_Selector {
	u.selectCol = "Extension"
	return u
}

func (u *__MsgFile_Selector) OrderBy_ThumbData_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ThumbData DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_ThumbData_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ThumbData ASC "
	return u
}

func (u *__MsgFile_Selector) Select_ThumbData() *__MsgFile_Selector {
	u.selectCol = "ThumbData"
	return u
}

func (u *__MsgFile_Selector) OrderBy_ThumbData64_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ThumbData64 DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_ThumbData64_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ThumbData64 ASC "
	return u
}

func (u *__MsgFile_Selector) Select_ThumbData64() *__MsgFile_Selector {
	u.selectCol = "ThumbData64"
	return u
}

func (u *__MsgFile_Selector) OrderBy_ServerSrc_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ServerSrc DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_ServerSrc_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ServerSrc ASC "
	return u
}

func (u *__MsgFile_Selector) Select_ServerSrc() *__MsgFile_Selector {
	u.selectCol = "ServerSrc"
	return u
}

func (u *__MsgFile_Selector) OrderBy_ServerPath_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ServerPath DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_ServerPath_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ServerPath ASC "
	return u
}

func (u *__MsgFile_Selector) Select_ServerPath() *__MsgFile_Selector {
	u.selectCol = "ServerPath"
	return u
}

func (u *__MsgFile_Selector) OrderBy_ServerId_Desc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ServerId DESC "
	return u
}

func (u *__MsgFile_Selector) OrderBy_ServerId_Asc() *__MsgFile_Selector {
	u.orderBy = " ORDER BY ServerId ASC "
	return u
}

func (u *__MsgFile_Selector) Select_ServerId() *__MsgFile_Selector {
	u.selectCol = "ServerId"
	return u
}

func (u *__MsgFile_Selector) Limit(num int) *__MsgFile_Selector {
	u.limit = num
	return u
}

func (u *__MsgFile_Selector) Offset(num int) *__MsgFile_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MsgFile_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.msg_file"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MsgFile_Selector) GetRow(db *sqlx.DB) (*MsgFile, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MsgFile{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnMsgFile_LoadOne(row)

	return row, nil
}

func (u *__MsgFile_Selector) GetRows(db *sqlx.DB) ([]*MsgFile, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MsgFile
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMsgFile_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__MsgFile_Selector) GetRows2(db *sqlx.DB) ([]MsgFile, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MsgFile
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMsgFile_LoadMany(rows)

	rows2 := make([]MsgFile, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__MsgFile_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__MsgFile_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MsgFile_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MsgFile_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MsgFile_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.msg_file SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__MsgFile_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.msg_file WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MsgFile ////////////////
func MassInsert_MsgFile(rows []MsgFile, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.msg_file (" +
		"Name, Size, FileType, MimeType, Width, Height, Duration, Extension, ThumbData, ThumbData64, ServerSrc, ServerPath, ServerId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Size)
		vals = append(vals, row.FileType)
		vals = append(vals, row.MimeType)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Duration)
		vals = append(vals, row.Extension)
		vals = append(vals, row.ThumbData)
		vals = append(vals, row.ThumbData64)
		vals = append(vals, row.ServerSrc)
		vals = append(vals, row.ServerPath)
		vals = append(vals, row.ServerId)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_MsgFile(rows []MsgFile, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.msg_file (" +
		"Name, Size, FileType, MimeType, Width, Height, Duration, Extension, ThumbData, ThumbData64, ServerSrc, ServerPath, ServerId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Size)
		vals = append(vals, row.FileType)
		vals = append(vals, row.MimeType)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Duration)
		vals = append(vals, row.Extension)
		vals = append(vals, row.ThumbData)
		vals = append(vals, row.ThumbData64)
		vals = append(vals, row.ServerSrc)
		vals = append(vals, row.ServerPath)
		vals = append(vals, row.ServerId)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

// MsgFileById retrieves a row from 'ms.msg_file' as a MsgFile.
//
// Generated from index 'msg_file_Id_pkey'.
func MsgFileById(db XODB, id int) (*MsgFile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Name, Size, FileType, MimeType, Width, Height, Duration, Extension, ThumbData, ThumbData64, ServerSrc, ServerPath, ServerId ` +
		`FROM ms.msg_file ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	mf := MsgFile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mf.Id, &mf.Name, &mf.Size, &mf.FileType, &mf.MimeType, &mf.Width, &mf.Height, &mf.Duration, &mf.Extension, &mf.ThumbData, &mf.ThumbData64, &mf.ServerSrc, &mf.ServerPath, &mf.ServerId)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnMsgFile_LoadOne(&mf)

	return &mf, nil
}
