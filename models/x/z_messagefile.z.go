// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// MessageFile represents a row from 'ms.message_file'.

// Manualy copy this to project
type MessageFile__ struct {
	MessageFileId   int    `json:"MessageFileId"`   // MessageFileId -
	MessageFileKey  string `json:"MessageFileKey"`  // MessageFileKey -
	OriginalUserId  int    `json:"OriginalUserId"`  // OriginalUserId -
	Name            string `json:"Name"`            // Name -
	Size            int    `json:"Size"`            // Size -
	FileTypeEnumId  int    `json:"FileTypeEnumId"`  // FileTypeEnumId -
	Width           int    `json:"Width"`           // Width -
	Height          int    `json:"Height"`          // Height -
	Duration        int    `json:"Duration"`        // Duration -
	Extension       string `json:"Extension"`       // Extension -
	HashMd5         string `json:"HashMd5"`         // HashMd5 -
	HashAccess      int    `json:"HashAccess"`      // HashAccess -
	CreatedSe       int    `json:"CreatedSe"`       // CreatedSe -
	ServerSrc       string `json:"ServerSrc"`       // ServerSrc -
	ServerPath      string `json:"ServerPath"`      // ServerPath -
	ServerThumbPath string `json:"ServerThumbPath"` // ServerThumbPath -
	BucketId        string `json:"BucketId"`        // BucketId -
	ServerId        int    `json:"ServerId"`        // ServerId -
	CanDel          int    `json:"CanDel"`          // CanDel -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MessageFile exists in the database.
func (mf *MessageFile) Exists() bool {
	return mf._exists
}

// Deleted provides information if the MessageFile has been deleted from the database.
func (mf *MessageFile) Deleted() bool {
	return mf._deleted
}

// Insert inserts the MessageFile to the database.
func (mf *MessageFile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.message_file (` +
		`MessageFileKey, OriginalUserId, Name, Size, FileTypeEnumId, Width, Height, Duration, Extension, HashMd5, HashAccess, CreatedSe, ServerSrc, ServerPath, ServerThumbPath, BucketId, ServerId, CanDel` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mf.MessageFileKey, mf.OriginalUserId, mf.Name, mf.Size, mf.FileTypeEnumId, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.HashMd5, mf.HashAccess, mf.CreatedSe, mf.ServerSrc, mf.ServerPath, mf.ServerThumbPath, mf.BucketId, mf.ServerId, mf.CanDel)
	res, err := db.Exec(sqlstr, mf.MessageFileKey, mf.OriginalUserId, mf.Name, mf.Size, mf.FileTypeEnumId, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.HashMd5, mf.HashAccess, mf.CreatedSe, mf.ServerSrc, mf.ServerPath, mf.ServerThumbPath, mf.BucketId, mf.ServerId, mf.CanDel)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	mf.MessageFileId = int(id)
	mf._exists = true

	OnMessageFile_AfterInsert(mf)

	return nil
}

// Insert inserts the MessageFile to the database.
func (mf *MessageFile) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.message_file (` +
		`MessageFileKey, OriginalUserId, Name, Size, FileTypeEnumId, Width, Height, Duration, Extension, HashMd5, HashAccess, CreatedSe, ServerSrc, ServerPath, ServerThumbPath, BucketId, ServerId, CanDel` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mf.MessageFileKey, mf.OriginalUserId, mf.Name, mf.Size, mf.FileTypeEnumId, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.HashMd5, mf.HashAccess, mf.CreatedSe, mf.ServerSrc, mf.ServerPath, mf.ServerThumbPath, mf.BucketId, mf.ServerId, mf.CanDel)
	res, err := db.Exec(sqlstr, mf.MessageFileKey, mf.OriginalUserId, mf.Name, mf.Size, mf.FileTypeEnumId, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.HashMd5, mf.HashAccess, mf.CreatedSe, mf.ServerSrc, mf.ServerPath, mf.ServerThumbPath, mf.BucketId, mf.ServerId, mf.CanDel)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	mf.MessageFileId = int(id)
	mf._exists = true

	OnMessageFile_AfterInsert(mf)

	return nil
}

// Update updates the MessageFile in the database.
func (mf *MessageFile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mf._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.message_file SET ` +
		`MessageFileKey = ?, OriginalUserId = ?, Name = ?, Size = ?, FileTypeEnumId = ?, Width = ?, Height = ?, Duration = ?, Extension = ?, HashMd5 = ?, HashAccess = ?, CreatedSe = ?, ServerSrc = ?, ServerPath = ?, ServerThumbPath = ?, BucketId = ?, ServerId = ?, CanDel = ?` +
		` WHERE MessageFileId = ?`

	// run query
	XOLog(sqlstr, mf.MessageFileKey, mf.OriginalUserId, mf.Name, mf.Size, mf.FileTypeEnumId, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.HashMd5, mf.HashAccess, mf.CreatedSe, mf.ServerSrc, mf.ServerPath, mf.ServerThumbPath, mf.BucketId, mf.ServerId, mf.CanDel, mf.MessageFileId)
	_, err = db.Exec(sqlstr, mf.MessageFileKey, mf.OriginalUserId, mf.Name, mf.Size, mf.FileTypeEnumId, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.HashMd5, mf.HashAccess, mf.CreatedSe, mf.ServerSrc, mf.ServerPath, mf.ServerThumbPath, mf.BucketId, mf.ServerId, mf.CanDel, mf.MessageFileId)

	XOLogErr(err)
	OnMessageFile_AfterUpdate(mf)

	return err
}

// Save saves the MessageFile to the database.
func (mf *MessageFile) Save(db XODB) error {
	if mf.Exists() {
		return mf.Update(db)
	}

	return mf.Replace(db)
}

// Delete deletes the MessageFile from the database.
func (mf *MessageFile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mf._exists {
		return nil
	}

	// if deleted, bail
	if mf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.message_file WHERE MessageFileId = ?`

	// run query
	XOLog(sqlstr, mf.MessageFileId)
	_, err = db.Exec(sqlstr, mf.MessageFileId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	mf._deleted = true

	OnMessageFile_AfterDelete(mf)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MessageFile_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MessageFile_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MessageFile_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMessageFile_Deleter() *__MessageFile_Deleter {
	d := __MessageFile_Deleter{whereSep: " AND "}
	return &d
}

func NewMessageFile_Updater() *__MessageFile_Updater {
	u := __MessageFile_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMessageFile_Selector() *__MessageFile_Selector {
	u := __MessageFile_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MessageFile_Deleter) Or() *__MessageFile_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MessageFile_Deleter) MessageFileId_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) MessageFileId_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) MessageFileId_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) MessageFileId_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) OriginalUserId_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OriginalUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) OriginalUserId_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OriginalUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) OriginalUserId_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OriginalUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) OriginalUserId_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) OriginalUserId_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) OriginalUserId_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) OriginalUserId_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) OriginalUserId_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) OriginalUserId_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Size_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Size_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Size_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Size_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) FileTypeEnumId_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) FileTypeEnumId_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) FileTypeEnumId_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) FileTypeEnumId_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnumId_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnumId_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnumId_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnumId_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnumId_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Width_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Width_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Width_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Width_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Height_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Height_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Height_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Height_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Duration_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Duration_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Duration_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Duration_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) HashAccess_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashAccess IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) HashAccess_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashAccess IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) HashAccess_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashAccess NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) HashAccess_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) HashAccess_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) HashAccess_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) HashAccess_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) HashAccess_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) HashAccess_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) CreatedSe_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) CreatedSe_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) CreatedSe_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) CreatedSe_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedSe_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedSe_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedSe_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedSe_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedSe_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) ServerId_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) ServerId_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) ServerId_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) ServerId_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) ServerId_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) ServerId_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) ServerId_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) ServerId_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) ServerId_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) CanDel_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CanDel IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) CanDel_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CanDel IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) CanDel_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CanDel NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) CanDel_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CanDel_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CanDel_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CanDel_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CanDel_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CanDel_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MessageFile_Updater) Or() *__MessageFile_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MessageFile_Updater) MessageFileId_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) MessageFileId_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) MessageFileId_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) MessageFileId_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) OriginalUserId_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OriginalUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) OriginalUserId_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OriginalUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) OriginalUserId_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OriginalUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) OriginalUserId_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) OriginalUserId_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) OriginalUserId_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) OriginalUserId_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) OriginalUserId_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) OriginalUserId_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Size_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Size_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Size_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Size_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) FileTypeEnumId_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) FileTypeEnumId_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) FileTypeEnumId_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) FileTypeEnumId_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnumId_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnumId_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnumId_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnumId_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnumId_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Width_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Width_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Width_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Width_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Height_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Height_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Height_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Height_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Duration_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Duration_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Duration_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Duration_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) HashAccess_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashAccess IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) HashAccess_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashAccess IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) HashAccess_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashAccess NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) HashAccess_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) HashAccess_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) HashAccess_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) HashAccess_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) HashAccess_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) HashAccess_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) CreatedSe_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) CreatedSe_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) CreatedSe_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) CreatedSe_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedSe_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedSe_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedSe_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedSe_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedSe_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) ServerId_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) ServerId_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) ServerId_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) ServerId_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) ServerId_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) ServerId_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) ServerId_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) ServerId_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) ServerId_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) CanDel_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CanDel IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) CanDel_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CanDel IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) CanDel_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CanDel NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) CanDel_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CanDel_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CanDel_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CanDel_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CanDel_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CanDel_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MessageFile_Selector) Or() *__MessageFile_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MessageFile_Selector) MessageFileId_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) MessageFileId_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) MessageFileId_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) MessageFileId_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) OriginalUserId_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OriginalUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) OriginalUserId_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OriginalUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) OriginalUserId_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OriginalUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) OriginalUserId_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) OriginalUserId_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) OriginalUserId_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) OriginalUserId_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) OriginalUserId_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) OriginalUserId_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OriginalUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Size_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Size_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Size_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Size_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) FileTypeEnumId_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) FileTypeEnumId_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) FileTypeEnumId_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) FileTypeEnumId_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnumId_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnumId_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnumId_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnumId_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnumId_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Width_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Width_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Width_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Width_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Height_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Height_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Height_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Height_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Duration_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Duration_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Duration_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Duration_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) HashAccess_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashAccess IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) HashAccess_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashAccess IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) HashAccess_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashAccess NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) HashAccess_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) HashAccess_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) HashAccess_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) HashAccess_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) HashAccess_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) HashAccess_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashAccess >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) CreatedSe_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) CreatedSe_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) CreatedSe_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) CreatedSe_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedSe_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedSe_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedSe_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedSe_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedSe_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) ServerId_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) ServerId_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) ServerId_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) ServerId_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) ServerId_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) ServerId_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) ServerId_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) ServerId_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) ServerId_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) CanDel_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CanDel IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) CanDel_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CanDel IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) CanDel_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CanDel NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) CanDel_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CanDel_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CanDel_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CanDel_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CanDel_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CanDel_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CanDel >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MessageFile_Deleter) MessageFileKey_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) MessageFileKey_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) MessageFileKey_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) MessageFileKey_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileKey_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Name_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Name_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) Name_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Name_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Name_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Extension_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Extension_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) Extension_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Extension_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Extension_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) HashMd5_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) HashMd5_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) HashMd5_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) HashMd5_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) HashMd5_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) ServerSrc_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) ServerSrc_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) ServerSrc_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) ServerSrc_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) ServerSrc_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) ServerPath_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) ServerPath_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) ServerPath_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) ServerPath_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) ServerPath_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) ServerThumbPath_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerThumbPath IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) ServerThumbPath_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerThumbPath NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) ServerThumbPath_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerThumbPath LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) ServerThumbPath_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerThumbPath = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) ServerThumbPath_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerThumbPath != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) BucketId_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) BucketId_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) BucketId_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) BucketId_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) BucketId_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MessageFile_Updater) MessageFileKey_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) MessageFileKey_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) MessageFileKey_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) MessageFileKey_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileKey_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Name_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Name_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) Name_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Name_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Name_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Extension_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Extension_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) Extension_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Extension_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Extension_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) HashMd5_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) HashMd5_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) HashMd5_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) HashMd5_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) HashMd5_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) ServerSrc_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) ServerSrc_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) ServerSrc_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) ServerSrc_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) ServerSrc_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) ServerPath_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) ServerPath_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) ServerPath_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) ServerPath_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) ServerPath_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) ServerThumbPath_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerThumbPath IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) ServerThumbPath_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerThumbPath NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) ServerThumbPath_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerThumbPath LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) ServerThumbPath_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerThumbPath = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) ServerThumbPath_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerThumbPath != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) BucketId_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) BucketId_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) BucketId_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) BucketId_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) BucketId_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MessageFile_Selector) MessageFileKey_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) MessageFileKey_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) MessageFileKey_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) MessageFileKey_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileKey_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Name_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Name_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) Name_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Name_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Name_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Extension_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Extension_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) Extension_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Extension_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Extension_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) HashMd5_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) HashMd5_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashMd5 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) HashMd5_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) HashMd5_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) HashMd5_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashMd5 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) ServerSrc_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) ServerSrc_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerSrc NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) ServerSrc_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) ServerSrc_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) ServerSrc_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerSrc != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) ServerPath_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) ServerPath_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerPath NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) ServerPath_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) ServerPath_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) ServerPath_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerPath != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) ServerThumbPath_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerThumbPath IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) ServerThumbPath_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ServerThumbPath NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) ServerThumbPath_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerThumbPath LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) ServerThumbPath_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerThumbPath = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) ServerThumbPath_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ServerThumbPath != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) BucketId_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) BucketId_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BucketId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) BucketId_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) BucketId_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) BucketId_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BucketId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MessageFile_Updater) MessageFileId(newVal int) *__MessageFile_Updater {
	u.updates[" MessageFileId = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) MessageFileId_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" MessageFileId = MessageFileId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageFileId = MessageFileId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MessageFile_Updater) MessageFileKey(newVal string) *__MessageFile_Updater {
	u.updates[" MessageFileKey = ? "] = newVal
	return u
}

//ints

func (u *__MessageFile_Updater) OriginalUserId(newVal int) *__MessageFile_Updater {
	u.updates[" OriginalUserId = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) OriginalUserId_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" OriginalUserId = OriginalUserId+? "] = count
	}

	if count < 0 {
		u.updates[" OriginalUserId = OriginalUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MessageFile_Updater) Name(newVal string) *__MessageFile_Updater {
	u.updates[" Name = ? "] = newVal
	return u
}

//ints

func (u *__MessageFile_Updater) Size(newVal int) *__MessageFile_Updater {
	u.updates[" Size = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) Size_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" Size = Size+? "] = count
	}

	if count < 0 {
		u.updates[" Size = Size-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) FileTypeEnumId(newVal int) *__MessageFile_Updater {
	u.updates[" FileTypeEnumId = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) FileTypeEnumId_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" FileTypeEnumId = FileTypeEnumId+? "] = count
	}

	if count < 0 {
		u.updates[" FileTypeEnumId = FileTypeEnumId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) Width(newVal int) *__MessageFile_Updater {
	u.updates[" Width = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) Width_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" Width = Width+? "] = count
	}

	if count < 0 {
		u.updates[" Width = Width-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) Height(newVal int) *__MessageFile_Updater {
	u.updates[" Height = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) Height_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" Height = Height+? "] = count
	}

	if count < 0 {
		u.updates[" Height = Height-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) Duration(newVal int) *__MessageFile_Updater {
	u.updates[" Duration = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) Duration_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" Duration = Duration+? "] = count
	}

	if count < 0 {
		u.updates[" Duration = Duration-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MessageFile_Updater) Extension(newVal string) *__MessageFile_Updater {
	u.updates[" Extension = ? "] = newVal
	return u
}

//ints

//string
func (u *__MessageFile_Updater) HashMd5(newVal string) *__MessageFile_Updater {
	u.updates[" HashMd5 = ? "] = newVal
	return u
}

//ints

func (u *__MessageFile_Updater) HashAccess(newVal int) *__MessageFile_Updater {
	u.updates[" HashAccess = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) HashAccess_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" HashAccess = HashAccess+? "] = count
	}

	if count < 0 {
		u.updates[" HashAccess = HashAccess-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) CreatedSe(newVal int) *__MessageFile_Updater {
	u.updates[" CreatedSe = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) CreatedSe_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" CreatedSe = CreatedSe+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedSe = CreatedSe-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MessageFile_Updater) ServerSrc(newVal string) *__MessageFile_Updater {
	u.updates[" ServerSrc = ? "] = newVal
	return u
}

//ints

//string
func (u *__MessageFile_Updater) ServerPath(newVal string) *__MessageFile_Updater {
	u.updates[" ServerPath = ? "] = newVal
	return u
}

//ints

//string
func (u *__MessageFile_Updater) ServerThumbPath(newVal string) *__MessageFile_Updater {
	u.updates[" ServerThumbPath = ? "] = newVal
	return u
}

//ints

//string
func (u *__MessageFile_Updater) BucketId(newVal string) *__MessageFile_Updater {
	u.updates[" BucketId = ? "] = newVal
	return u
}

//ints

func (u *__MessageFile_Updater) ServerId(newVal int) *__MessageFile_Updater {
	u.updates[" ServerId = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) ServerId_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" ServerId = ServerId+? "] = count
	}

	if count < 0 {
		u.updates[" ServerId = ServerId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) CanDel(newVal int) *__MessageFile_Updater {
	u.updates[" CanDel = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) CanDel_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" CanDel = CanDel+? "] = count
	}

	if count < 0 {
		u.updates[" CanDel = CanDel-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MessageFile_Selector) OrderBy_MessageFileId_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY MessageFileId DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_MessageFileId_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY MessageFileId ASC "
	return u
}

func (u *__MessageFile_Selector) Select_MessageFileId() *__MessageFile_Selector {
	u.selectCol = "MessageFileId"
	return u
}

func (u *__MessageFile_Selector) OrderBy_MessageFileKey_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY MessageFileKey DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_MessageFileKey_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY MessageFileKey ASC "
	return u
}

func (u *__MessageFile_Selector) Select_MessageFileKey() *__MessageFile_Selector {
	u.selectCol = "MessageFileKey"
	return u
}

func (u *__MessageFile_Selector) OrderBy_OriginalUserId_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY OriginalUserId DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_OriginalUserId_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY OriginalUserId ASC "
	return u
}

func (u *__MessageFile_Selector) Select_OriginalUserId() *__MessageFile_Selector {
	u.selectCol = "OriginalUserId"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Name_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Name DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Name_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Name ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Name() *__MessageFile_Selector {
	u.selectCol = "Name"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Size_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Size DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Size_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Size ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Size() *__MessageFile_Selector {
	u.selectCol = "Size"
	return u
}

func (u *__MessageFile_Selector) OrderBy_FileTypeEnumId_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY FileTypeEnumId DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_FileTypeEnumId_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY FileTypeEnumId ASC "
	return u
}

func (u *__MessageFile_Selector) Select_FileTypeEnumId() *__MessageFile_Selector {
	u.selectCol = "FileTypeEnumId"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Width_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Width DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Width_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Width ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Width() *__MessageFile_Selector {
	u.selectCol = "Width"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Height_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Height DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Height_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Height ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Height() *__MessageFile_Selector {
	u.selectCol = "Height"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Duration_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Duration DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Duration_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Duration ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Duration() *__MessageFile_Selector {
	u.selectCol = "Duration"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Extension_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Extension DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Extension_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Extension ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Extension() *__MessageFile_Selector {
	u.selectCol = "Extension"
	return u
}

func (u *__MessageFile_Selector) OrderBy_HashMd5_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY HashMd5 DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_HashMd5_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY HashMd5 ASC "
	return u
}

func (u *__MessageFile_Selector) Select_HashMd5() *__MessageFile_Selector {
	u.selectCol = "HashMd5"
	return u
}

func (u *__MessageFile_Selector) OrderBy_HashAccess_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY HashAccess DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_HashAccess_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY HashAccess ASC "
	return u
}

func (u *__MessageFile_Selector) Select_HashAccess() *__MessageFile_Selector {
	u.selectCol = "HashAccess"
	return u
}

func (u *__MessageFile_Selector) OrderBy_CreatedSe_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY CreatedSe DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_CreatedSe_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY CreatedSe ASC "
	return u
}

func (u *__MessageFile_Selector) Select_CreatedSe() *__MessageFile_Selector {
	u.selectCol = "CreatedSe"
	return u
}

func (u *__MessageFile_Selector) OrderBy_ServerSrc_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY ServerSrc DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_ServerSrc_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY ServerSrc ASC "
	return u
}

func (u *__MessageFile_Selector) Select_ServerSrc() *__MessageFile_Selector {
	u.selectCol = "ServerSrc"
	return u
}

func (u *__MessageFile_Selector) OrderBy_ServerPath_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY ServerPath DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_ServerPath_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY ServerPath ASC "
	return u
}

func (u *__MessageFile_Selector) Select_ServerPath() *__MessageFile_Selector {
	u.selectCol = "ServerPath"
	return u
}

func (u *__MessageFile_Selector) OrderBy_ServerThumbPath_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY ServerThumbPath DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_ServerThumbPath_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY ServerThumbPath ASC "
	return u
}

func (u *__MessageFile_Selector) Select_ServerThumbPath() *__MessageFile_Selector {
	u.selectCol = "ServerThumbPath"
	return u
}

func (u *__MessageFile_Selector) OrderBy_BucketId_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY BucketId DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_BucketId_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY BucketId ASC "
	return u
}

func (u *__MessageFile_Selector) Select_BucketId() *__MessageFile_Selector {
	u.selectCol = "BucketId"
	return u
}

func (u *__MessageFile_Selector) OrderBy_ServerId_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY ServerId DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_ServerId_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY ServerId ASC "
	return u
}

func (u *__MessageFile_Selector) Select_ServerId() *__MessageFile_Selector {
	u.selectCol = "ServerId"
	return u
}

func (u *__MessageFile_Selector) OrderBy_CanDel_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY CanDel DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_CanDel_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY CanDel ASC "
	return u
}

func (u *__MessageFile_Selector) Select_CanDel() *__MessageFile_Selector {
	u.selectCol = "CanDel"
	return u
}

func (u *__MessageFile_Selector) Limit(num int) *__MessageFile_Selector {
	u.limit = num
	return u
}

func (u *__MessageFile_Selector) Offset(num int) *__MessageFile_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MessageFile_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.message_file"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MessageFile_Selector) GetRow(db *sqlx.DB) (*MessageFile, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MessageFile{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnMessageFile_LoadOne(row)

	return row, nil
}

func (u *__MessageFile_Selector) GetRows(db *sqlx.DB) ([]*MessageFile, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MessageFile
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMessageFile_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__MessageFile_Selector) GetRows2(db *sqlx.DB) ([]MessageFile, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MessageFile
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMessageFile_LoadMany(rows)

	rows2 := make([]MessageFile, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__MessageFile_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__MessageFile_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MessageFile_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MessageFile_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MessageFile_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.message_file SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__MessageFile_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.message_file WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MessageFile ////////////////
func MassInsert_MessageFile(rows []MessageFile, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.message_file (" +
		"MessageFileKey, OriginalUserId, Name, Size, FileTypeEnumId, Width, Height, Duration, Extension, HashMd5, HashAccess, CreatedSe, ServerSrc, ServerPath, ServerThumbPath, BucketId, ServerId, CanDel" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MessageFileKey)
		vals = append(vals, row.OriginalUserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Size)
		vals = append(vals, row.FileTypeEnumId)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Duration)
		vals = append(vals, row.Extension)
		vals = append(vals, row.HashMd5)
		vals = append(vals, row.HashAccess)
		vals = append(vals, row.CreatedSe)
		vals = append(vals, row.ServerSrc)
		vals = append(vals, row.ServerPath)
		vals = append(vals, row.ServerThumbPath)
		vals = append(vals, row.BucketId)
		vals = append(vals, row.ServerId)
		vals = append(vals, row.CanDel)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_MessageFile(rows []MessageFile, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.message_file (" +
		"MessageFileKey, OriginalUserId, Name, Size, FileTypeEnumId, Width, Height, Duration, Extension, HashMd5, HashAccess, CreatedSe, ServerSrc, ServerPath, ServerThumbPath, BucketId, ServerId, CanDel" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MessageFileKey)
		vals = append(vals, row.OriginalUserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Size)
		vals = append(vals, row.FileTypeEnumId)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Duration)
		vals = append(vals, row.Extension)
		vals = append(vals, row.HashMd5)
		vals = append(vals, row.HashAccess)
		vals = append(vals, row.CreatedSe)
		vals = append(vals, row.ServerSrc)
		vals = append(vals, row.ServerPath)
		vals = append(vals, row.ServerThumbPath)
		vals = append(vals, row.BucketId)
		vals = append(vals, row.ServerId)
		vals = append(vals, row.CanDel)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

// MessageFileByMessageFileId retrieves a row from 'ms.message_file' as a MessageFile.
//
// Generated from index 'message_file_MessageFileId_pkey'.
func MessageFileByMessageFileId(db XODB, messageFileId int) (*MessageFile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`MessageFileId, MessageFileKey, OriginalUserId, Name, Size, FileTypeEnumId, Width, Height, Duration, Extension, HashMd5, HashAccess, CreatedSe, ServerSrc, ServerPath, ServerThumbPath, BucketId, ServerId, CanDel ` +
		`FROM ms.message_file ` +
		`WHERE MessageFileId = ?`

	// run query
	XOLog(sqlstr, messageFileId)
	mf := MessageFile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, messageFileId).Scan(&mf.MessageFileId, &mf.MessageFileKey, &mf.OriginalUserId, &mf.Name, &mf.Size, &mf.FileTypeEnumId, &mf.Width, &mf.Height, &mf.Duration, &mf.Extension, &mf.HashMd5, &mf.HashAccess, &mf.CreatedSe, &mf.ServerSrc, &mf.ServerPath, &mf.ServerThumbPath, &mf.BucketId, &mf.ServerId, &mf.CanDel)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnMessageFile_LoadOne(&mf)

	return &mf, nil
}
