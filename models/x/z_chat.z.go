// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// Chat represents a row from 'ms.chat'.

// Manualy copy this to project
type Chat__ struct {
	ChatId         int    `json:"ChatId"`         // ChatId -
	ChatKey        string `json:"ChatKey"`        // ChatKey -
	RoomTypeEnumId int    `json:"RoomTypeEnumId"` // RoomTypeEnumId -
	UserId         int    `json:"UserId"`         // UserId -
	LastSeqSeen    int    `json:"LastSeqSeen"`    // LastSeqSeen -
	LastSeqDelete  int    `json:"LastSeqDelete"`  // LastSeqDelete -
	PeerUserId     int    `json:"PeerUserId"`     // PeerUserId -
	GroupId        int    `json:"GroupId"`        // GroupId -
	CreatedTime    int    `json:"CreatedTime"`    // CreatedTime -
	CurrentSeq     int    `json:"CurrentSeq"`     // CurrentSeq -
	UpdatedMs      int    `json:"UpdatedMs"`      // UpdatedMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Chat exists in the database.
func (c *Chat) Exists() bool {
	return c._exists
}

// Deleted provides information if the Chat has been deleted from the database.
func (c *Chat) Deleted() bool {
	return c._deleted
}

// Insert inserts the Chat to the database.
func (c *Chat) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ms.chat (` +
		`ChatId, ChatKey, RoomTypeEnumId, UserId, LastSeqSeen, LastSeqDelete, PeerUserId, GroupId, CreatedTime, CurrentSeq, UpdatedMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.ChatId, c.ChatKey, c.RoomTypeEnumId, c.UserId, c.LastSeqSeen, c.LastSeqDelete, c.PeerUserId, c.GroupId, c.CreatedTime, c.CurrentSeq, c.UpdatedMs)
	_, err = db.Exec(sqlstr, c.ChatId, c.ChatKey, c.RoomTypeEnumId, c.UserId, c.LastSeqSeen, c.LastSeqDelete, c.PeerUserId, c.GroupId, c.CreatedTime, c.CurrentSeq, c.UpdatedMs)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	OnChat_AfterInsert(c)

	return nil
}

// Insert inserts the Chat to the database.
func (c *Chat) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.chat (` +
		`ChatKey, RoomTypeEnumId, UserId, LastSeqSeen, LastSeqDelete, PeerUserId, GroupId, CreatedTime, CurrentSeq, UpdatedMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.ChatKey, c.RoomTypeEnumId, c.UserId, c.LastSeqSeen, c.LastSeqDelete, c.PeerUserId, c.GroupId, c.CreatedTime, c.CurrentSeq, c.UpdatedMs)
	res, err := db.Exec(sqlstr, c.ChatKey, c.RoomTypeEnumId, c.UserId, c.LastSeqSeen, c.LastSeqDelete, c.PeerUserId, c.GroupId, c.CreatedTime, c.CurrentSeq, c.UpdatedMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	c.ChatId = int(id)
	c._exists = true

	OnChat_AfterInsert(c)

	return nil
}

// Update updates the Chat in the database.
func (c *Chat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.chat SET ` +
		`ChatKey = ?, RoomTypeEnumId = ?, UserId = ?, LastSeqSeen = ?, LastSeqDelete = ?, PeerUserId = ?, GroupId = ?, CreatedTime = ?, CurrentSeq = ?, UpdatedMs = ?` +
		` WHERE ChatId = ?`

	// run query
	XOLog(sqlstr, c.ChatKey, c.RoomTypeEnumId, c.UserId, c.LastSeqSeen, c.LastSeqDelete, c.PeerUserId, c.GroupId, c.CreatedTime, c.CurrentSeq, c.UpdatedMs, c.ChatId)
	_, err = db.Exec(sqlstr, c.ChatKey, c.RoomTypeEnumId, c.UserId, c.LastSeqSeen, c.LastSeqDelete, c.PeerUserId, c.GroupId, c.CreatedTime, c.CurrentSeq, c.UpdatedMs, c.ChatId)

	XOLogErr(err)
	OnChat_AfterUpdate(c)

	return err
}

// Save saves the Chat to the database.
func (c *Chat) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Replace(db)
}

// Delete deletes the Chat from the database.
func (c *Chat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.chat WHERE ChatId = ?`

	// run query
	XOLog(sqlstr, c.ChatId)
	_, err = db.Exec(sqlstr, c.ChatId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	c._deleted = true

	OnChat_AfterDelete(c)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Chat_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Chat_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Chat_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewChat_Deleter() *__Chat_Deleter {
	d := __Chat_Deleter{whereSep: " AND "}
	return &d
}

func NewChat_Updater() *__Chat_Updater {
	u := __Chat_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewChat_Selector() *__Chat_Selector {
	u := __Chat_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Chat_Deleter) Or() *__Chat_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Chat_Deleter) ChatId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) ChatId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) ChatId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) ChatId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) RoomTypeEnumId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) RoomTypeEnumId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) RoomTypeEnumId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) RoomTypeEnumId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomTypeEnumId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomTypeEnumId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomTypeEnumId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomTypeEnumId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomTypeEnumId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) UserId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UserId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UserId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) UserId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) LastSeqSeen_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqSeen IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastSeqSeen_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqSeen IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastSeqSeen_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqSeen NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) LastSeqSeen_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqSeen_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqSeen_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqSeen_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqSeen_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqSeen_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) LastSeqDelete_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqDelete IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastSeqDelete_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqDelete IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastSeqDelete_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqDelete NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) LastSeqDelete_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqDelete_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqDelete_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqDelete_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqDelete_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastSeqDelete_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) PeerUserId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerUserId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerUserId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) PeerUserId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) GroupId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) GroupId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) GroupId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) GroupId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) CreatedTime_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) CreatedTime_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) CreatedTime_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) CreatedTime_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) CurrentSeq_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) CurrentSeq_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) CurrentSeq_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) CurrentSeq_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CurrentSeq_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CurrentSeq_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CurrentSeq_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CurrentSeq_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CurrentSeq_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) UpdatedMs_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UpdatedMs_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UpdatedMs_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) UpdatedMs_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UpdatedMs_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UpdatedMs_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UpdatedMs_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UpdatedMs_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UpdatedMs_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Chat_Updater) Or() *__Chat_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Chat_Updater) ChatId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) ChatId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) ChatId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) ChatId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) RoomTypeEnumId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) RoomTypeEnumId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) RoomTypeEnumId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) RoomTypeEnumId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomTypeEnumId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomTypeEnumId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomTypeEnumId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomTypeEnumId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomTypeEnumId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) UserId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UserId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UserId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) UserId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) LastSeqSeen_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqSeen IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastSeqSeen_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqSeen IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastSeqSeen_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqSeen NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) LastSeqSeen_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqSeen_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqSeen_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqSeen_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqSeen_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqSeen_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) LastSeqDelete_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqDelete IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastSeqDelete_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqDelete IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastSeqDelete_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqDelete NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) LastSeqDelete_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqDelete_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqDelete_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqDelete_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqDelete_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastSeqDelete_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) PeerUserId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerUserId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerUserId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) PeerUserId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) GroupId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) GroupId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) GroupId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) GroupId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) CreatedTime_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) CreatedTime_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) CreatedTime_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) CreatedTime_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) CurrentSeq_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) CurrentSeq_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) CurrentSeq_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) CurrentSeq_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CurrentSeq_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CurrentSeq_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CurrentSeq_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CurrentSeq_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CurrentSeq_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) UpdatedMs_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UpdatedMs_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UpdatedMs_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) UpdatedMs_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UpdatedMs_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UpdatedMs_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UpdatedMs_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UpdatedMs_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UpdatedMs_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Chat_Selector) Or() *__Chat_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Chat_Selector) ChatId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) ChatId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) ChatId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) ChatId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) RoomTypeEnumId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) RoomTypeEnumId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) RoomTypeEnumId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) RoomTypeEnumId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomTypeEnumId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomTypeEnumId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomTypeEnumId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomTypeEnumId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomTypeEnumId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) UserId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UserId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UserId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) UserId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) LastSeqSeen_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqSeen IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastSeqSeen_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqSeen IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastSeqSeen_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqSeen NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) LastSeqSeen_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqSeen_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqSeen_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqSeen_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqSeen_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqSeen_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqSeen >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) LastSeqDelete_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqDelete IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastSeqDelete_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqDelete IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastSeqDelete_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastSeqDelete NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) LastSeqDelete_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqDelete_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqDelete_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqDelete_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqDelete_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastSeqDelete_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastSeqDelete >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) PeerUserId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerUserId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerUserId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) PeerUserId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) GroupId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) GroupId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) GroupId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) GroupId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) CreatedTime_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) CreatedTime_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) CreatedTime_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) CreatedTime_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) CurrentSeq_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) CurrentSeq_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) CurrentSeq_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) CurrentSeq_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CurrentSeq_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CurrentSeq_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CurrentSeq_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CurrentSeq_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CurrentSeq_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) UpdatedMs_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UpdatedMs_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UpdatedMs_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) UpdatedMs_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UpdatedMs_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UpdatedMs_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UpdatedMs_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UpdatedMs_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UpdatedMs_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Chat_Deleter) ChatKey_In(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) ChatKey_NotIn(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Deleter) ChatKey_Like(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) ChatKey_Eq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatKey_NotEq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Chat_Updater) ChatKey_In(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) ChatKey_NotIn(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Updater) ChatKey_Like(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) ChatKey_Eq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatKey_NotEq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Chat_Selector) ChatKey_In(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) ChatKey_NotIn(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Selector) ChatKey_Like(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) ChatKey_Eq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatKey_NotEq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Chat_Updater) ChatId(newVal int) *__Chat_Updater {
	u.updates[" ChatId = ? "] = newVal
	return u
}

func (u *__Chat_Updater) ChatId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" ChatId = ChatId+? "] = count
	}

	if count < 0 {
		u.updates[" ChatId = ChatId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Chat_Updater) ChatKey(newVal string) *__Chat_Updater {
	u.updates[" ChatKey = ? "] = newVal
	return u
}

//ints

func (u *__Chat_Updater) RoomTypeEnumId(newVal int) *__Chat_Updater {
	u.updates[" RoomTypeEnumId = ? "] = newVal
	return u
}

func (u *__Chat_Updater) RoomTypeEnumId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" RoomTypeEnumId = RoomTypeEnumId+? "] = count
	}

	if count < 0 {
		u.updates[" RoomTypeEnumId = RoomTypeEnumId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) UserId(newVal int) *__Chat_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Chat_Updater) UserId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) LastSeqSeen(newVal int) *__Chat_Updater {
	u.updates[" LastSeqSeen = ? "] = newVal
	return u
}

func (u *__Chat_Updater) LastSeqSeen_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" LastSeqSeen = LastSeqSeen+? "] = count
	}

	if count < 0 {
		u.updates[" LastSeqSeen = LastSeqSeen-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) LastSeqDelete(newVal int) *__Chat_Updater {
	u.updates[" LastSeqDelete = ? "] = newVal
	return u
}

func (u *__Chat_Updater) LastSeqDelete_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" LastSeqDelete = LastSeqDelete+? "] = count
	}

	if count < 0 {
		u.updates[" LastSeqDelete = LastSeqDelete-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) PeerUserId(newVal int) *__Chat_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

func (u *__Chat_Updater) PeerUserId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" PeerUserId = PeerUserId+? "] = count
	}

	if count < 0 {
		u.updates[" PeerUserId = PeerUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) GroupId(newVal int) *__Chat_Updater {
	u.updates[" GroupId = ? "] = newVal
	return u
}

func (u *__Chat_Updater) GroupId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" GroupId = GroupId+? "] = count
	}

	if count < 0 {
		u.updates[" GroupId = GroupId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) CreatedTime(newVal int) *__Chat_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Chat_Updater) CreatedTime_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) CurrentSeq(newVal int) *__Chat_Updater {
	u.updates[" CurrentSeq = ? "] = newVal
	return u
}

func (u *__Chat_Updater) CurrentSeq_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" CurrentSeq = CurrentSeq+? "] = count
	}

	if count < 0 {
		u.updates[" CurrentSeq = CurrentSeq-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) UpdatedMs(newVal int) *__Chat_Updater {
	u.updates[" UpdatedMs = ? "] = newVal
	return u
}

func (u *__Chat_Updater) UpdatedMs_Increment(count int) *__Chat_Updater {
	if count > 0 {
		u.updates[" UpdatedMs = UpdatedMs+? "] = count
	}

	if count < 0 {
		u.updates[" UpdatedMs = UpdatedMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Chat_Selector) OrderBy_ChatId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_ChatId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatId ASC "
	return u
}

func (u *__Chat_Selector) Select_ChatId() *__Chat_Selector {
	u.selectCol = "ChatId"
	return u
}

func (u *__Chat_Selector) OrderBy_ChatKey_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatKey DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_ChatKey_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatKey ASC "
	return u
}

func (u *__Chat_Selector) Select_ChatKey() *__Chat_Selector {
	u.selectCol = "ChatKey"
	return u
}

func (u *__Chat_Selector) OrderBy_RoomTypeEnumId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomTypeEnumId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_RoomTypeEnumId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomTypeEnumId ASC "
	return u
}

func (u *__Chat_Selector) Select_RoomTypeEnumId() *__Chat_Selector {
	u.selectCol = "RoomTypeEnumId"
	return u
}

func (u *__Chat_Selector) OrderBy_UserId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_UserId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Chat_Selector) Select_UserId() *__Chat_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Chat_Selector) OrderBy_LastSeqSeen_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastSeqSeen DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_LastSeqSeen_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastSeqSeen ASC "
	return u
}

func (u *__Chat_Selector) Select_LastSeqSeen() *__Chat_Selector {
	u.selectCol = "LastSeqSeen"
	return u
}

func (u *__Chat_Selector) OrderBy_LastSeqDelete_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastSeqDelete DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_LastSeqDelete_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastSeqDelete ASC "
	return u
}

func (u *__Chat_Selector) Select_LastSeqDelete() *__Chat_Selector {
	u.selectCol = "LastSeqDelete"
	return u
}

func (u *__Chat_Selector) OrderBy_PeerUserId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_PeerUserId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__Chat_Selector) Select_PeerUserId() *__Chat_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__Chat_Selector) OrderBy_GroupId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY GroupId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_GroupId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY GroupId ASC "
	return u
}

func (u *__Chat_Selector) Select_GroupId() *__Chat_Selector {
	u.selectCol = "GroupId"
	return u
}

func (u *__Chat_Selector) OrderBy_CreatedTime_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_CreatedTime_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Chat_Selector) Select_CreatedTime() *__Chat_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Chat_Selector) OrderBy_CurrentSeq_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY CurrentSeq DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_CurrentSeq_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY CurrentSeq ASC "
	return u
}

func (u *__Chat_Selector) Select_CurrentSeq() *__Chat_Selector {
	u.selectCol = "CurrentSeq"
	return u
}

func (u *__Chat_Selector) OrderBy_UpdatedMs_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY UpdatedMs DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_UpdatedMs_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY UpdatedMs ASC "
	return u
}

func (u *__Chat_Selector) Select_UpdatedMs() *__Chat_Selector {
	u.selectCol = "UpdatedMs"
	return u
}

func (u *__Chat_Selector) Limit(num int) *__Chat_Selector {
	u.limit = num
	return u
}

func (u *__Chat_Selector) Offset(num int) *__Chat_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Chat_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.chat"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Chat_Selector) GetRow(db *sqlx.DB) (*Chat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Chat{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnChat_LoadOne(row)

	return row, nil
}

func (u *__Chat_Selector) GetRows(db *sqlx.DB) ([]*Chat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Chat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnChat_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Chat_Selector) GetRows2(db *sqlx.DB) ([]Chat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Chat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnChat_LoadMany(rows)

	rows2 := make([]Chat, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Chat_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__Chat_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Chat_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Chat_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Chat_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.chat SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__Chat_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.chat WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Chat ////////////////
func MassInsert_Chat(rows []Chat, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.chat (" +
		"ChatKey, RoomTypeEnumId, UserId, LastSeqSeen, LastSeqDelete, PeerUserId, GroupId, CreatedTime, CurrentSeq, UpdatedMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.RoomTypeEnumId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.LastSeqSeen)
		vals = append(vals, row.LastSeqDelete)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.CurrentSeq)
		vals = append(vals, row.UpdatedMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_Chat(rows []Chat, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.chat (" +
		"ChatKey, RoomTypeEnumId, UserId, LastSeqSeen, LastSeqDelete, PeerUserId, GroupId, CreatedTime, CurrentSeq, UpdatedMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.RoomTypeEnumId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.LastSeqSeen)
		vals = append(vals, row.LastSeqDelete)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.CurrentSeq)
		vals = append(vals, row.UpdatedMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

// ChatByChatId retrieves a row from 'ms.chat' as a Chat.
//
// Generated from index 'chat_ChatId_pkey'.
func ChatByChatId(db XODB, chatId int) (*Chat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ChatId, ChatKey, RoomTypeEnumId, UserId, LastSeqSeen, LastSeqDelete, PeerUserId, GroupId, CreatedTime, CurrentSeq, UpdatedMs ` +
		`FROM ms.chat ` +
		`WHERE ChatId = ?`

	// run query
	XOLog(sqlstr, chatId)
	c := Chat{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, chatId).Scan(&c.ChatId, &c.ChatKey, &c.RoomTypeEnumId, &c.UserId, &c.LastSeqSeen, &c.LastSeqDelete, &c.PeerUserId, &c.GroupId, &c.CreatedTime, &c.CurrentSeq, &c.UpdatedMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnChat_LoadOne(&c)

	return &c, nil
}
