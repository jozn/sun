package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// SettingClient represents a row from 'ms.setting_client'.

// Manualy copy this to project
type SettingClient__ struct {
	UserId                    int `json:"UserId"`                    // UserId -
	AutoDownloadWifiVoice     int `json:"AutoDownloadWifiVoice"`     // AutoDownloadWifiVoice -
	AutoDownloadWifiImage     int `json:"AutoDownloadWifiImage"`     // AutoDownloadWifiImage -
	AutoDownloadWifiVideo     int `json:"AutoDownloadWifiVideo"`     // AutoDownloadWifiVideo -
	AutoDownloadWifiFile      int `json:"AutoDownloadWifiFile"`      // AutoDownloadWifiFile -
	AutoDownloadWifiMusic     int `json:"AutoDownloadWifiMusic"`     // AutoDownloadWifiMusic -
	AutoDownloadWifiGif       int `json:"AutoDownloadWifiGif"`       // AutoDownloadWifiGif -
	AutoDownloadCellularVoice int `json:"AutoDownloadCellularVoice"` // AutoDownloadCellularVoice -
	AutoDownloadCellularImage int `json:"AutoDownloadCellularImage"` // AutoDownloadCellularImage -
	AutoDownloadCellularVideo int `json:"AutoDownloadCellularVideo"` // AutoDownloadCellularVideo -
	AutoDownloadCellularFile  int `json:"AutoDownloadCellularFile"`  // AutoDownloadCellularFile -
	AutoDownloadCellularMusic int `json:"AutoDownloadCellularMusic"` // AutoDownloadCellularMusic -
	AutoDownloadCellularGif   int `json:"AutoDownloadCellularGif"`   // AutoDownloadCellularGif -
	AutoDownloadRoamingVoice  int `json:"AutoDownloadRoamingVoice"`  // AutoDownloadRoamingVoice -
	AutoDownloadRoamingImage  int `json:"AutoDownloadRoamingImage"`  // AutoDownloadRoamingImage -
	AutoDownloadRoamingVideo  int `json:"AutoDownloadRoamingVideo"`  // AutoDownloadRoamingVideo -
	AutoDownloadRoamingFile   int `json:"AutoDownloadRoamingFile"`   // AutoDownloadRoamingFile -
	AutoDownloadRoamingMusic  int `json:"AutoDownloadRoamingMusic"`  // AutoDownloadRoamingMusic -
	AutoDownloadRoamingGif    int `json:"AutoDownloadRoamingGif"`    // AutoDownloadRoamingGif -
	SaveToGallery             int `json:"SaveToGallery"`             // SaveToGallery -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SettingClient exists in the database.
func (sc *SettingClient) Exists() bool {
	return sc._exists
}

// Deleted provides information if the SettingClient has been deleted from the database.
func (sc *SettingClient) Deleted() bool {
	return sc._deleted
}

// Insert inserts the SettingClient to the database.
func (sc *SettingClient) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ms.setting_client (` +
		`UserId, AutoDownloadWifiVoice, AutoDownloadWifiImage, AutoDownloadWifiVideo, AutoDownloadWifiFile, AutoDownloadWifiMusic, AutoDownloadWifiGif, AutoDownloadCellularVoice, AutoDownloadCellularImage, AutoDownloadCellularVideo, AutoDownloadCellularFile, AutoDownloadCellularMusic, AutoDownloadCellularGif, AutoDownloadRoamingVoice, AutoDownloadRoamingImage, AutoDownloadRoamingVideo, AutoDownloadRoamingFile, AutoDownloadRoamingMusic, AutoDownloadRoamingGif, SaveToGallery` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, sc.UserId, sc.AutoDownloadWifiVoice, sc.AutoDownloadWifiImage, sc.AutoDownloadWifiVideo, sc.AutoDownloadWifiFile, sc.AutoDownloadWifiMusic, sc.AutoDownloadWifiGif, sc.AutoDownloadCellularVoice, sc.AutoDownloadCellularImage, sc.AutoDownloadCellularVideo, sc.AutoDownloadCellularFile, sc.AutoDownloadCellularMusic, sc.AutoDownloadCellularGif, sc.AutoDownloadRoamingVoice, sc.AutoDownloadRoamingImage, sc.AutoDownloadRoamingVideo, sc.AutoDownloadRoamingFile, sc.AutoDownloadRoamingMusic, sc.AutoDownloadRoamingGif, sc.SaveToGallery)
	_, err = db.Exec(sqlstr, sc.UserId, sc.AutoDownloadWifiVoice, sc.AutoDownloadWifiImage, sc.AutoDownloadWifiVideo, sc.AutoDownloadWifiFile, sc.AutoDownloadWifiMusic, sc.AutoDownloadWifiGif, sc.AutoDownloadCellularVoice, sc.AutoDownloadCellularImage, sc.AutoDownloadCellularVideo, sc.AutoDownloadCellularFile, sc.AutoDownloadCellularMusic, sc.AutoDownloadCellularGif, sc.AutoDownloadRoamingVoice, sc.AutoDownloadRoamingImage, sc.AutoDownloadRoamingVideo, sc.AutoDownloadRoamingFile, sc.AutoDownloadRoamingMusic, sc.AutoDownloadRoamingGif, sc.SaveToGallery)
	if err != nil {
		return err
	}

	// set existence
	sc._exists = true

	OnSettingClient_AfterInsert(sc)

	return nil
}

// Insert inserts the SettingClient to the database.
func (sc *SettingClient) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.setting_client (` +
		`UserId, AutoDownloadWifiVoice, AutoDownloadWifiImage, AutoDownloadWifiVideo, AutoDownloadWifiFile, AutoDownloadWifiMusic, AutoDownloadWifiGif, AutoDownloadCellularVoice, AutoDownloadCellularImage, AutoDownloadCellularVideo, AutoDownloadCellularFile, AutoDownloadCellularMusic, AutoDownloadCellularGif, AutoDownloadRoamingVoice, AutoDownloadRoamingImage, AutoDownloadRoamingVideo, AutoDownloadRoamingFile, AutoDownloadRoamingMusic, AutoDownloadRoamingGif, SaveToGallery` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, sc.UserId, sc.AutoDownloadWifiVoice, sc.AutoDownloadWifiImage, sc.AutoDownloadWifiVideo, sc.AutoDownloadWifiFile, sc.AutoDownloadWifiMusic, sc.AutoDownloadWifiGif, sc.AutoDownloadCellularVoice, sc.AutoDownloadCellularImage, sc.AutoDownloadCellularVideo, sc.AutoDownloadCellularFile, sc.AutoDownloadCellularMusic, sc.AutoDownloadCellularGif, sc.AutoDownloadRoamingVoice, sc.AutoDownloadRoamingImage, sc.AutoDownloadRoamingVideo, sc.AutoDownloadRoamingFile, sc.AutoDownloadRoamingMusic, sc.AutoDownloadRoamingGif, sc.SaveToGallery)
	_, err = db.Exec(sqlstr, sc.UserId, sc.AutoDownloadWifiVoice, sc.AutoDownloadWifiImage, sc.AutoDownloadWifiVideo, sc.AutoDownloadWifiFile, sc.AutoDownloadWifiMusic, sc.AutoDownloadWifiGif, sc.AutoDownloadCellularVoice, sc.AutoDownloadCellularImage, sc.AutoDownloadCellularVideo, sc.AutoDownloadCellularFile, sc.AutoDownloadCellularMusic, sc.AutoDownloadCellularGif, sc.AutoDownloadRoamingVoice, sc.AutoDownloadRoamingImage, sc.AutoDownloadRoamingVideo, sc.AutoDownloadRoamingFile, sc.AutoDownloadRoamingMusic, sc.AutoDownloadRoamingGif, sc.SaveToGallery)
	if err != nil {
		XOLogErr(err)
		return err
	}

	sc._exists = true

	OnSettingClient_AfterInsert(sc)

	return nil
}

// Update updates the SettingClient in the database.
func (sc *SettingClient) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.setting_client SET ` +
		`AutoDownloadWifiVoice = ?, AutoDownloadWifiImage = ?, AutoDownloadWifiVideo = ?, AutoDownloadWifiFile = ?, AutoDownloadWifiMusic = ?, AutoDownloadWifiGif = ?, AutoDownloadCellularVoice = ?, AutoDownloadCellularImage = ?, AutoDownloadCellularVideo = ?, AutoDownloadCellularFile = ?, AutoDownloadCellularMusic = ?, AutoDownloadCellularGif = ?, AutoDownloadRoamingVoice = ?, AutoDownloadRoamingImage = ?, AutoDownloadRoamingVideo = ?, AutoDownloadRoamingFile = ?, AutoDownloadRoamingMusic = ?, AutoDownloadRoamingGif = ?, SaveToGallery = ?` +
		` WHERE UserId = ?`

	// run query
	XOLog(sqlstr, sc.AutoDownloadWifiVoice, sc.AutoDownloadWifiImage, sc.AutoDownloadWifiVideo, sc.AutoDownloadWifiFile, sc.AutoDownloadWifiMusic, sc.AutoDownloadWifiGif, sc.AutoDownloadCellularVoice, sc.AutoDownloadCellularImage, sc.AutoDownloadCellularVideo, sc.AutoDownloadCellularFile, sc.AutoDownloadCellularMusic, sc.AutoDownloadCellularGif, sc.AutoDownloadRoamingVoice, sc.AutoDownloadRoamingImage, sc.AutoDownloadRoamingVideo, sc.AutoDownloadRoamingFile, sc.AutoDownloadRoamingMusic, sc.AutoDownloadRoamingGif, sc.SaveToGallery, sc.UserId)
	_, err = db.Exec(sqlstr, sc.AutoDownloadWifiVoice, sc.AutoDownloadWifiImage, sc.AutoDownloadWifiVideo, sc.AutoDownloadWifiFile, sc.AutoDownloadWifiMusic, sc.AutoDownloadWifiGif, sc.AutoDownloadCellularVoice, sc.AutoDownloadCellularImage, sc.AutoDownloadCellularVideo, sc.AutoDownloadCellularFile, sc.AutoDownloadCellularMusic, sc.AutoDownloadCellularGif, sc.AutoDownloadRoamingVoice, sc.AutoDownloadRoamingImage, sc.AutoDownloadRoamingVideo, sc.AutoDownloadRoamingFile, sc.AutoDownloadRoamingMusic, sc.AutoDownloadRoamingGif, sc.SaveToGallery, sc.UserId)

	XOLogErr(err)
	OnSettingClient_AfterUpdate(sc)

	return err
}

// Save saves the SettingClient to the database.
func (sc *SettingClient) Save(db XODB) error {
	if sc.Exists() {
		return sc.Update(db)
	}

	return sc.Replace(db)
}

// Delete deletes the SettingClient from the database.
func (sc *SettingClient) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sc._exists {
		return nil
	}

	// if deleted, bail
	if sc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.setting_client WHERE UserId = ?`

	// run query
	XOLog(sqlstr, sc.UserId)
	_, err = db.Exec(sqlstr, sc.UserId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	sc._deleted = true

	OnSettingClient_AfterDelete(sc)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __SettingClient_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __SettingClient_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __SettingClient_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewSettingClient_Deleter() *__SettingClient_Deleter {
	d := __SettingClient_Deleter{whereSep: " AND "}
	return &d
}

func NewSettingClient_Updater() *__SettingClient_Updater {
	u := __SettingClient_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewSettingClient_Selector() *__SettingClient_Selector {
	u := __SettingClient_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__SettingClient_Deleter) Or() *__SettingClient_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__SettingClient_Deleter) UserId_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) UserId_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) UserId_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) UserId_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) UserId_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) UserId_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) UserId_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) UserId_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) UserId_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadWifiVoice_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiVoice_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiVoice_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVoice_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVoice_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVoice_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVoice_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVoice_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVoice_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadWifiImage_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiImage_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiImage_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadWifiImage_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiImage_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiImage_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiImage_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiImage_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiImage_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadWifiVideo_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiVideo_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiVideo_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVideo_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVideo_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVideo_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVideo_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVideo_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiVideo_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadWifiFile_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiFile_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiFile_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadWifiFile_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiFile_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiFile_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiFile_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiFile_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiFile_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadWifiMusic_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiMusic_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiMusic_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadWifiMusic_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiMusic_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiMusic_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiMusic_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiMusic_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiMusic_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadWifiGif_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiGif_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadWifiGif_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadWifiGif_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiGif_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiGif_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiGif_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiGif_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadWifiGif_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadCellularVoice_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularVoice_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularVoice_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVoice_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVoice_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVoice_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVoice_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVoice_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVoice_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadCellularImage_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularImage_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularImage_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadCellularImage_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularImage_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularImage_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularImage_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularImage_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularImage_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadCellularVideo_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularVideo_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularVideo_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVideo_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVideo_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVideo_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVideo_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVideo_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularVideo_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadCellularFile_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularFile_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularFile_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadCellularFile_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularFile_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularFile_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularFile_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularFile_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularFile_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadCellularMusic_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularMusic_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularMusic_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadCellularMusic_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularMusic_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularMusic_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularMusic_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularMusic_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularMusic_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadCellularGif_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularGif_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadCellularGif_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadCellularGif_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularGif_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularGif_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularGif_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularGif_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadCellularGif_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingVoice_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingVoice_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingVoice_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVoice_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVoice_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVoice_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVoice_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVoice_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVoice_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingImage_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingImage_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingImage_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingImage_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingImage_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingImage_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingImage_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingImage_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingImage_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingVideo_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingVideo_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingVideo_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVideo_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVideo_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVideo_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVideo_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVideo_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingVideo_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingFile_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingFile_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingFile_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingFile_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingFile_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingFile_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingFile_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingFile_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingFile_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingMusic_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingMusic_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingMusic_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingMusic_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingMusic_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingMusic_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingMusic_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingMusic_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingMusic_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingGif_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingGif_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) AutoDownloadRoamingGif_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingGif_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingGif_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingGif_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingGif_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingGif_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) AutoDownloadRoamingGif_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Deleter) SaveToGallery_In(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SaveToGallery IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) SaveToGallery_Ins(ins ...int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SaveToGallery IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Deleter) SaveToGallery_NotIn(ins []int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SaveToGallery NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Deleter) SaveToGallery_Eq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) SaveToGallery_NotEq(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) SaveToGallery_LT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) SaveToGallery_LE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) SaveToGallery_GT(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Deleter) SaveToGallery_GE(val int) *__SettingClient_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__SettingClient_Updater) Or() *__SettingClient_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__SettingClient_Updater) UserId_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) UserId_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) UserId_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) UserId_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) UserId_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) UserId_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) UserId_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) UserId_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) UserId_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadWifiVoice_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiVoice_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiVoice_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadWifiVoice_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVoice_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVoice_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVoice_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVoice_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVoice_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadWifiImage_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiImage_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiImage_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadWifiImage_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiImage_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiImage_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiImage_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiImage_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiImage_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadWifiVideo_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiVideo_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiVideo_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadWifiVideo_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVideo_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVideo_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVideo_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVideo_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiVideo_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadWifiFile_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiFile_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiFile_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadWifiFile_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiFile_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiFile_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiFile_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiFile_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiFile_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadWifiMusic_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiMusic_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiMusic_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadWifiMusic_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiMusic_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiMusic_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiMusic_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiMusic_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiMusic_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadWifiGif_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiGif_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiGif_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadWifiGif_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiGif_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiGif_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiGif_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiGif_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadWifiGif_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadCellularVoice_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularVoice_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularVoice_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadCellularVoice_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVoice_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVoice_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVoice_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVoice_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVoice_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadCellularImage_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularImage_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularImage_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadCellularImage_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularImage_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularImage_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularImage_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularImage_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularImage_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadCellularVideo_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularVideo_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularVideo_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadCellularVideo_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVideo_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVideo_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVideo_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVideo_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularVideo_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadCellularFile_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularFile_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularFile_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadCellularFile_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularFile_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularFile_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularFile_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularFile_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularFile_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadCellularMusic_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularMusic_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularMusic_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadCellularMusic_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularMusic_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularMusic_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularMusic_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularMusic_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularMusic_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadCellularGif_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularGif_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularGif_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadCellularGif_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularGif_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularGif_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularGif_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularGif_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadCellularGif_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadRoamingVoice_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingVoice_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingVoice_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVoice_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVoice_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVoice_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVoice_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVoice_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVoice_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadRoamingImage_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingImage_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingImage_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadRoamingImage_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingImage_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingImage_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingImage_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingImage_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingImage_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadRoamingVideo_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingVideo_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingVideo_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVideo_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVideo_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVideo_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVideo_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVideo_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingVideo_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadRoamingFile_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingFile_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingFile_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadRoamingFile_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingFile_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingFile_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingFile_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingFile_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingFile_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadRoamingMusic_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingMusic_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingMusic_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadRoamingMusic_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingMusic_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingMusic_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingMusic_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingMusic_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingMusic_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) AutoDownloadRoamingGif_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingGif_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingGif_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) AutoDownloadRoamingGif_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingGif_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingGif_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingGif_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingGif_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) AutoDownloadRoamingGif_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Updater) SaveToGallery_In(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SaveToGallery IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) SaveToGallery_Ins(ins ...int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SaveToGallery IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Updater) SaveToGallery_NotIn(ins []int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SaveToGallery NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Updater) SaveToGallery_Eq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) SaveToGallery_NotEq(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) SaveToGallery_LT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) SaveToGallery_LE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) SaveToGallery_GT(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Updater) SaveToGallery_GE(val int) *__SettingClient_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__SettingClient_Selector) Or() *__SettingClient_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__SettingClient_Selector) UserId_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) UserId_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) UserId_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) UserId_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) UserId_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) UserId_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) UserId_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) UserId_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) UserId_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadWifiVoice_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiVoice_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiVoice_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadWifiVoice_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVoice_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVoice_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVoice_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVoice_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVoice_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVoice >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadWifiImage_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiImage_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiImage_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadWifiImage_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiImage_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiImage_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiImage_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiImage_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiImage_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiImage >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadWifiVideo_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiVideo_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiVideo_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadWifiVideo_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVideo_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVideo_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVideo_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVideo_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiVideo_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiVideo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadWifiFile_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiFile_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiFile_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadWifiFile_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiFile_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiFile_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiFile_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiFile_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiFile_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiFile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadWifiMusic_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiMusic_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiMusic_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadWifiMusic_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiMusic_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiMusic_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiMusic_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiMusic_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiMusic_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiMusic >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadWifiGif_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiGif_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadWifiGif_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadWifiGif_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiGif_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiGif_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiGif_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiGif_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadWifiGif_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadWifiGif >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadCellularVoice_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularVoice_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularVoice_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadCellularVoice_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVoice_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVoice_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVoice_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVoice_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVoice_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVoice >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadCellularImage_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularImage_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularImage_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadCellularImage_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularImage_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularImage_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularImage_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularImage_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularImage_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularImage >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadCellularVideo_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularVideo_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularVideo_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadCellularVideo_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVideo_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVideo_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVideo_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVideo_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularVideo_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularVideo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadCellularFile_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularFile_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularFile_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadCellularFile_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularFile_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularFile_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularFile_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularFile_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularFile_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularFile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadCellularMusic_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularMusic_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularMusic_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadCellularMusic_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularMusic_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularMusic_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularMusic_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularMusic_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularMusic_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularMusic >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadCellularGif_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularGif_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadCellularGif_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadCellularGif_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularGif_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularGif_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularGif_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularGif_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadCellularGif_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadCellularGif >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadRoamingVoice_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingVoice_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingVoice_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVoice_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVoice_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVoice_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVoice_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVoice_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVoice_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVoice >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadRoamingImage_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingImage_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingImage_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadRoamingImage_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingImage_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingImage_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingImage_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingImage_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingImage_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingImage >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadRoamingVideo_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingVideo_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingVideo_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVideo_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVideo_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVideo_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVideo_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVideo_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingVideo_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingVideo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadRoamingFile_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingFile_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingFile_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadRoamingFile_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingFile_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingFile_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingFile_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingFile_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingFile_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingFile >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadRoamingMusic_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingMusic_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingMusic_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadRoamingMusic_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingMusic_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingMusic_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingMusic_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingMusic_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingMusic_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingMusic >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) AutoDownloadRoamingGif_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingGif_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) AutoDownloadRoamingGif_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) AutoDownloadRoamingGif_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingGif_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingGif_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingGif_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingGif_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) AutoDownloadRoamingGif_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AutoDownloadRoamingGif >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingClient_Selector) SaveToGallery_In(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SaveToGallery IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) SaveToGallery_Ins(ins ...int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SaveToGallery IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingClient_Selector) SaveToGallery_NotIn(ins []int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SaveToGallery NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingClient_Selector) SaveToGallery_Eq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) SaveToGallery_NotEq(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) SaveToGallery_LT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) SaveToGallery_LE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) SaveToGallery_GT(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingClient_Selector) SaveToGallery_GE(val int) *__SettingClient_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SaveToGallery >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__SettingClient_Updater) UserId(newVal int) *__SettingClient_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) UserId_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadWifiVoice(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadWifiVoice = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiVoice_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadWifiVoice = AutoDownloadWifiVoice+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadWifiVoice = AutoDownloadWifiVoice-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadWifiImage(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadWifiImage = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiImage_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadWifiImage = AutoDownloadWifiImage+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadWifiImage = AutoDownloadWifiImage-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadWifiVideo(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadWifiVideo = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiVideo_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadWifiVideo = AutoDownloadWifiVideo+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadWifiVideo = AutoDownloadWifiVideo-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadWifiFile(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadWifiFile = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiFile_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadWifiFile = AutoDownloadWifiFile+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadWifiFile = AutoDownloadWifiFile-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadWifiMusic(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadWifiMusic = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiMusic_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadWifiMusic = AutoDownloadWifiMusic+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadWifiMusic = AutoDownloadWifiMusic-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadWifiGif(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadWifiGif = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadWifiGif_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadWifiGif = AutoDownloadWifiGif+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadWifiGif = AutoDownloadWifiGif-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadCellularVoice(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadCellularVoice = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularVoice_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadCellularVoice = AutoDownloadCellularVoice+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadCellularVoice = AutoDownloadCellularVoice-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadCellularImage(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadCellularImage = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularImage_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadCellularImage = AutoDownloadCellularImage+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadCellularImage = AutoDownloadCellularImage-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadCellularVideo(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadCellularVideo = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularVideo_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadCellularVideo = AutoDownloadCellularVideo+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadCellularVideo = AutoDownloadCellularVideo-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadCellularFile(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadCellularFile = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularFile_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadCellularFile = AutoDownloadCellularFile+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadCellularFile = AutoDownloadCellularFile-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadCellularMusic(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadCellularMusic = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularMusic_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadCellularMusic = AutoDownloadCellularMusic+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadCellularMusic = AutoDownloadCellularMusic-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadCellularGif(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadCellularGif = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadCellularGif_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadCellularGif = AutoDownloadCellularGif+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadCellularGif = AutoDownloadCellularGif-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadRoamingVoice(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadRoamingVoice = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingVoice_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadRoamingVoice = AutoDownloadRoamingVoice+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadRoamingVoice = AutoDownloadRoamingVoice-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadRoamingImage(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadRoamingImage = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingImage_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadRoamingImage = AutoDownloadRoamingImage+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadRoamingImage = AutoDownloadRoamingImage-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadRoamingVideo(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadRoamingVideo = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingVideo_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadRoamingVideo = AutoDownloadRoamingVideo+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadRoamingVideo = AutoDownloadRoamingVideo-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadRoamingFile(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadRoamingFile = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingFile_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadRoamingFile = AutoDownloadRoamingFile+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadRoamingFile = AutoDownloadRoamingFile-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadRoamingMusic(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadRoamingMusic = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingMusic_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadRoamingMusic = AutoDownloadRoamingMusic+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadRoamingMusic = AutoDownloadRoamingMusic-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) AutoDownloadRoamingGif(newVal int) *__SettingClient_Updater {
	u.updates[" AutoDownloadRoamingGif = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) AutoDownloadRoamingGif_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" AutoDownloadRoamingGif = AutoDownloadRoamingGif+? "] = count
	}

	if count < 0 {
		u.updates[" AutoDownloadRoamingGif = AutoDownloadRoamingGif-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingClient_Updater) SaveToGallery(newVal int) *__SettingClient_Updater {
	u.updates[" SaveToGallery = ? "] = newVal
	return u
}

func (u *__SettingClient_Updater) SaveToGallery_Increment(count int) *__SettingClient_Updater {
	if count > 0 {
		u.updates[" SaveToGallery = SaveToGallery+? "] = count
	}

	if count < 0 {
		u.updates[" SaveToGallery = SaveToGallery-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__SettingClient_Selector) OrderBy_UserId_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_UserId_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__SettingClient_Selector) Select_UserId() *__SettingClient_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiVoice_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiVoice DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiVoice_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiVoice ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadWifiVoice() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadWifiVoice"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiImage_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiImage DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiImage_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiImage ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadWifiImage() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadWifiImage"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiVideo_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiVideo DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiVideo_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiVideo ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadWifiVideo() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadWifiVideo"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiFile_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiFile DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiFile_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiFile ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadWifiFile() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadWifiFile"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiMusic_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiMusic DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiMusic_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiMusic ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadWifiMusic() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadWifiMusic"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiGif_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiGif DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadWifiGif_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadWifiGif ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadWifiGif() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadWifiGif"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularVoice_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularVoice DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularVoice_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularVoice ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadCellularVoice() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadCellularVoice"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularImage_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularImage DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularImage_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularImage ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadCellularImage() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadCellularImage"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularVideo_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularVideo DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularVideo_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularVideo ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadCellularVideo() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadCellularVideo"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularFile_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularFile DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularFile_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularFile ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadCellularFile() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadCellularFile"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularMusic_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularMusic DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularMusic_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularMusic ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadCellularMusic() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadCellularMusic"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularGif_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularGif DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadCellularGif_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadCellularGif ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadCellularGif() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadCellularGif"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingVoice_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingVoice DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingVoice_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingVoice ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadRoamingVoice() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadRoamingVoice"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingImage_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingImage DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingImage_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingImage ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadRoamingImage() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadRoamingImage"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingVideo_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingVideo DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingVideo_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingVideo ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadRoamingVideo() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadRoamingVideo"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingFile_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingFile DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingFile_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingFile ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadRoamingFile() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadRoamingFile"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingMusic_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingMusic DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingMusic_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingMusic ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadRoamingMusic() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadRoamingMusic"
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingGif_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingGif DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_AutoDownloadRoamingGif_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY AutoDownloadRoamingGif ASC "
	return u
}

func (u *__SettingClient_Selector) Select_AutoDownloadRoamingGif() *__SettingClient_Selector {
	u.selectCol = "AutoDownloadRoamingGif"
	return u
}

func (u *__SettingClient_Selector) OrderBy_SaveToGallery_Desc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY SaveToGallery DESC "
	return u
}

func (u *__SettingClient_Selector) OrderBy_SaveToGallery_Asc() *__SettingClient_Selector {
	u.orderBy = " ORDER BY SaveToGallery ASC "
	return u
}

func (u *__SettingClient_Selector) Select_SaveToGallery() *__SettingClient_Selector {
	u.selectCol = "SaveToGallery"
	return u
}

func (u *__SettingClient_Selector) Limit(num int) *__SettingClient_Selector {
	u.limit = num
	return u
}

func (u *__SettingClient_Selector) Offset(num int) *__SettingClient_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__SettingClient_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.setting_client"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__SettingClient_Selector) GetRow(db *sqlx.DB) (*SettingClient, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &SettingClient{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnSettingClient_LoadOne(row)

	return row, nil
}

func (u *__SettingClient_Selector) GetRows(db *sqlx.DB) ([]*SettingClient, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*SettingClient
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnSettingClient_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__SettingClient_Selector) GetRows2(db *sqlx.DB) ([]SettingClient, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*SettingClient
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnSettingClient_LoadMany(rows)

	rows2 := make([]SettingClient, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__SettingClient_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__SettingClient_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__SettingClient_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__SettingClient_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__SettingClient_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.setting_client SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__SettingClient_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.setting_client WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  SettingClient ////////////////

func MassInsert_SettingClient(rows []SettingClient, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.setting_client (" +
		"UserId, AutoDownloadWifiVoice, AutoDownloadWifiImage, AutoDownloadWifiVideo, AutoDownloadWifiFile, AutoDownloadWifiMusic, AutoDownloadWifiGif, AutoDownloadCellularVoice, AutoDownloadCellularImage, AutoDownloadCellularVideo, AutoDownloadCellularFile, AutoDownloadCellularMusic, AutoDownloadCellularGif, AutoDownloadRoamingVoice, AutoDownloadRoamingImage, AutoDownloadRoamingVideo, AutoDownloadRoamingFile, AutoDownloadRoamingMusic, AutoDownloadRoamingGif, SaveToGallery" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.AutoDownloadWifiVoice)
		vals = append(vals, row.AutoDownloadWifiImage)
		vals = append(vals, row.AutoDownloadWifiVideo)
		vals = append(vals, row.AutoDownloadWifiFile)
		vals = append(vals, row.AutoDownloadWifiMusic)
		vals = append(vals, row.AutoDownloadWifiGif)
		vals = append(vals, row.AutoDownloadCellularVoice)
		vals = append(vals, row.AutoDownloadCellularImage)
		vals = append(vals, row.AutoDownloadCellularVideo)
		vals = append(vals, row.AutoDownloadCellularFile)
		vals = append(vals, row.AutoDownloadCellularMusic)
		vals = append(vals, row.AutoDownloadCellularGif)
		vals = append(vals, row.AutoDownloadRoamingVoice)
		vals = append(vals, row.AutoDownloadRoamingImage)
		vals = append(vals, row.AutoDownloadRoamingVideo)
		vals = append(vals, row.AutoDownloadRoamingFile)
		vals = append(vals, row.AutoDownloadRoamingMusic)
		vals = append(vals, row.AutoDownloadRoamingGif)
		vals = append(vals, row.SaveToGallery)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_SettingClient(rows []SettingClient, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.setting_client (" +
		"UserId, AutoDownloadWifiVoice, AutoDownloadWifiImage, AutoDownloadWifiVideo, AutoDownloadWifiFile, AutoDownloadWifiMusic, AutoDownloadWifiGif, AutoDownloadCellularVoice, AutoDownloadCellularImage, AutoDownloadCellularVideo, AutoDownloadCellularFile, AutoDownloadCellularMusic, AutoDownloadCellularGif, AutoDownloadRoamingVoice, AutoDownloadRoamingImage, AutoDownloadRoamingVideo, AutoDownloadRoamingFile, AutoDownloadRoamingMusic, AutoDownloadRoamingGif, SaveToGallery" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.AutoDownloadWifiVoice)
		vals = append(vals, row.AutoDownloadWifiImage)
		vals = append(vals, row.AutoDownloadWifiVideo)
		vals = append(vals, row.AutoDownloadWifiFile)
		vals = append(vals, row.AutoDownloadWifiMusic)
		vals = append(vals, row.AutoDownloadWifiGif)
		vals = append(vals, row.AutoDownloadCellularVoice)
		vals = append(vals, row.AutoDownloadCellularImage)
		vals = append(vals, row.AutoDownloadCellularVideo)
		vals = append(vals, row.AutoDownloadCellularFile)
		vals = append(vals, row.AutoDownloadCellularMusic)
		vals = append(vals, row.AutoDownloadCellularGif)
		vals = append(vals, row.AutoDownloadRoamingVoice)
		vals = append(vals, row.AutoDownloadRoamingImage)
		vals = append(vals, row.AutoDownloadRoamingVideo)
		vals = append(vals, row.AutoDownloadRoamingFile)
		vals = append(vals, row.AutoDownloadRoamingMusic)
		vals = append(vals, row.AutoDownloadRoamingGif)
		vals = append(vals, row.SaveToGallery)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
