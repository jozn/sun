package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Offline represents a row from 'ms.offline'.

// Manualy copy this to project
type Offline__ struct {
	Id          int    `json:"Id"`          // Id -
	FromUserId  int    `json:"FromUserId"`  // FromUserId -
	ToUserId    int    `json:"ToUserId"`    // ToUserId -
	RpcName     string `json:"RpcName"`     // RpcName -
	PBClassName string `json:"PBClassName"` // PBClassName -
	Key         string `json:"Key"`         // Key -
	DataJson    string `json:"DataJson"`    // DataJson -
	DataBlob    []byte `json:"DataBlob"`    // DataBlob -
	DataLength  int    `json:"DataLength"`  // DataLength -
	CreatedMs   int    `json:"CreatedMs"`   // CreatedMs -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Offline exists in the database.
func (o *Offline) Exists() bool {
	return o._exists
}

// Deleted provides information if the Offline has been deleted from the database.
func (o *Offline) Deleted() bool {
	return o._deleted
}

// Insert inserts the Offline to the database.
func (o *Offline) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.offline (` +
		`FromUserId, ToUserId, RpcName, PBClassName, Key, DataJson, DataBlob, DataLength, CreatedMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, o.FromUserId, o.ToUserId, o.RpcName, o.PBClassName, o.Key, o.DataJson, o.DataBlob, o.DataLength, o.CreatedMs)
	res, err := db.Exec(sqlstr, o.FromUserId, o.ToUserId, o.RpcName, o.PBClassName, o.Key, o.DataJson, o.DataBlob, o.DataLength, o.CreatedMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	o.Id = int(id)
	o._exists = true

	OnOffline_AfterInsert(o)

	return nil
}

// Insert inserts the Offline to the database.
func (o *Offline) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.offline (` +
		`FromUserId, ToUserId, RpcName, PBClassName, Key, DataJson, DataBlob, DataLength, CreatedMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, o.FromUserId, o.ToUserId, o.RpcName, o.PBClassName, o.Key, o.DataJson, o.DataBlob, o.DataLength, o.CreatedMs)
	res, err := db.Exec(sqlstr, o.FromUserId, o.ToUserId, o.RpcName, o.PBClassName, o.Key, o.DataJson, o.DataBlob, o.DataLength, o.CreatedMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	o.Id = int(id)
	o._exists = true

	OnOffline_AfterInsert(o)

	return nil
}

// Update updates the Offline in the database.
func (o *Offline) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if o._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.offline SET ` +
		`FromUserId = ?, ToUserId = ?, RpcName = ?, PBClassName = ?, Key = ?, DataJson = ?, DataBlob = ?, DataLength = ?, CreatedMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, o.FromUserId, o.ToUserId, o.RpcName, o.PBClassName, o.Key, o.DataJson, o.DataBlob, o.DataLength, o.CreatedMs, o.Id)
	_, err = db.Exec(sqlstr, o.FromUserId, o.ToUserId, o.RpcName, o.PBClassName, o.Key, o.DataJson, o.DataBlob, o.DataLength, o.CreatedMs, o.Id)

	XOLogErr(err)
	OnOffline_AfterUpdate(o)

	return err
}

// Save saves the Offline to the database.
func (o *Offline) Save(db XODB) error {
	if o.Exists() {
		return o.Update(db)
	}

	return o.Replace(db)
}

// Delete deletes the Offline from the database.
func (o *Offline) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return nil
	}

	// if deleted, bail
	if o._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.offline WHERE Id = ?`

	// run query
	XOLog(sqlstr, o.Id)
	_, err = db.Exec(sqlstr, o.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	o._deleted = true

	OnOffline_AfterDelete(o)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Offline_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Offline_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Offline_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewOffline_Deleter() *__Offline_Deleter {
	d := __Offline_Deleter{whereSep: " AND "}
	return &d
}

func NewOffline_Updater() *__Offline_Updater {
	u := __Offline_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewOffline_Selector() *__Offline_Selector {
	u := __Offline_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Offline_Deleter) Or() *__Offline_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Offline_Deleter) Id_In(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) Id_Ins(ins ...int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) Id_NotIn(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Deleter) Id_Eq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) Id_NotEq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) Id_LT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) Id_LE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) Id_GT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) Id_GE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Deleter) FromUserId_In(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) FromUserId_Ins(ins ...int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) FromUserId_NotIn(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Deleter) FromUserId_Eq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) FromUserId_NotEq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) FromUserId_LT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) FromUserId_LE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) FromUserId_GT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) FromUserId_GE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Deleter) ToUserId_In(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) ToUserId_Ins(ins ...int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) ToUserId_NotIn(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Deleter) ToUserId_Eq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) ToUserId_NotEq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) ToUserId_LT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) ToUserId_LE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) ToUserId_GT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) ToUserId_GE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Deleter) DataLength_In(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataLength IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) DataLength_Ins(ins ...int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataLength IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) DataLength_NotIn(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataLength NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Deleter) DataLength_Eq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) DataLength_NotEq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) DataLength_LT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) DataLength_LE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) DataLength_GT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) DataLength_GE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Deleter) CreatedMs_In(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) CreatedMs_Ins(ins ...int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) CreatedMs_NotIn(ins []int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Deleter) CreatedMs_Eq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) CreatedMs_NotEq(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) CreatedMs_LT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) CreatedMs_LE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) CreatedMs_GT(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) CreatedMs_GE(val int) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Offline_Updater) Or() *__Offline_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Offline_Updater) Id_In(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) Id_Ins(ins ...int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) Id_NotIn(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Updater) Id_Eq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) Id_NotEq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) Id_LT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) Id_LE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) Id_GT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) Id_GE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Updater) FromUserId_In(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) FromUserId_Ins(ins ...int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) FromUserId_NotIn(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Updater) FromUserId_Eq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) FromUserId_NotEq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) FromUserId_LT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) FromUserId_LE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) FromUserId_GT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) FromUserId_GE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Updater) ToUserId_In(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) ToUserId_Ins(ins ...int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) ToUserId_NotIn(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Updater) ToUserId_Eq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) ToUserId_NotEq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) ToUserId_LT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) ToUserId_LE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) ToUserId_GT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) ToUserId_GE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Updater) DataLength_In(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataLength IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) DataLength_Ins(ins ...int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataLength IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) DataLength_NotIn(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataLength NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Updater) DataLength_Eq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) DataLength_NotEq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) DataLength_LT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) DataLength_LE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) DataLength_GT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) DataLength_GE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Updater) CreatedMs_In(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) CreatedMs_Ins(ins ...int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) CreatedMs_NotIn(ins []int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Updater) CreatedMs_Eq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) CreatedMs_NotEq(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) CreatedMs_LT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) CreatedMs_LE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) CreatedMs_GT(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) CreatedMs_GE(val int) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Offline_Selector) Or() *__Offline_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Offline_Selector) Id_In(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) Id_Ins(ins ...int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) Id_NotIn(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Selector) Id_Eq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) Id_NotEq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) Id_LT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) Id_LE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) Id_GT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) Id_GE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Selector) FromUserId_In(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) FromUserId_Ins(ins ...int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) FromUserId_NotIn(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Selector) FromUserId_Eq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) FromUserId_NotEq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) FromUserId_LT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) FromUserId_LE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) FromUserId_GT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) FromUserId_GE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Selector) ToUserId_In(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) ToUserId_Ins(ins ...int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) ToUserId_NotIn(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Selector) ToUserId_Eq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) ToUserId_NotEq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) ToUserId_LT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) ToUserId_LE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) ToUserId_GT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) ToUserId_GE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Selector) DataLength_In(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataLength IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) DataLength_Ins(ins ...int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataLength IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) DataLength_NotIn(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataLength NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Selector) DataLength_Eq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) DataLength_NotEq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) DataLength_LT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) DataLength_LE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) DataLength_GT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) DataLength_GE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataLength >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Selector) CreatedMs_In(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) CreatedMs_Ins(ins ...int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) CreatedMs_NotIn(ins []int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Selector) CreatedMs_Eq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) CreatedMs_NotEq(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) CreatedMs_LT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) CreatedMs_LE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) CreatedMs_GT(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) CreatedMs_GE(val int) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Offline_Deleter) RpcName_In(ins []string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RpcName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) RpcName_NotIn(ins []string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RpcName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Deleter) RpcName_Like(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RpcName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Deleter) RpcName_Eq(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RpcName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) RpcName_NotEq(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RpcName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Deleter) PBClassName_In(ins []string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClassName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) PBClassName_NotIn(ins []string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClassName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Deleter) PBClassName_Like(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClassName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Deleter) PBClassName_Eq(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClassName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) PBClassName_NotEq(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClassName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Deleter) Key_In(ins []string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) Key_NotIn(ins []string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Deleter) Key_Like(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Deleter) Key_Eq(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) Key_NotEq(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Deleter) DataJson_In(ins []string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Deleter) DataJson_NotIn(ins []string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Deleter) DataJson_Like(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Deleter) DataJson_Eq(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Deleter) DataJson_NotEq(val string) *__Offline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Offline_Updater) RpcName_In(ins []string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RpcName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) RpcName_NotIn(ins []string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RpcName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Updater) RpcName_Like(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RpcName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Updater) RpcName_Eq(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RpcName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) RpcName_NotEq(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RpcName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Updater) PBClassName_In(ins []string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClassName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) PBClassName_NotIn(ins []string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClassName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Updater) PBClassName_Like(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClassName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Updater) PBClassName_Eq(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClassName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) PBClassName_NotEq(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClassName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Updater) Key_In(ins []string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) Key_NotIn(ins []string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Updater) Key_Like(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Updater) Key_Eq(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) Key_NotEq(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Updater) DataJson_In(ins []string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Updater) DataJson_NotIn(ins []string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Updater) DataJson_Like(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Updater) DataJson_Eq(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Updater) DataJson_NotEq(val string) *__Offline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Offline_Selector) RpcName_In(ins []string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RpcName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) RpcName_NotIn(ins []string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RpcName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Selector) RpcName_Like(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RpcName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Selector) RpcName_Eq(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RpcName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) RpcName_NotEq(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RpcName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Selector) PBClassName_In(ins []string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClassName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) PBClassName_NotIn(ins []string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClassName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Selector) PBClassName_Like(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClassName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Selector) PBClassName_Eq(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClassName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) PBClassName_NotEq(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClassName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Selector) Key_In(ins []string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) Key_NotIn(ins []string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Selector) Key_Like(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Selector) Key_Eq(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) Key_NotEq(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Offline_Selector) DataJson_In(ins []string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Offline_Selector) DataJson_NotIn(ins []string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Offline_Selector) DataJson_Like(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Offline_Selector) DataJson_Eq(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Offline_Selector) DataJson_NotEq(val string) *__Offline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Offline_Updater) Id(newVal int) *__Offline_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Offline_Updater) Id_Increment(count int) *__Offline_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Offline_Updater) FromUserId(newVal int) *__Offline_Updater {
	u.updates[" FromUserId = ? "] = newVal
	return u
}

func (u *__Offline_Updater) FromUserId_Increment(count int) *__Offline_Updater {
	if count > 0 {
		u.updates[" FromUserId = FromUserId+? "] = count
	}

	if count < 0 {
		u.updates[" FromUserId = FromUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Offline_Updater) ToUserId(newVal int) *__Offline_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__Offline_Updater) ToUserId_Increment(count int) *__Offline_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Offline_Updater) RpcName(newVal string) *__Offline_Updater {
	u.updates[" RpcName = ? "] = newVal
	return u
}

//ints

//string
func (u *__Offline_Updater) PBClassName(newVal string) *__Offline_Updater {
	u.updates[" PBClassName = ? "] = newVal
	return u
}

//ints

//string
func (u *__Offline_Updater) Key(newVal string) *__Offline_Updater {
	u.updates[" Key = ? "] = newVal
	return u
}

//ints

//string
func (u *__Offline_Updater) DataJson(newVal string) *__Offline_Updater {
	u.updates[" DataJson = ? "] = newVal
	return u
}

//ints

//string

//ints

func (u *__Offline_Updater) DataLength(newVal int) *__Offline_Updater {
	u.updates[" DataLength = ? "] = newVal
	return u
}

func (u *__Offline_Updater) DataLength_Increment(count int) *__Offline_Updater {
	if count > 0 {
		u.updates[" DataLength = DataLength+? "] = count
	}

	if count < 0 {
		u.updates[" DataLength = DataLength-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Offline_Updater) CreatedMs(newVal int) *__Offline_Updater {
	u.updates[" CreatedMs = ? "] = newVal
	return u
}

func (u *__Offline_Updater) CreatedMs_Increment(count int) *__Offline_Updater {
	if count > 0 {
		u.updates[" CreatedMs = CreatedMs+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedMs = CreatedMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Offline_Selector) OrderBy_Id_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_Id_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Offline_Selector) Select_Id() *__Offline_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Offline_Selector) OrderBy_FromUserId_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY FromUserId DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_FromUserId_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY FromUserId ASC "
	return u
}

func (u *__Offline_Selector) Select_FromUserId() *__Offline_Selector {
	u.selectCol = "FromUserId"
	return u
}

func (u *__Offline_Selector) OrderBy_ToUserId_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_ToUserId_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__Offline_Selector) Select_ToUserId() *__Offline_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__Offline_Selector) OrderBy_RpcName_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY RpcName DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_RpcName_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY RpcName ASC "
	return u
}

func (u *__Offline_Selector) Select_RpcName() *__Offline_Selector {
	u.selectCol = "RpcName"
	return u
}

func (u *__Offline_Selector) OrderBy_PBClassName_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY PBClassName DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_PBClassName_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY PBClassName ASC "
	return u
}

func (u *__Offline_Selector) Select_PBClassName() *__Offline_Selector {
	u.selectCol = "PBClassName"
	return u
}

func (u *__Offline_Selector) OrderBy_Key_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY Key DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_Key_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY Key ASC "
	return u
}

func (u *__Offline_Selector) Select_Key() *__Offline_Selector {
	u.selectCol = "Key"
	return u
}

func (u *__Offline_Selector) OrderBy_DataJson_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY DataJson DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_DataJson_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY DataJson ASC "
	return u
}

func (u *__Offline_Selector) Select_DataJson() *__Offline_Selector {
	u.selectCol = "DataJson"
	return u
}

func (u *__Offline_Selector) OrderBy_DataBlob_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY DataBlob DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_DataBlob_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY DataBlob ASC "
	return u
}

func (u *__Offline_Selector) Select_DataBlob() *__Offline_Selector {
	u.selectCol = "DataBlob"
	return u
}

func (u *__Offline_Selector) OrderBy_DataLength_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY DataLength DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_DataLength_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY DataLength ASC "
	return u
}

func (u *__Offline_Selector) Select_DataLength() *__Offline_Selector {
	u.selectCol = "DataLength"
	return u
}

func (u *__Offline_Selector) OrderBy_CreatedMs_Desc() *__Offline_Selector {
	u.orderBy = " ORDER BY CreatedMs DESC "
	return u
}

func (u *__Offline_Selector) OrderBy_CreatedMs_Asc() *__Offline_Selector {
	u.orderBy = " ORDER BY CreatedMs ASC "
	return u
}

func (u *__Offline_Selector) Select_CreatedMs() *__Offline_Selector {
	u.selectCol = "CreatedMs"
	return u
}

func (u *__Offline_Selector) Limit(num int) *__Offline_Selector {
	u.limit = num
	return u
}

func (u *__Offline_Selector) Offset(num int) *__Offline_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Offline_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.offline"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Offline_Selector) GetRow(db *sqlx.DB) (*Offline, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Offline{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnOffline_LoadOne(row)

	return row, nil
}

func (u *__Offline_Selector) GetRows(db *sqlx.DB) ([]*Offline, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Offline
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnOffline_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Offline_Selector) GetRows2(db *sqlx.DB) ([]Offline, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Offline
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnOffline_LoadMany(rows)

	rows2 := make([]Offline, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Offline_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__Offline_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Offline_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Offline_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Offline_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.offline SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__Offline_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.offline WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Offline ////////////////

func MassInsert_Offline(rows []Offline, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "( ms_question_mark .Columns .PrimaryKey.ColumnName }})," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.offline (" +
		"FromUserId, ToUserId, RpcName, PBClassName, Key, DataJson, DataBlob, DataLength, CreatedMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.FromUserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.RpcName)
		vals = append(vals, row.PBClassName)
		vals = append(vals, row.Key)
		vals = append(vals, row.DataJson)
		vals = append(vals, row.DataBlob)
		vals = append(vals, row.DataLength)
		vals = append(vals, row.CreatedMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_Offline(rows []Offline, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.offline (" +
		"FromUserId, ToUserId, RpcName, PBClassName, Key, DataJson, DataBlob, DataLength, CreatedMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.FromUserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.RpcName)
		vals = append(vals, row.PBClassName)
		vals = append(vals, row.Key)
		vals = append(vals, row.DataJson)
		vals = append(vals, row.DataBlob)
		vals = append(vals, row.DataLength)
		vals = append(vals, row.CreatedMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//
