// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// TestChat represents a row from 'ms.test_chat'.

// Manualy copy this to project
type TestChat__ struct {
	Id     int    `json:"Id"`     // Id -
	Id4    int    `json:"Id4"`    // Id4 -
	TimeMs int    `json:"TimeMs"` // TimeMs -
	Text   string `json:"Text"`   // Text -
	Name   string `json:"Name"`   // Name -
	UserId int    `json:"UserId"` // UserId -
	C2     int    `json:"C2"`     // C2 -
	C3     int    `json:"C3"`     // C3 -
	C4     int    `json:"C4"`     // C4 -
	C5     int    `json:"C5"`     // C5 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TestChat exists in the database.
func (tc *TestChat) Exists() bool {
	return tc._exists
}

// Deleted provides information if the TestChat has been deleted from the database.
func (tc *TestChat) Deleted() bool {
	return tc._deleted
}

// Insert inserts the TestChat to the database.
func (tc *TestChat) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.test_chat (` +
		`Id, TimeMs, Text, Name, UserId, C2, C3, C4, C5` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tc.Id, tc.TimeMs, tc.Text, tc.Name, tc.UserId, tc.C2, tc.C3, tc.C4, tc.C5)
	res, err := db.Exec(sqlstr, tc.Id, tc.TimeMs, tc.Text, tc.Name, tc.UserId, tc.C2, tc.C3, tc.C4, tc.C5)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	tc.Id4 = int(id)
	tc._exists = true

	OnTestChat_AfterInsert(tc)

	return nil
}

// Insert inserts the TestChat to the database.
func (tc *TestChat) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.test_chat (` +
		`Id, TimeMs, Text, Name, UserId, C2, C3, C4, C5` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tc.Id, tc.TimeMs, tc.Text, tc.Name, tc.UserId, tc.C2, tc.C3, tc.C4, tc.C5)
	res, err := db.Exec(sqlstr, tc.Id, tc.TimeMs, tc.Text, tc.Name, tc.UserId, tc.C2, tc.C3, tc.C4, tc.C5)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	tc.Id4 = int(id)
	tc._exists = true

	OnTestChat_AfterInsert(tc)

	return nil
}

// Update updates the TestChat in the database.
func (tc *TestChat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.test_chat SET ` +
		`Id = ?, TimeMs = ?, Text = ?, Name = ?, UserId = ?, C2 = ?, C3 = ?, C4 = ?, C5 = ?` +
		` WHERE Id4 = ?`

	// run query
	XOLog(sqlstr, tc.Id, tc.TimeMs, tc.Text, tc.Name, tc.UserId, tc.C2, tc.C3, tc.C4, tc.C5, tc.Id4)
	_, err = db.Exec(sqlstr, tc.Id, tc.TimeMs, tc.Text, tc.Name, tc.UserId, tc.C2, tc.C3, tc.C4, tc.C5, tc.Id4)

	XOLogErr(err)
	OnTestChat_AfterUpdate(tc)

	return err
}

// Save saves the TestChat to the database.
func (tc *TestChat) Save(db XODB) error {
	if tc.Exists() {
		return tc.Update(db)
	}

	return tc.Replace(db)
}

// Delete deletes the TestChat from the database.
func (tc *TestChat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tc._exists {
		return nil
	}

	// if deleted, bail
	if tc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.test_chat WHERE Id4 = ?`

	// run query
	XOLog(sqlstr, tc.Id4)
	_, err = db.Exec(sqlstr, tc.Id4)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	tc._deleted = true

	OnTestChat_AfterDelete(tc)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __TestChat_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __TestChat_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __TestChat_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewTestChat_Deleter() *__TestChat_Deleter {
	d := __TestChat_Deleter{whereSep: " AND "}
	return &d
}

func NewTestChat_Updater() *__TestChat_Updater {
	u := __TestChat_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewTestChat_Selector() *__TestChat_Selector {
	u := __TestChat_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__TestChat_Deleter) Or() *__TestChat_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__TestChat_Deleter) Id_In(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) Id_Ins(ins ...int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) Id_NotIn(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) Id_Eq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id_NotEq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id_LT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id_LE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id_GT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id_GE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Deleter) Id4_In(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) Id4_Ins(ins ...int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) Id4_NotIn(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id4 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) Id4_Eq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id4_NotEq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id4_LT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id4_LE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id4_GT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Id4_GE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Deleter) TimeMs_In(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) TimeMs_Ins(ins ...int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) TimeMs_NotIn(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) TimeMs_Eq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) TimeMs_NotEq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) TimeMs_LT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) TimeMs_LE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) TimeMs_GT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) TimeMs_GE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Deleter) UserId_In(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) UserId_Ins(ins ...int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) UserId_NotIn(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) UserId_Eq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) UserId_NotEq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) UserId_LT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) UserId_LE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) UserId_GT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) UserId_GE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Deleter) C2_In(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C2 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) C2_Ins(ins ...int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C2 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) C2_NotIn(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C2 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) C2_Eq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C2_NotEq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C2_LT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C2_LE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C2_GT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C2_GE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Deleter) C3_In(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C3 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) C3_Ins(ins ...int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C3 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) C3_NotIn(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C3 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) C3_Eq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C3_NotEq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C3_LT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C3_LE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C3_GT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C3_GE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Deleter) C4_In(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) C4_Ins(ins ...int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) C4_NotIn(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C4 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) C4_Eq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C4_NotEq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C4_LT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C4_LE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C4_GT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C4_GE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Deleter) C5_In(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) C5_Ins(ins ...int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) C5_NotIn(ins []int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C5 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) C5_Eq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C5_NotEq(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C5_LT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C5_LE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C5_GT(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) C5_GE(val int) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__TestChat_Updater) Or() *__TestChat_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__TestChat_Updater) Id_In(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) Id_Ins(ins ...int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) Id_NotIn(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) Id_Eq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id_NotEq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id_LT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id_LE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id_GT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id_GE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Updater) Id4_In(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) Id4_Ins(ins ...int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) Id4_NotIn(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id4 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) Id4_Eq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id4_NotEq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id4_LT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id4_LE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id4_GT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Id4_GE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Updater) TimeMs_In(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) TimeMs_Ins(ins ...int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) TimeMs_NotIn(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) TimeMs_Eq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) TimeMs_NotEq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) TimeMs_LT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) TimeMs_LE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) TimeMs_GT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) TimeMs_GE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Updater) UserId_In(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) UserId_Ins(ins ...int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) UserId_NotIn(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) UserId_Eq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) UserId_NotEq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) UserId_LT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) UserId_LE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) UserId_GT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) UserId_GE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Updater) C2_In(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C2 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) C2_Ins(ins ...int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C2 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) C2_NotIn(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C2 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) C2_Eq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C2_NotEq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C2_LT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C2_LE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C2_GT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C2_GE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Updater) C3_In(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C3 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) C3_Ins(ins ...int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C3 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) C3_NotIn(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C3 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) C3_Eq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C3_NotEq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C3_LT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C3_LE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C3_GT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C3_GE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Updater) C4_In(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) C4_Ins(ins ...int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) C4_NotIn(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C4 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) C4_Eq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C4_NotEq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C4_LT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C4_LE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C4_GT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C4_GE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Updater) C5_In(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) C5_Ins(ins ...int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) C5_NotIn(ins []int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C5 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) C5_Eq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C5_NotEq(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C5_LT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C5_LE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C5_GT(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) C5_GE(val int) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__TestChat_Selector) Or() *__TestChat_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__TestChat_Selector) Id_In(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) Id_Ins(ins ...int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) Id_NotIn(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) Id_Eq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id_NotEq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id_LT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id_LE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id_GT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id_GE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Selector) Id4_In(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) Id4_Ins(ins ...int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) Id4_NotIn(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id4 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) Id4_Eq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id4_NotEq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id4_LT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id4_LE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id4_GT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Id4_GE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id4 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Selector) TimeMs_In(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) TimeMs_Ins(ins ...int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) TimeMs_NotIn(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) TimeMs_Eq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) TimeMs_NotEq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) TimeMs_LT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) TimeMs_LE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) TimeMs_GT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) TimeMs_GE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Selector) UserId_In(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) UserId_Ins(ins ...int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) UserId_NotIn(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) UserId_Eq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) UserId_NotEq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) UserId_LT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) UserId_LE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) UserId_GT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) UserId_GE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Selector) C2_In(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C2 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) C2_Ins(ins ...int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C2 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) C2_NotIn(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C2 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) C2_Eq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C2_NotEq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C2_LT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C2_LE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C2_GT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C2_GE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C2 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Selector) C3_In(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C3 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) C3_Ins(ins ...int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C3 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) C3_NotIn(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C3 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) C3_Eq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C3_NotEq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C3_LT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C3_LE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C3_GT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C3_GE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C3 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Selector) C4_In(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) C4_Ins(ins ...int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C4 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) C4_NotIn(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C4 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) C4_Eq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C4_NotEq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C4_LT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C4_LE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C4_GT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C4_GE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C4 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Selector) C5_In(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) C5_Ins(ins ...int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C5 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) C5_NotIn(ins []int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " C5 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) C5_Eq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C5_NotEq(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C5_LT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C5_LE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C5_GT(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) C5_GE(val int) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " C5 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__TestChat_Deleter) Text_In(ins []string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) Text_NotIn(ins []string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__TestChat_Deleter) Text_Like(val string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) Text_Eq(val string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Text_NotEq(val string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Deleter) Name_In(ins []string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Deleter) Name_NotIn(ins []string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__TestChat_Deleter) Name_Like(val string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Deleter) Name_Eq(val string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Deleter) Name_NotEq(val string) *__TestChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__TestChat_Updater) Text_In(ins []string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) Text_NotIn(ins []string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__TestChat_Updater) Text_Like(val string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) Text_Eq(val string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Text_NotEq(val string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Updater) Name_In(ins []string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Updater) Name_NotIn(ins []string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__TestChat_Updater) Name_Like(val string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Updater) Name_Eq(val string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Updater) Name_NotEq(val string) *__TestChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__TestChat_Selector) Text_In(ins []string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) Text_NotIn(ins []string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__TestChat_Selector) Text_Like(val string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) Text_Eq(val string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Text_NotEq(val string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TestChat_Selector) Name_In(ins []string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TestChat_Selector) Name_NotIn(ins []string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__TestChat_Selector) Name_Like(val string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TestChat_Selector) Name_Eq(val string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TestChat_Selector) Name_NotEq(val string) *__TestChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__TestChat_Updater) Id(newVal int) *__TestChat_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__TestChat_Updater) Id_Increment(count int) *__TestChat_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TestChat_Updater) Id4(newVal int) *__TestChat_Updater {
	u.updates[" Id4 = ? "] = newVal
	return u
}

func (u *__TestChat_Updater) Id4_Increment(count int) *__TestChat_Updater {
	if count > 0 {
		u.updates[" Id4 = Id4+? "] = count
	}

	if count < 0 {
		u.updates[" Id4 = Id4-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TestChat_Updater) TimeMs(newVal int) *__TestChat_Updater {
	u.updates[" TimeMs = ? "] = newVal
	return u
}

func (u *__TestChat_Updater) TimeMs_Increment(count int) *__TestChat_Updater {
	if count > 0 {
		u.updates[" TimeMs = TimeMs+? "] = count
	}

	if count < 0 {
		u.updates[" TimeMs = TimeMs-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__TestChat_Updater) Text(newVal string) *__TestChat_Updater {
	u.updates[" Text = ? "] = newVal
	return u
}

//ints

//string
func (u *__TestChat_Updater) Name(newVal string) *__TestChat_Updater {
	u.updates[" Name = ? "] = newVal
	return u
}

//ints

func (u *__TestChat_Updater) UserId(newVal int) *__TestChat_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__TestChat_Updater) UserId_Increment(count int) *__TestChat_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TestChat_Updater) C2(newVal int) *__TestChat_Updater {
	u.updates[" C2 = ? "] = newVal
	return u
}

func (u *__TestChat_Updater) C2_Increment(count int) *__TestChat_Updater {
	if count > 0 {
		u.updates[" C2 = C2+? "] = count
	}

	if count < 0 {
		u.updates[" C2 = C2-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TestChat_Updater) C3(newVal int) *__TestChat_Updater {
	u.updates[" C3 = ? "] = newVal
	return u
}

func (u *__TestChat_Updater) C3_Increment(count int) *__TestChat_Updater {
	if count > 0 {
		u.updates[" C3 = C3+? "] = count
	}

	if count < 0 {
		u.updates[" C3 = C3-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TestChat_Updater) C4(newVal int) *__TestChat_Updater {
	u.updates[" C4 = ? "] = newVal
	return u
}

func (u *__TestChat_Updater) C4_Increment(count int) *__TestChat_Updater {
	if count > 0 {
		u.updates[" C4 = C4+? "] = count
	}

	if count < 0 {
		u.updates[" C4 = C4-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TestChat_Updater) C5(newVal int) *__TestChat_Updater {
	u.updates[" C5 = ? "] = newVal
	return u
}

func (u *__TestChat_Updater) C5_Increment(count int) *__TestChat_Updater {
	if count > 0 {
		u.updates[" C5 = C5+? "] = count
	}

	if count < 0 {
		u.updates[" C5 = C5-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__TestChat_Selector) OrderBy_Id_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_Id_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__TestChat_Selector) Select_Id() *__TestChat_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__TestChat_Selector) OrderBy_Id4_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY Id4 DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_Id4_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY Id4 ASC "
	return u
}

func (u *__TestChat_Selector) Select_Id4() *__TestChat_Selector {
	u.selectCol = "Id4"
	return u
}

func (u *__TestChat_Selector) OrderBy_TimeMs_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY TimeMs DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_TimeMs_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY TimeMs ASC "
	return u
}

func (u *__TestChat_Selector) Select_TimeMs() *__TestChat_Selector {
	u.selectCol = "TimeMs"
	return u
}

func (u *__TestChat_Selector) OrderBy_Text_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_Text_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__TestChat_Selector) Select_Text() *__TestChat_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__TestChat_Selector) OrderBy_Name_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY Name DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_Name_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY Name ASC "
	return u
}

func (u *__TestChat_Selector) Select_Name() *__TestChat_Selector {
	u.selectCol = "Name"
	return u
}

func (u *__TestChat_Selector) OrderBy_UserId_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_UserId_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__TestChat_Selector) Select_UserId() *__TestChat_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__TestChat_Selector) OrderBy_C2_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY C2 DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_C2_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY C2 ASC "
	return u
}

func (u *__TestChat_Selector) Select_C2() *__TestChat_Selector {
	u.selectCol = "C2"
	return u
}

func (u *__TestChat_Selector) OrderBy_C3_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY C3 DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_C3_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY C3 ASC "
	return u
}

func (u *__TestChat_Selector) Select_C3() *__TestChat_Selector {
	u.selectCol = "C3"
	return u
}

func (u *__TestChat_Selector) OrderBy_C4_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY C4 DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_C4_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY C4 ASC "
	return u
}

func (u *__TestChat_Selector) Select_C4() *__TestChat_Selector {
	u.selectCol = "C4"
	return u
}

func (u *__TestChat_Selector) OrderBy_C5_Desc() *__TestChat_Selector {
	u.orderBy = " ORDER BY C5 DESC "
	return u
}

func (u *__TestChat_Selector) OrderBy_C5_Asc() *__TestChat_Selector {
	u.orderBy = " ORDER BY C5 ASC "
	return u
}

func (u *__TestChat_Selector) Select_C5() *__TestChat_Selector {
	u.selectCol = "C5"
	return u
}

func (u *__TestChat_Selector) Limit(num int) *__TestChat_Selector {
	u.limit = num
	return u
}

func (u *__TestChat_Selector) Offset(num int) *__TestChat_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__TestChat_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.test_chat"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__TestChat_Selector) GetRow(db *sqlx.DB) (*TestChat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &TestChat{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnTestChat_LoadOne(row)

	return row, nil
}

func (u *__TestChat_Selector) GetRows(db *sqlx.DB) ([]*TestChat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*TestChat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnTestChat_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__TestChat_Selector) GetRows2(db *sqlx.DB) ([]TestChat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*TestChat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnTestChat_LoadMany(rows)

	rows2 := make([]TestChat, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__TestChat_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__TestChat_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__TestChat_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__TestChat_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__TestChat_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.test_chat SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__TestChat_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.test_chat WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  TestChat ////////////////
func MassInsert_TestChat(rows []TestChat, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.test_chat (" +
		"Id, TimeMs, Text, Name, UserId, C2, C3, C4, C5" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.TimeMs)
		vals = append(vals, row.Text)
		vals = append(vals, row.Name)
		vals = append(vals, row.UserId)
		vals = append(vals, row.C2)
		vals = append(vals, row.C3)
		vals = append(vals, row.C4)
		vals = append(vals, row.C5)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_TestChat(rows []TestChat, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.test_chat (" +
		"Id, TimeMs, Text, Name, UserId, C2, C3, C4, C5" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.TimeMs)
		vals = append(vals, row.Text)
		vals = append(vals, row.Name)
		vals = append(vals, row.UserId)
		vals = append(vals, row.C2)
		vals = append(vals, row.C3)
		vals = append(vals, row.C4)
		vals = append(vals, row.C5)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

// TestChatById4 retrieves a row from 'ms.test_chat' as a TestChat.
//
// Generated from index 'test_chat_Id4_pkey'.
func TestChatById4(db XODB, id4 int) (*TestChat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Id4, TimeMs, Text, Name, UserId, C2, C3, C4, C5 ` +
		`FROM ms.test_chat ` +
		`WHERE Id4 = ?`

	// run query
	XOLog(sqlstr, id4)
	tc := TestChat{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id4).Scan(&tc.Id, &tc.Id4, &tc.TimeMs, &tc.Text, &tc.Name, &tc.UserId, &tc.C2, &tc.C3, &tc.C4, &tc.C5)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnTestChat_LoadOne(&tc)

	return &tc, nil
}
