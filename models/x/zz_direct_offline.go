package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// DirectOffline represents a row from 'ms.direct_offline'.

// Manualy copy this to project
type DirectOffline__ struct {
	DirectOfflineId int    `json:"DirectOfflineId"` // DirectOfflineId -
	ToUserId        int    `json:"ToUserId"`        // ToUserId -
	ChatKey         string `json:"ChatKey"`         // ChatKey -
	MessageId       int    `json:"MessageId"`       // MessageId -
	MessageFileId   int    `json:"MessageFileId"`   // MessageFileId -
	PBClass         string `json:"PBClass"`         // PBClass -
	DataPB          []byte `json:"DataPB"`          // DataPB -
	DataJson        string `json:"DataJson"`        // DataJson -
	DataTemp        string `json:"DataTemp"`        // DataTemp -
	AtTimeMs        int    `json:"AtTimeMs"`        // AtTimeMs -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DirectOffline exists in the database.
func (do *DirectOffline) Exists() bool {
	return do._exists
}

// Deleted provides information if the DirectOffline has been deleted from the database.
func (do *DirectOffline) Deleted() bool {
	return do._deleted
}

// Insert inserts the DirectOffline to the database.
func (do *DirectOffline) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if do._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ms.direct_offline (` +
		`DirectOfflineId, ToUserId, ChatKey, MessageId, MessageFileId, PBClass, DataPB, DataJson, DataTemp, AtTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, do.DirectOfflineId, do.ToUserId, do.ChatKey, do.MessageId, do.MessageFileId, do.PBClass, do.DataPB, do.DataJson, do.DataTemp, do.AtTimeMs)
	_, err = db.Exec(sqlstr, do.DirectOfflineId, do.ToUserId, do.ChatKey, do.MessageId, do.MessageFileId, do.PBClass, do.DataPB, do.DataJson, do.DataTemp, do.AtTimeMs)
	if err != nil {
		return err
	}

	// set existence
	do._exists = true

	OnDirectOffline_AfterInsert(do)

	return nil
}

// Insert inserts the DirectOffline to the database.
func (do *DirectOffline) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.direct_offline (` +
		`DirectOfflineId, ToUserId, ChatKey, MessageId, MessageFileId, PBClass, DataPB, DataJson, DataTemp, AtTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, do.DirectOfflineId, do.ToUserId, do.ChatKey, do.MessageId, do.MessageFileId, do.PBClass, do.DataPB, do.DataJson, do.DataTemp, do.AtTimeMs)
	_, err = db.Exec(sqlstr, do.DirectOfflineId, do.ToUserId, do.ChatKey, do.MessageId, do.MessageFileId, do.PBClass, do.DataPB, do.DataJson, do.DataTemp, do.AtTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	do._exists = true

	OnDirectOffline_AfterInsert(do)

	return nil
}

// Update updates the DirectOffline in the database.
func (do *DirectOffline) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !do._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if do._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.direct_offline SET ` +
		`ToUserId = ?, ChatKey = ?, MessageId = ?, MessageFileId = ?, PBClass = ?, DataPB = ?, DataJson = ?, DataTemp = ?, AtTimeMs = ?` +
		` WHERE DirectOfflineId = ?`

	// run query
	XOLog(sqlstr, do.ToUserId, do.ChatKey, do.MessageId, do.MessageFileId, do.PBClass, do.DataPB, do.DataJson, do.DataTemp, do.AtTimeMs, do.DirectOfflineId)
	_, err = db.Exec(sqlstr, do.ToUserId, do.ChatKey, do.MessageId, do.MessageFileId, do.PBClass, do.DataPB, do.DataJson, do.DataTemp, do.AtTimeMs, do.DirectOfflineId)

	XOLogErr(err)
	OnDirectOffline_AfterUpdate(do)

	return err
}

// Save saves the DirectOffline to the database.
func (do *DirectOffline) Save(db XODB) error {
	if do.Exists() {
		return do.Update(db)
	}

	return do.Replace(db)
}

// Delete deletes the DirectOffline from the database.
func (do *DirectOffline) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !do._exists {
		return nil
	}

	// if deleted, bail
	if do._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.direct_offline WHERE DirectOfflineId = ?`

	// run query
	XOLog(sqlstr, do.DirectOfflineId)
	_, err = db.Exec(sqlstr, do.DirectOfflineId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	do._deleted = true

	OnDirectOffline_AfterDelete(do)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __DirectOffline_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __DirectOffline_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __DirectOffline_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewDirectOffline_Deleter() *__DirectOffline_Deleter {
	d := __DirectOffline_Deleter{whereSep: " AND "}
	return &d
}

func NewDirectOffline_Updater() *__DirectOffline_Updater {
	u := __DirectOffline_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewDirectOffline_Selector() *__DirectOffline_Selector {
	u := __DirectOffline_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__DirectOffline_Deleter) Or() *__DirectOffline_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__DirectOffline_Deleter) DirectOfflineId_In(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectOfflineId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) DirectOfflineId_Ins(ins ...int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectOfflineId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) DirectOfflineId_NotIn(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectOfflineId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Deleter) DirectOfflineId_Eq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) DirectOfflineId_NotEq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) DirectOfflineId_LT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) DirectOfflineId_LE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) DirectOfflineId_GT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) DirectOfflineId_GE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Deleter) ToUserId_In(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) ToUserId_Ins(ins ...int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) ToUserId_NotIn(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Deleter) ToUserId_Eq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) ToUserId_NotEq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) ToUserId_LT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) ToUserId_LE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) ToUserId_GT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) ToUserId_GE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Deleter) MessageId_In(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) MessageId_Ins(ins ...int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) MessageId_NotIn(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Deleter) MessageId_Eq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageId_NotEq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageId_LT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageId_LE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageId_GT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageId_GE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Deleter) MessageFileId_In(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) MessageFileId_Ins(ins ...int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) MessageFileId_NotIn(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Deleter) MessageFileId_Eq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageFileId_NotEq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageFileId_LT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageFileId_LE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageFileId_GT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) MessageFileId_GE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Deleter) AtTimeMs_In(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) AtTimeMs_Ins(ins ...int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) AtTimeMs_NotIn(ins []int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Deleter) AtTimeMs_Eq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) AtTimeMs_NotEq(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) AtTimeMs_LT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) AtTimeMs_LE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) AtTimeMs_GT(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) AtTimeMs_GE(val int) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__DirectOffline_Updater) Or() *__DirectOffline_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__DirectOffline_Updater) DirectOfflineId_In(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectOfflineId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) DirectOfflineId_Ins(ins ...int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectOfflineId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) DirectOfflineId_NotIn(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectOfflineId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Updater) DirectOfflineId_Eq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) DirectOfflineId_NotEq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) DirectOfflineId_LT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) DirectOfflineId_LE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) DirectOfflineId_GT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) DirectOfflineId_GE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Updater) ToUserId_In(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) ToUserId_Ins(ins ...int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) ToUserId_NotIn(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Updater) ToUserId_Eq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) ToUserId_NotEq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) ToUserId_LT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) ToUserId_LE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) ToUserId_GT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) ToUserId_GE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Updater) MessageId_In(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) MessageId_Ins(ins ...int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) MessageId_NotIn(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Updater) MessageId_Eq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageId_NotEq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageId_LT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageId_LE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageId_GT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageId_GE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Updater) MessageFileId_In(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) MessageFileId_Ins(ins ...int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) MessageFileId_NotIn(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Updater) MessageFileId_Eq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageFileId_NotEq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageFileId_LT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageFileId_LE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageFileId_GT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) MessageFileId_GE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Updater) AtTimeMs_In(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) AtTimeMs_Ins(ins ...int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) AtTimeMs_NotIn(ins []int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Updater) AtTimeMs_Eq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) AtTimeMs_NotEq(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) AtTimeMs_LT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) AtTimeMs_LE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) AtTimeMs_GT(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) AtTimeMs_GE(val int) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__DirectOffline_Selector) Or() *__DirectOffline_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__DirectOffline_Selector) DirectOfflineId_In(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectOfflineId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) DirectOfflineId_Ins(ins ...int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectOfflineId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) DirectOfflineId_NotIn(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectOfflineId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Selector) DirectOfflineId_Eq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) DirectOfflineId_NotEq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) DirectOfflineId_LT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) DirectOfflineId_LE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) DirectOfflineId_GT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) DirectOfflineId_GE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectOfflineId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Selector) ToUserId_In(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) ToUserId_Ins(ins ...int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) ToUserId_NotIn(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Selector) ToUserId_Eq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) ToUserId_NotEq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) ToUserId_LT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) ToUserId_LE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) ToUserId_GT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) ToUserId_GE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Selector) MessageId_In(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) MessageId_Ins(ins ...int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) MessageId_NotIn(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Selector) MessageId_Eq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageId_NotEq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageId_LT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageId_LE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageId_GT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageId_GE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Selector) MessageFileId_In(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) MessageFileId_Ins(ins ...int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) MessageFileId_NotIn(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Selector) MessageFileId_Eq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageFileId_NotEq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageFileId_LT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageFileId_LE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageFileId_GT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) MessageFileId_GE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Selector) AtTimeMs_In(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) AtTimeMs_Ins(ins ...int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) AtTimeMs_NotIn(ins []int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Selector) AtTimeMs_Eq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) AtTimeMs_NotEq(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) AtTimeMs_LT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) AtTimeMs_LE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) AtTimeMs_GT(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) AtTimeMs_GE(val int) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__DirectOffline_Deleter) ChatKey_In(ins []string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) ChatKey_NotIn(ins []string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Deleter) ChatKey_Like(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Deleter) ChatKey_Eq(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) ChatKey_NotEq(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Deleter) PBClass_In(ins []string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClass IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) PBClass_NotIn(ins []string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClass NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Deleter) PBClass_Like(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClass LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Deleter) PBClass_Eq(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClass = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) PBClass_NotEq(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClass != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Deleter) DataJson_In(ins []string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) DataJson_NotIn(ins []string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Deleter) DataJson_Like(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Deleter) DataJson_Eq(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) DataJson_NotEq(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Deleter) DataTemp_In(ins []string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataTemp IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Deleter) DataTemp_NotIn(ins []string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataTemp NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Deleter) DataTemp_Like(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataTemp LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Deleter) DataTemp_Eq(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataTemp = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Deleter) DataTemp_NotEq(val string) *__DirectOffline_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataTemp != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__DirectOffline_Updater) ChatKey_In(ins []string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) ChatKey_NotIn(ins []string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Updater) ChatKey_Like(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Updater) ChatKey_Eq(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) ChatKey_NotEq(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Updater) PBClass_In(ins []string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClass IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) PBClass_NotIn(ins []string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClass NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Updater) PBClass_Like(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClass LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Updater) PBClass_Eq(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClass = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) PBClass_NotEq(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClass != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Updater) DataJson_In(ins []string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) DataJson_NotIn(ins []string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Updater) DataJson_Like(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Updater) DataJson_Eq(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) DataJson_NotEq(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Updater) DataTemp_In(ins []string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataTemp IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Updater) DataTemp_NotIn(ins []string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataTemp NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Updater) DataTemp_Like(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataTemp LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Updater) DataTemp_Eq(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataTemp = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Updater) DataTemp_NotEq(val string) *__DirectOffline_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataTemp != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__DirectOffline_Selector) ChatKey_In(ins []string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) ChatKey_NotIn(ins []string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Selector) ChatKey_Like(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Selector) ChatKey_Eq(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) ChatKey_NotEq(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Selector) PBClass_In(ins []string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClass IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) PBClass_NotIn(ins []string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PBClass NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Selector) PBClass_Like(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClass LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Selector) PBClass_Eq(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClass = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) PBClass_NotEq(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PBClass != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Selector) DataJson_In(ins []string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) DataJson_NotIn(ins []string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Selector) DataJson_Like(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Selector) DataJson_Eq(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) DataJson_NotEq(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectOffline_Selector) DataTemp_In(ins []string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataTemp IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectOffline_Selector) DataTemp_NotIn(ins []string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataTemp NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectOffline_Selector) DataTemp_Like(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataTemp LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectOffline_Selector) DataTemp_Eq(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataTemp = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectOffline_Selector) DataTemp_NotEq(val string) *__DirectOffline_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataTemp != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__DirectOffline_Updater) DirectOfflineId(newVal int) *__DirectOffline_Updater {
	u.updates[" DirectOfflineId = ? "] = newVal
	return u
}

func (u *__DirectOffline_Updater) DirectOfflineId_Increment(count int) *__DirectOffline_Updater {
	if count > 0 {
		u.updates[" DirectOfflineId = DirectOfflineId+? "] = count
	}

	if count < 0 {
		u.updates[" DirectOfflineId = DirectOfflineId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectOffline_Updater) ToUserId(newVal int) *__DirectOffline_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__DirectOffline_Updater) ToUserId_Increment(count int) *__DirectOffline_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__DirectOffline_Updater) ChatKey(newVal string) *__DirectOffline_Updater {
	u.updates[" ChatKey = ? "] = newVal
	return u
}

//ints

func (u *__DirectOffline_Updater) MessageId(newVal int) *__DirectOffline_Updater {
	u.updates[" MessageId = ? "] = newVal
	return u
}

func (u *__DirectOffline_Updater) MessageId_Increment(count int) *__DirectOffline_Updater {
	if count > 0 {
		u.updates[" MessageId = MessageId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageId = MessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectOffline_Updater) MessageFileId(newVal int) *__DirectOffline_Updater {
	u.updates[" MessageFileId = ? "] = newVal
	return u
}

func (u *__DirectOffline_Updater) MessageFileId_Increment(count int) *__DirectOffline_Updater {
	if count > 0 {
		u.updates[" MessageFileId = MessageFileId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageFileId = MessageFileId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__DirectOffline_Updater) PBClass(newVal string) *__DirectOffline_Updater {
	u.updates[" PBClass = ? "] = newVal
	return u
}

//ints

//string

//ints

//string
func (u *__DirectOffline_Updater) DataJson(newVal string) *__DirectOffline_Updater {
	u.updates[" DataJson = ? "] = newVal
	return u
}

//ints

//string
func (u *__DirectOffline_Updater) DataTemp(newVal string) *__DirectOffline_Updater {
	u.updates[" DataTemp = ? "] = newVal
	return u
}

//ints

func (u *__DirectOffline_Updater) AtTimeMs(newVal int) *__DirectOffline_Updater {
	u.updates[" AtTimeMs = ? "] = newVal
	return u
}

func (u *__DirectOffline_Updater) AtTimeMs_Increment(count int) *__DirectOffline_Updater {
	if count > 0 {
		u.updates[" AtTimeMs = AtTimeMs+? "] = count
	}

	if count < 0 {
		u.updates[" AtTimeMs = AtTimeMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__DirectOffline_Selector) OrderBy_DirectOfflineId_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY DirectOfflineId DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_DirectOfflineId_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY DirectOfflineId ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_DirectOfflineId() *__DirectOffline_Selector {
	u.selectCol = "DirectOfflineId"
	return u
}

func (u *__DirectOffline_Selector) OrderBy_ToUserId_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_ToUserId_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_ToUserId() *__DirectOffline_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__DirectOffline_Selector) OrderBy_ChatKey_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY ChatKey DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_ChatKey_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY ChatKey ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_ChatKey() *__DirectOffline_Selector {
	u.selectCol = "ChatKey"
	return u
}

func (u *__DirectOffline_Selector) OrderBy_MessageId_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_MessageId_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_MessageId() *__DirectOffline_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__DirectOffline_Selector) OrderBy_MessageFileId_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY MessageFileId DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_MessageFileId_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY MessageFileId ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_MessageFileId() *__DirectOffline_Selector {
	u.selectCol = "MessageFileId"
	return u
}

func (u *__DirectOffline_Selector) OrderBy_PBClass_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY PBClass DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_PBClass_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY PBClass ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_PBClass() *__DirectOffline_Selector {
	u.selectCol = "PBClass"
	return u
}

func (u *__DirectOffline_Selector) OrderBy_DataPB_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY DataPB DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_DataPB_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY DataPB ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_DataPB() *__DirectOffline_Selector {
	u.selectCol = "DataPB"
	return u
}

func (u *__DirectOffline_Selector) OrderBy_DataJson_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY DataJson DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_DataJson_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY DataJson ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_DataJson() *__DirectOffline_Selector {
	u.selectCol = "DataJson"
	return u
}

func (u *__DirectOffline_Selector) OrderBy_DataTemp_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY DataTemp DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_DataTemp_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY DataTemp ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_DataTemp() *__DirectOffline_Selector {
	u.selectCol = "DataTemp"
	return u
}

func (u *__DirectOffline_Selector) OrderBy_AtTimeMs_Desc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY AtTimeMs DESC "
	return u
}

func (u *__DirectOffline_Selector) OrderBy_AtTimeMs_Asc() *__DirectOffline_Selector {
	u.orderBy = " ORDER BY AtTimeMs ASC "
	return u
}

func (u *__DirectOffline_Selector) Select_AtTimeMs() *__DirectOffline_Selector {
	u.selectCol = "AtTimeMs"
	return u
}

func (u *__DirectOffline_Selector) Limit(num int) *__DirectOffline_Selector {
	u.limit = num
	return u
}

func (u *__DirectOffline_Selector) Offset(num int) *__DirectOffline_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__DirectOffline_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.direct_offline"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__DirectOffline_Selector) GetRow(db *sqlx.DB) (*DirectOffline, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &DirectOffline{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnDirectOffline_LoadOne(row)

	return row, nil
}

func (u *__DirectOffline_Selector) GetRows(db *sqlx.DB) ([]*DirectOffline, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*DirectOffline
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnDirectOffline_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__DirectOffline_Selector) GetRows2(db *sqlx.DB) ([]DirectOffline, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*DirectOffline
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnDirectOffline_LoadMany(rows)

	rows2 := make([]DirectOffline, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__DirectOffline_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__DirectOffline_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__DirectOffline_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__DirectOffline_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__DirectOffline_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.direct_offline SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__DirectOffline_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.direct_offline WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  DirectOffline ////////////////

func MassInsert_DirectOffline(rows []DirectOffline, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.direct_offline (" +
		"DirectOfflineId, ToUserId, ChatKey, MessageId, MessageFileId, PBClass, DataPB, DataJson, DataTemp, AtTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.DirectOfflineId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.PBClass)
		vals = append(vals, row.DataPB)
		vals = append(vals, row.DataJson)
		vals = append(vals, row.DataTemp)
		vals = append(vals, row.AtTimeMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_DirectOffline(rows []DirectOffline, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.direct_offline (" +
		"DirectOfflineId, ToUserId, ChatKey, MessageId, MessageFileId, PBClass, DataPB, DataJson, DataTemp, AtTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.DirectOfflineId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.PBClass)
		vals = append(vals, row.DataPB)
		vals = append(vals, row.DataJson)
		vals = append(vals, row.DataTemp)
		vals = append(vals, row.AtTimeMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//
