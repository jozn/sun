// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// MessageOld represents a row from 'ms.message_old'.

// Manualy copy this to project
type MessageOld__ struct {
	Id         int    `json:"Id"`         // Id -
	ToUserId   int    `json:"ToUserId"`   // ToUserId -
	RoomKey    string `json:"RoomKey"`    // RoomKey -
	MessageKey string `json:"MessageKey"` // MessageKey -
	FromUserID int    `json:"FromUserID"` // FromUserID -
	Data       string `json:"Data"`       // Data -
	TimeMs     int    `json:"TimeMs"`     // TimeMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MessageOld exists in the database.
func (mo *MessageOld) Exists() bool {
	return mo._exists
}

// Deleted provides information if the MessageOld has been deleted from the database.
func (mo *MessageOld) Deleted() bool {
	return mo._deleted
}

// Insert inserts the MessageOld to the database.
func (mo *MessageOld) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mo._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.message_old (` +
		`ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mo.ToUserId, mo.RoomKey, mo.MessageKey, mo.FromUserID, mo.Data, mo.TimeMs)
	res, err := db.Exec(sqlstr, mo.ToUserId, mo.RoomKey, mo.MessageKey, mo.FromUserID, mo.Data, mo.TimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	mo.Id = int(id)
	mo._exists = true

	OnMessageOld_AfterInsert(mo)

	return nil
}

// Insert inserts the MessageOld to the database.
func (mo *MessageOld) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.message_old (` +
		`ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mo.ToUserId, mo.RoomKey, mo.MessageKey, mo.FromUserID, mo.Data, mo.TimeMs)
	res, err := db.Exec(sqlstr, mo.ToUserId, mo.RoomKey, mo.MessageKey, mo.FromUserID, mo.Data, mo.TimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	mo.Id = int(id)
	mo._exists = true

	OnMessageOld_AfterInsert(mo)

	return nil
}

// Update updates the MessageOld in the database.
func (mo *MessageOld) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mo._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mo._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.message_old SET ` +
		`ToUserId = ?, RoomKey = ?, MessageKey = ?, FromUserID = ?, Data = ?, TimeMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, mo.ToUserId, mo.RoomKey, mo.MessageKey, mo.FromUserID, mo.Data, mo.TimeMs, mo.Id)
	_, err = db.Exec(sqlstr, mo.ToUserId, mo.RoomKey, mo.MessageKey, mo.FromUserID, mo.Data, mo.TimeMs, mo.Id)

	XOLogErr(err)
	OnMessageOld_AfterUpdate(mo)

	return err
}

// Save saves the MessageOld to the database.
func (mo *MessageOld) Save(db XODB) error {
	if mo.Exists() {
		return mo.Update(db)
	}

	return mo.Replace(db)
}

// Delete deletes the MessageOld from the database.
func (mo *MessageOld) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mo._exists {
		return nil
	}

	// if deleted, bail
	if mo._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.message_old WHERE Id = ?`

	// run query
	XOLog(sqlstr, mo.Id)
	_, err = db.Exec(sqlstr, mo.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	mo._deleted = true

	OnMessageOld_AfterDelete(mo)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MessageOld_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MessageOld_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MessageOld_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMessageOld_Deleter() *__MessageOld_Deleter {
	d := __MessageOld_Deleter{whereSep: " AND "}
	return &d
}

func NewMessageOld_Updater() *__MessageOld_Updater {
	u := __MessageOld_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMessageOld_Selector() *__MessageOld_Selector {
	u := __MessageOld_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MessageOld_Deleter) Or() *__MessageOld_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MessageOld_Deleter) Id_In(ins []int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) Id_Ins(ins ...int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) Id_NotIn(ins []int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Deleter) Id_Eq(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) Id_NotEq(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) Id_LT(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) Id_LE(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) Id_GT(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) Id_GE(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Deleter) ToUserId_In(ins []int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) ToUserId_Ins(ins ...int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) ToUserId_NotIn(ins []int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Deleter) ToUserId_Eq(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) ToUserId_NotEq(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) ToUserId_LT(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) ToUserId_LE(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) ToUserId_GT(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) ToUserId_GE(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Deleter) FromUserID_In(ins []int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) FromUserID_Ins(ins ...int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) FromUserID_NotIn(ins []int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Deleter) FromUserID_Eq(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) FromUserID_NotEq(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) FromUserID_LT(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) FromUserID_LE(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) FromUserID_GT(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) FromUserID_GE(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Deleter) TimeMs_In(ins []int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) TimeMs_Ins(ins ...int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) TimeMs_NotIn(ins []int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Deleter) TimeMs_Eq(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) TimeMs_NotEq(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) TimeMs_LT(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) TimeMs_LE(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) TimeMs_GT(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) TimeMs_GE(val int) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MessageOld_Updater) Or() *__MessageOld_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MessageOld_Updater) Id_In(ins []int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) Id_Ins(ins ...int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) Id_NotIn(ins []int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Updater) Id_Eq(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) Id_NotEq(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) Id_LT(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) Id_LE(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) Id_GT(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) Id_GE(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Updater) ToUserId_In(ins []int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) ToUserId_Ins(ins ...int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) ToUserId_NotIn(ins []int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Updater) ToUserId_Eq(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) ToUserId_NotEq(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) ToUserId_LT(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) ToUserId_LE(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) ToUserId_GT(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) ToUserId_GE(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Updater) FromUserID_In(ins []int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) FromUserID_Ins(ins ...int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) FromUserID_NotIn(ins []int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Updater) FromUserID_Eq(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) FromUserID_NotEq(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) FromUserID_LT(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) FromUserID_LE(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) FromUserID_GT(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) FromUserID_GE(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Updater) TimeMs_In(ins []int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) TimeMs_Ins(ins ...int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) TimeMs_NotIn(ins []int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Updater) TimeMs_Eq(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) TimeMs_NotEq(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) TimeMs_LT(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) TimeMs_LE(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) TimeMs_GT(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) TimeMs_GE(val int) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MessageOld_Selector) Or() *__MessageOld_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MessageOld_Selector) Id_In(ins []int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) Id_Ins(ins ...int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) Id_NotIn(ins []int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Selector) Id_Eq(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) Id_NotEq(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) Id_LT(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) Id_LE(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) Id_GT(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) Id_GE(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Selector) ToUserId_In(ins []int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) ToUserId_Ins(ins ...int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) ToUserId_NotIn(ins []int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Selector) ToUserId_Eq(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) ToUserId_NotEq(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) ToUserId_LT(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) ToUserId_LE(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) ToUserId_GT(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) ToUserId_GE(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Selector) FromUserID_In(ins []int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) FromUserID_Ins(ins ...int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) FromUserID_NotIn(ins []int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Selector) FromUserID_Eq(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) FromUserID_NotEq(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) FromUserID_LT(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) FromUserID_LE(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) FromUserID_GT(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) FromUserID_GE(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Selector) TimeMs_In(ins []int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) TimeMs_Ins(ins ...int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) TimeMs_NotIn(ins []int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Selector) TimeMs_Eq(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) TimeMs_NotEq(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) TimeMs_LT(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) TimeMs_LE(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) TimeMs_GT(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) TimeMs_GE(val int) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MessageOld_Deleter) RoomKey_In(ins []string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) RoomKey_NotIn(ins []string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageOld_Deleter) RoomKey_Like(val string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Deleter) RoomKey_Eq(val string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) RoomKey_NotEq(val string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Deleter) MessageKey_In(ins []string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) MessageKey_NotIn(ins []string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageOld_Deleter) MessageKey_Like(val string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Deleter) MessageKey_Eq(val string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) MessageKey_NotEq(val string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Deleter) Data_In(ins []string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Deleter) Data_NotIn(ins []string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageOld_Deleter) Data_Like(val string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Deleter) Data_Eq(val string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Deleter) Data_NotEq(val string) *__MessageOld_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MessageOld_Updater) RoomKey_In(ins []string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) RoomKey_NotIn(ins []string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageOld_Updater) RoomKey_Like(val string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Updater) RoomKey_Eq(val string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) RoomKey_NotEq(val string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Updater) MessageKey_In(ins []string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) MessageKey_NotIn(ins []string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageOld_Updater) MessageKey_Like(val string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Updater) MessageKey_Eq(val string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) MessageKey_NotEq(val string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Updater) Data_In(ins []string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Updater) Data_NotIn(ins []string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageOld_Updater) Data_Like(val string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Updater) Data_Eq(val string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Updater) Data_NotEq(val string) *__MessageOld_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MessageOld_Selector) RoomKey_In(ins []string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) RoomKey_NotIn(ins []string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageOld_Selector) RoomKey_Like(val string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Selector) RoomKey_Eq(val string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) RoomKey_NotEq(val string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Selector) MessageKey_In(ins []string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) MessageKey_NotIn(ins []string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageOld_Selector) MessageKey_Like(val string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Selector) MessageKey_Eq(val string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) MessageKey_NotEq(val string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageOld_Selector) Data_In(ins []string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageOld_Selector) Data_NotIn(ins []string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageOld_Selector) Data_Like(val string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageOld_Selector) Data_Eq(val string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageOld_Selector) Data_NotEq(val string) *__MessageOld_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MessageOld_Updater) Id(newVal int) *__MessageOld_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__MessageOld_Updater) Id_Increment(count int) *__MessageOld_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageOld_Updater) ToUserId(newVal int) *__MessageOld_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__MessageOld_Updater) ToUserId_Increment(count int) *__MessageOld_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MessageOld_Updater) RoomKey(newVal string) *__MessageOld_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__MessageOld_Updater) MessageKey(newVal string) *__MessageOld_Updater {
	u.updates[" MessageKey = ? "] = newVal
	return u
}

//ints

func (u *__MessageOld_Updater) FromUserID(newVal int) *__MessageOld_Updater {
	u.updates[" FromUserID = ? "] = newVal
	return u
}

func (u *__MessageOld_Updater) FromUserID_Increment(count int) *__MessageOld_Updater {
	if count > 0 {
		u.updates[" FromUserID = FromUserID+? "] = count
	}

	if count < 0 {
		u.updates[" FromUserID = FromUserID-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MessageOld_Updater) Data(newVal string) *__MessageOld_Updater {
	u.updates[" Data = ? "] = newVal
	return u
}

//ints

func (u *__MessageOld_Updater) TimeMs(newVal int) *__MessageOld_Updater {
	u.updates[" TimeMs = ? "] = newVal
	return u
}

func (u *__MessageOld_Updater) TimeMs_Increment(count int) *__MessageOld_Updater {
	if count > 0 {
		u.updates[" TimeMs = TimeMs+? "] = count
	}

	if count < 0 {
		u.updates[" TimeMs = TimeMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MessageOld_Selector) OrderBy_Id_Desc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MessageOld_Selector) OrderBy_Id_Asc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MessageOld_Selector) Select_Id() *__MessageOld_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MessageOld_Selector) OrderBy_ToUserId_Desc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__MessageOld_Selector) OrderBy_ToUserId_Asc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__MessageOld_Selector) Select_ToUserId() *__MessageOld_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__MessageOld_Selector) OrderBy_RoomKey_Desc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__MessageOld_Selector) OrderBy_RoomKey_Asc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__MessageOld_Selector) Select_RoomKey() *__MessageOld_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__MessageOld_Selector) OrderBy_MessageKey_Desc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY MessageKey DESC "
	return u
}

func (u *__MessageOld_Selector) OrderBy_MessageKey_Asc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY MessageKey ASC "
	return u
}

func (u *__MessageOld_Selector) Select_MessageKey() *__MessageOld_Selector {
	u.selectCol = "MessageKey"
	return u
}

func (u *__MessageOld_Selector) OrderBy_FromUserID_Desc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY FromUserID DESC "
	return u
}

func (u *__MessageOld_Selector) OrderBy_FromUserID_Asc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY FromUserID ASC "
	return u
}

func (u *__MessageOld_Selector) Select_FromUserID() *__MessageOld_Selector {
	u.selectCol = "FromUserID"
	return u
}

func (u *__MessageOld_Selector) OrderBy_Data_Desc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY Data DESC "
	return u
}

func (u *__MessageOld_Selector) OrderBy_Data_Asc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY Data ASC "
	return u
}

func (u *__MessageOld_Selector) Select_Data() *__MessageOld_Selector {
	u.selectCol = "Data"
	return u
}

func (u *__MessageOld_Selector) OrderBy_TimeMs_Desc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY TimeMs DESC "
	return u
}

func (u *__MessageOld_Selector) OrderBy_TimeMs_Asc() *__MessageOld_Selector {
	u.orderBy = " ORDER BY TimeMs ASC "
	return u
}

func (u *__MessageOld_Selector) Select_TimeMs() *__MessageOld_Selector {
	u.selectCol = "TimeMs"
	return u
}

func (u *__MessageOld_Selector) Limit(num int) *__MessageOld_Selector {
	u.limit = num
	return u
}

func (u *__MessageOld_Selector) Offset(num int) *__MessageOld_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MessageOld_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.message_old"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MessageOld_Selector) GetRow(db *sqlx.DB) (*MessageOld, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MessageOld{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnMessageOld_LoadOne(row)

	return row, nil
}

func (u *__MessageOld_Selector) GetRows(db *sqlx.DB) ([]*MessageOld, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MessageOld
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMessageOld_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__MessageOld_Selector) GetRows2(db *sqlx.DB) ([]MessageOld, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MessageOld
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMessageOld_LoadMany(rows)

	rows2 := make([]MessageOld, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__MessageOld_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__MessageOld_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MessageOld_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MessageOld_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MessageOld_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.message_old SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__MessageOld_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.message_old WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MessageOld ////////////////
func MassInsert_MessageOld(rows []MessageOld, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.message_old (" +
		"ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.FromUserID)
		vals = append(vals, row.Data)
		vals = append(vals, row.TimeMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_MessageOld(rows []MessageOld, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.message_old (" +
		"ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.FromUserID)
		vals = append(vals, row.Data)
		vals = append(vals, row.TimeMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

// MessageOldsByToUserId retrieves a row from 'ms.message_old' as a MessageOld.
//
// Generated from index 'ToUserId'.
func MessageOldsByToUserId(db XODB, toUserId int) ([]*MessageOld, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs ` +
		`FROM ms.message_old ` +
		`WHERE ToUserId = ?`

	// run query
	XOLog(sqlstr, toUserId)
	q, err := db.Query(sqlstr, toUserId)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MessageOld{}
	for q.Next() {
		mo := MessageOld{
			_exists: true,
		}

		// scan
		err = q.Scan(&mo.Id, &mo.ToUserId, &mo.RoomKey, &mo.MessageKey, &mo.FromUserID, &mo.Data, &mo.TimeMs)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &mo)
	}

	OnMessageOld_LoadMany(res)

	return res, nil
}

// MessageOldsByToUserIdTimeMs retrieves a row from 'ms.message_old' as a MessageOld.
//
// Generated from index 'ToUserId_2'.
func MessageOldsByToUserIdTimeMs(db XODB, toUserId int, timeMs int) ([]*MessageOld, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs ` +
		`FROM ms.message_old ` +
		`WHERE ToUserId = ? AND TimeMs = ?`

	// run query
	XOLog(sqlstr, toUserId, timeMs)
	q, err := db.Query(sqlstr, toUserId, timeMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MessageOld{}
	for q.Next() {
		mo := MessageOld{
			_exists: true,
		}

		// scan
		err = q.Scan(&mo.Id, &mo.ToUserId, &mo.RoomKey, &mo.MessageKey, &mo.FromUserID, &mo.Data, &mo.TimeMs)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &mo)
	}

	OnMessageOld_LoadMany(res)

	return res, nil
}

// MessageOldById retrieves a row from 'ms.message_old' as a MessageOld.
//
// Generated from index 'message_old_Id_pkey'.
func MessageOldById(db XODB, id int) (*MessageOld, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, RoomKey, MessageKey, FromUserID, Data, TimeMs ` +
		`FROM ms.message_old ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	mo := MessageOld{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mo.Id, &mo.ToUserId, &mo.RoomKey, &mo.MessageKey, &mo.FromUserID, &mo.Data, &mo.TimeMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnMessageOld_LoadOne(&mo)

	return &mo, nil
}
