package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// GroupMessage represents a row from 'ms.group_message'.

// Manualy copy this to project
type GroupMessage__ struct {
	MessageId          int    `json:"MessageId"`          // MessageId -
	RoomKey            string `json:"RoomKey"`            // RoomKey -
	UserId             int    `json:"UserId"`             // UserId -
	MessageFileId      int    `json:"MessageFileId"`      // MessageFileId -
	MessageTypeEnum    int    `json:"MessageTypeEnum"`    // MessageTypeEnum -
	Text               string `json:"Text"`               // Text -
	CreatedMs          int    `json:"CreatedMs"`          // CreatedMs -
	DeliveryStatusEnum int    `json:"DeliveryStatusEnum"` // DeliveryStatusEnum -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GroupMessage exists in the database.
func (gm *GroupMessage) Exists() bool {
	return gm._exists
}

// Deleted provides information if the GroupMessage has been deleted from the database.
func (gm *GroupMessage) Deleted() bool {
	return gm._deleted
}

// Insert inserts the GroupMessage to the database.
func (gm *GroupMessage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ms.group_message (` +
		`MessageId, RoomKey, UserId, MessageFileId, MessageTypeEnum, Text, CreatedMs, DeliveryStatusEnum` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gm.MessageId, gm.RoomKey, gm.UserId, gm.MessageFileId, gm.MessageTypeEnum, gm.Text, gm.CreatedMs, gm.DeliveryStatusEnum)
	_, err = db.Exec(sqlstr, gm.MessageId, gm.RoomKey, gm.UserId, gm.MessageFileId, gm.MessageTypeEnum, gm.Text, gm.CreatedMs, gm.DeliveryStatusEnum)
	if err != nil {
		return err
	}

	// set existence
	gm._exists = true

	OnGroupMessage_AfterInsert(gm)

	return nil
}

// Insert inserts the GroupMessage to the database.
func (gm *GroupMessage) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.group_message (` +
		`MessageId, RoomKey, UserId, MessageFileId, MessageTypeEnum, Text, CreatedMs, DeliveryStatusEnum` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gm.MessageId, gm.RoomKey, gm.UserId, gm.MessageFileId, gm.MessageTypeEnum, gm.Text, gm.CreatedMs, gm.DeliveryStatusEnum)
	_, err = db.Exec(sqlstr, gm.MessageId, gm.RoomKey, gm.UserId, gm.MessageFileId, gm.MessageTypeEnum, gm.Text, gm.CreatedMs, gm.DeliveryStatusEnum)
	if err != nil {
		XOLogErr(err)
		return err
	}

	gm._exists = true

	OnGroupMessage_AfterInsert(gm)

	return nil
}

// Update updates the GroupMessage in the database.
func (gm *GroupMessage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.group_message SET ` +
		`RoomKey = ?, UserId = ?, MessageFileId = ?, MessageTypeEnum = ?, Text = ?, CreatedMs = ?, DeliveryStatusEnum = ?` +
		` WHERE MessageId = ?`

	// run query
	XOLog(sqlstr, gm.RoomKey, gm.UserId, gm.MessageFileId, gm.MessageTypeEnum, gm.Text, gm.CreatedMs, gm.DeliveryStatusEnum, gm.MessageId)
	_, err = db.Exec(sqlstr, gm.RoomKey, gm.UserId, gm.MessageFileId, gm.MessageTypeEnum, gm.Text, gm.CreatedMs, gm.DeliveryStatusEnum, gm.MessageId)

	XOLogErr(err)
	OnGroupMessage_AfterUpdate(gm)

	return err
}

// Save saves the GroupMessage to the database.
func (gm *GroupMessage) Save(db XODB) error {
	if gm.Exists() {
		return gm.Update(db)
	}

	return gm.Replace(db)
}

// Delete deletes the GroupMessage from the database.
func (gm *GroupMessage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gm._exists {
		return nil
	}

	// if deleted, bail
	if gm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.group_message WHERE MessageId = ?`

	// run query
	XOLog(sqlstr, gm.MessageId)
	_, err = db.Exec(sqlstr, gm.MessageId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	gm._deleted = true

	OnGroupMessage_AfterDelete(gm)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __GroupMessage_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __GroupMessage_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __GroupMessage_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewGroupMessage_Deleter() *__GroupMessage_Deleter {
	d := __GroupMessage_Deleter{whereSep: " AND "}
	return &d
}

func NewGroupMessage_Updater() *__GroupMessage_Updater {
	u := __GroupMessage_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewGroupMessage_Selector() *__GroupMessage_Selector {
	u := __GroupMessage_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__GroupMessage_Deleter) Or() *__GroupMessage_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__GroupMessage_Deleter) MessageId_In(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) MessageId_Ins(ins ...int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) MessageId_NotIn(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Deleter) MessageId_Eq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageId_NotEq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageId_LT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageId_LE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageId_GT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageId_GE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Deleter) UserId_In(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) UserId_Ins(ins ...int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) UserId_NotIn(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Deleter) UserId_Eq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) UserId_NotEq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) UserId_LT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) UserId_LE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) UserId_GT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) UserId_GE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Deleter) MessageFileId_In(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) MessageFileId_Ins(ins ...int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) MessageFileId_NotIn(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Deleter) MessageFileId_Eq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageFileId_NotEq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageFileId_LT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageFileId_LE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageFileId_GT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageFileId_GE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Deleter) MessageTypeEnum_In(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) MessageTypeEnum_Ins(ins ...int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) MessageTypeEnum_NotIn(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Deleter) MessageTypeEnum_Eq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageTypeEnum_NotEq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageTypeEnum_LT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageTypeEnum_LE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageTypeEnum_GT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) MessageTypeEnum_GE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Deleter) CreatedMs_In(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) CreatedMs_Ins(ins ...int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) CreatedMs_NotIn(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Deleter) CreatedMs_Eq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) CreatedMs_NotEq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) CreatedMs_LT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) CreatedMs_LE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) CreatedMs_GT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) CreatedMs_GE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Deleter) DeliveryStatusEnum_In(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliveryStatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) DeliveryStatusEnum_Ins(ins ...int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliveryStatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) DeliveryStatusEnum_NotIn(ins []int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliveryStatusEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Deleter) DeliveryStatusEnum_Eq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) DeliveryStatusEnum_NotEq(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) DeliveryStatusEnum_LT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) DeliveryStatusEnum_LE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) DeliveryStatusEnum_GT(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) DeliveryStatusEnum_GE(val int) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__GroupMessage_Updater) Or() *__GroupMessage_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__GroupMessage_Updater) MessageId_In(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) MessageId_Ins(ins ...int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) MessageId_NotIn(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Updater) MessageId_Eq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageId_NotEq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageId_LT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageId_LE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageId_GT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageId_GE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Updater) UserId_In(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) UserId_Ins(ins ...int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) UserId_NotIn(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Updater) UserId_Eq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) UserId_NotEq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) UserId_LT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) UserId_LE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) UserId_GT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) UserId_GE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Updater) MessageFileId_In(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) MessageFileId_Ins(ins ...int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) MessageFileId_NotIn(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Updater) MessageFileId_Eq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageFileId_NotEq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageFileId_LT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageFileId_LE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageFileId_GT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageFileId_GE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Updater) MessageTypeEnum_In(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) MessageTypeEnum_Ins(ins ...int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) MessageTypeEnum_NotIn(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Updater) MessageTypeEnum_Eq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageTypeEnum_NotEq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageTypeEnum_LT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageTypeEnum_LE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageTypeEnum_GT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) MessageTypeEnum_GE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Updater) CreatedMs_In(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) CreatedMs_Ins(ins ...int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) CreatedMs_NotIn(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Updater) CreatedMs_Eq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) CreatedMs_NotEq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) CreatedMs_LT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) CreatedMs_LE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) CreatedMs_GT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) CreatedMs_GE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Updater) DeliveryStatusEnum_In(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliveryStatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) DeliveryStatusEnum_Ins(ins ...int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliveryStatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) DeliveryStatusEnum_NotIn(ins []int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliveryStatusEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Updater) DeliveryStatusEnum_Eq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) DeliveryStatusEnum_NotEq(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) DeliveryStatusEnum_LT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) DeliveryStatusEnum_LE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) DeliveryStatusEnum_GT(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) DeliveryStatusEnum_GE(val int) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__GroupMessage_Selector) Or() *__GroupMessage_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__GroupMessage_Selector) MessageId_In(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) MessageId_Ins(ins ...int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) MessageId_NotIn(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Selector) MessageId_Eq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageId_NotEq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageId_LT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageId_LE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageId_GT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageId_GE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Selector) UserId_In(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) UserId_Ins(ins ...int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) UserId_NotIn(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Selector) UserId_Eq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) UserId_NotEq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) UserId_LT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) UserId_LE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) UserId_GT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) UserId_GE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Selector) MessageFileId_In(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) MessageFileId_Ins(ins ...int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) MessageFileId_NotIn(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Selector) MessageFileId_Eq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageFileId_NotEq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageFileId_LT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageFileId_LE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageFileId_GT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageFileId_GE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Selector) MessageTypeEnum_In(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) MessageTypeEnum_Ins(ins ...int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) MessageTypeEnum_NotIn(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Selector) MessageTypeEnum_Eq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageTypeEnum_NotEq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageTypeEnum_LT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageTypeEnum_LE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageTypeEnum_GT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) MessageTypeEnum_GE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Selector) CreatedMs_In(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) CreatedMs_Ins(ins ...int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) CreatedMs_NotIn(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Selector) CreatedMs_Eq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) CreatedMs_NotEq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) CreatedMs_LT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) CreatedMs_LE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) CreatedMs_GT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) CreatedMs_GE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Selector) DeliveryStatusEnum_In(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliveryStatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) DeliveryStatusEnum_Ins(ins ...int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliveryStatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) DeliveryStatusEnum_NotIn(ins []int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliveryStatusEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Selector) DeliveryStatusEnum_Eq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) DeliveryStatusEnum_NotEq(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) DeliveryStatusEnum_LT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) DeliveryStatusEnum_LE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) DeliveryStatusEnum_GT(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) DeliveryStatusEnum_GE(val int) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliveryStatusEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__GroupMessage_Deleter) RoomKey_In(ins []string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) RoomKey_NotIn(ins []string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__GroupMessage_Deleter) RoomKey_Like(val string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Deleter) RoomKey_Eq(val string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) RoomKey_NotEq(val string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Deleter) Text_In(ins []string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Deleter) Text_NotIn(ins []string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__GroupMessage_Deleter) Text_Like(val string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Deleter) Text_Eq(val string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Deleter) Text_NotEq(val string) *__GroupMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__GroupMessage_Updater) RoomKey_In(ins []string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) RoomKey_NotIn(ins []string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__GroupMessage_Updater) RoomKey_Like(val string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Updater) RoomKey_Eq(val string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) RoomKey_NotEq(val string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Updater) Text_In(ins []string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Updater) Text_NotIn(ins []string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__GroupMessage_Updater) Text_Like(val string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Updater) Text_Eq(val string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Updater) Text_NotEq(val string) *__GroupMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__GroupMessage_Selector) RoomKey_In(ins []string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) RoomKey_NotIn(ins []string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__GroupMessage_Selector) RoomKey_Like(val string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Selector) RoomKey_Eq(val string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) RoomKey_NotEq(val string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupMessage_Selector) Text_In(ins []string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupMessage_Selector) Text_NotIn(ins []string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__GroupMessage_Selector) Text_Like(val string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupMessage_Selector) Text_Eq(val string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupMessage_Selector) Text_NotEq(val string) *__GroupMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__GroupMessage_Updater) MessageId(newVal int) *__GroupMessage_Updater {
	u.updates[" MessageId = ? "] = newVal
	return u
}

func (u *__GroupMessage_Updater) MessageId_Increment(count int) *__GroupMessage_Updater {
	if count > 0 {
		u.updates[" MessageId = MessageId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageId = MessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__GroupMessage_Updater) RoomKey(newVal string) *__GroupMessage_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__GroupMessage_Updater) UserId(newVal int) *__GroupMessage_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__GroupMessage_Updater) UserId_Increment(count int) *__GroupMessage_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GroupMessage_Updater) MessageFileId(newVal int) *__GroupMessage_Updater {
	u.updates[" MessageFileId = ? "] = newVal
	return u
}

func (u *__GroupMessage_Updater) MessageFileId_Increment(count int) *__GroupMessage_Updater {
	if count > 0 {
		u.updates[" MessageFileId = MessageFileId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageFileId = MessageFileId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GroupMessage_Updater) MessageTypeEnum(newVal int) *__GroupMessage_Updater {
	u.updates[" MessageTypeEnum = ? "] = newVal
	return u
}

func (u *__GroupMessage_Updater) MessageTypeEnum_Increment(count int) *__GroupMessage_Updater {
	if count > 0 {
		u.updates[" MessageTypeEnum = MessageTypeEnum+? "] = count
	}

	if count < 0 {
		u.updates[" MessageTypeEnum = MessageTypeEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__GroupMessage_Updater) Text(newVal string) *__GroupMessage_Updater {
	u.updates[" Text = ? "] = newVal
	return u
}

//ints

func (u *__GroupMessage_Updater) CreatedMs(newVal int) *__GroupMessage_Updater {
	u.updates[" CreatedMs = ? "] = newVal
	return u
}

func (u *__GroupMessage_Updater) CreatedMs_Increment(count int) *__GroupMessage_Updater {
	if count > 0 {
		u.updates[" CreatedMs = CreatedMs+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedMs = CreatedMs-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GroupMessage_Updater) DeliveryStatusEnum(newVal int) *__GroupMessage_Updater {
	u.updates[" DeliveryStatusEnum = ? "] = newVal
	return u
}

func (u *__GroupMessage_Updater) DeliveryStatusEnum_Increment(count int) *__GroupMessage_Updater {
	if count > 0 {
		u.updates[" DeliveryStatusEnum = DeliveryStatusEnum+? "] = count
	}

	if count < 0 {
		u.updates[" DeliveryStatusEnum = DeliveryStatusEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__GroupMessage_Selector) OrderBy_MessageId_Desc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__GroupMessage_Selector) OrderBy_MessageId_Asc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__GroupMessage_Selector) Select_MessageId() *__GroupMessage_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__GroupMessage_Selector) OrderBy_RoomKey_Desc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__GroupMessage_Selector) OrderBy_RoomKey_Asc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__GroupMessage_Selector) Select_RoomKey() *__GroupMessage_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__GroupMessage_Selector) OrderBy_UserId_Desc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__GroupMessage_Selector) OrderBy_UserId_Asc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__GroupMessage_Selector) Select_UserId() *__GroupMessage_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__GroupMessage_Selector) OrderBy_MessageFileId_Desc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY MessageFileId DESC "
	return u
}

func (u *__GroupMessage_Selector) OrderBy_MessageFileId_Asc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY MessageFileId ASC "
	return u
}

func (u *__GroupMessage_Selector) Select_MessageFileId() *__GroupMessage_Selector {
	u.selectCol = "MessageFileId"
	return u
}

func (u *__GroupMessage_Selector) OrderBy_MessageTypeEnum_Desc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY MessageTypeEnum DESC "
	return u
}

func (u *__GroupMessage_Selector) OrderBy_MessageTypeEnum_Asc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY MessageTypeEnum ASC "
	return u
}

func (u *__GroupMessage_Selector) Select_MessageTypeEnum() *__GroupMessage_Selector {
	u.selectCol = "MessageTypeEnum"
	return u
}

func (u *__GroupMessage_Selector) OrderBy_Text_Desc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__GroupMessage_Selector) OrderBy_Text_Asc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__GroupMessage_Selector) Select_Text() *__GroupMessage_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__GroupMessage_Selector) OrderBy_CreatedMs_Desc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY CreatedMs DESC "
	return u
}

func (u *__GroupMessage_Selector) OrderBy_CreatedMs_Asc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY CreatedMs ASC "
	return u
}

func (u *__GroupMessage_Selector) Select_CreatedMs() *__GroupMessage_Selector {
	u.selectCol = "CreatedMs"
	return u
}

func (u *__GroupMessage_Selector) OrderBy_DeliveryStatusEnum_Desc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY DeliveryStatusEnum DESC "
	return u
}

func (u *__GroupMessage_Selector) OrderBy_DeliveryStatusEnum_Asc() *__GroupMessage_Selector {
	u.orderBy = " ORDER BY DeliveryStatusEnum ASC "
	return u
}

func (u *__GroupMessage_Selector) Select_DeliveryStatusEnum() *__GroupMessage_Selector {
	u.selectCol = "DeliveryStatusEnum"
	return u
}

func (u *__GroupMessage_Selector) Limit(num int) *__GroupMessage_Selector {
	u.limit = num
	return u
}

func (u *__GroupMessage_Selector) Offset(num int) *__GroupMessage_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__GroupMessage_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.group_message"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__GroupMessage_Selector) GetRow(db *sqlx.DB) (*GroupMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &GroupMessage{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnGroupMessage_LoadOne(row)

	return row, nil
}

func (u *__GroupMessage_Selector) GetRows(db *sqlx.DB) ([]*GroupMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*GroupMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGroupMessage_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__GroupMessage_Selector) GetRows2(db *sqlx.DB) ([]GroupMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*GroupMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGroupMessage_LoadMany(rows)

	rows2 := make([]GroupMessage, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__GroupMessage_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__GroupMessage_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__GroupMessage_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__GroupMessage_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__GroupMessage_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.group_message SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__GroupMessage_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.group_message WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  GroupMessage ////////////////

func MassInsert_GroupMessage(rows []GroupMessage, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.group_message (" +
		"MessageId, RoomKey, UserId, MessageFileId, MessageTypeEnum, Text, CreatedMs, DeliveryStatusEnum" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.MessageTypeEnum)
		vals = append(vals, row.Text)
		vals = append(vals, row.CreatedMs)
		vals = append(vals, row.DeliveryStatusEnum)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_GroupMessage(rows []GroupMessage, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.group_message (" +
		"MessageId, RoomKey, UserId, MessageFileId, MessageTypeEnum, Text, CreatedMs, DeliveryStatusEnum" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.MessageTypeEnum)
		vals = append(vals, row.Text)
		vals = append(vals, row.CreatedMs)
		vals = append(vals, row.DeliveryStatusEnum)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//
