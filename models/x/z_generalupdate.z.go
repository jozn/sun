// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// GeneralUpdate represents a row from 'ms.general_update'.

// Manualy copy this to project
type GeneralUpdate__ struct {
	Id                  int    `json:"Id"`                  // Id -
	ToUserId            int    `json:"ToUserId"`            // ToUserId -
	TargetId            int    `json:"TargetId"`            // TargetId -
	GeneralUpdateTypeId int    `json:"GeneralUpdateTypeId"` // GeneralUpdateTypeId -
	ExtraPB             []byte `json:"ExtraPB"`             // ExtraPB -
	ExtraJson           string `json:"ExtraJson"`           // ExtraJson -
	CreatedMs           int    `json:"CreatedMs"`           // CreatedMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GeneralUpdate exists in the database.
func (gu *GeneralUpdate) Exists() bool {
	return gu._exists
}

// Deleted provides information if the GeneralUpdate has been deleted from the database.
func (gu *GeneralUpdate) Deleted() bool {
	return gu._deleted
}

// Insert inserts the GeneralUpdate to the database.
func (gu *GeneralUpdate) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ms.general_update (` +
		`Id, ToUserId, TargetId, GeneralUpdateTypeId, ExtraPB, ExtraJson, CreatedMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gu.Id, gu.ToUserId, gu.TargetId, gu.GeneralUpdateTypeId, gu.ExtraPB, gu.ExtraJson, gu.CreatedMs)
	_, err = db.Exec(sqlstr, gu.Id, gu.ToUserId, gu.TargetId, gu.GeneralUpdateTypeId, gu.ExtraPB, gu.ExtraJson, gu.CreatedMs)
	if err != nil {
		return err
	}

	// set existence
	gu._exists = true

	OnGeneralUpdate_AfterInsert(gu)

	return nil
}

// Insert inserts the GeneralUpdate to the database.
func (gu *GeneralUpdate) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.general_update (` +
		`Id, ToUserId, TargetId, GeneralUpdateTypeId, ExtraPB, ExtraJson, CreatedMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gu.Id, gu.ToUserId, gu.TargetId, gu.GeneralUpdateTypeId, gu.ExtraPB, gu.ExtraJson, gu.CreatedMs)
	_, err = db.Exec(sqlstr, gu.Id, gu.ToUserId, gu.TargetId, gu.GeneralUpdateTypeId, gu.ExtraPB, gu.ExtraJson, gu.CreatedMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	gu._exists = true

	OnGeneralUpdate_AfterInsert(gu)

	return nil
}

// Update updates the GeneralUpdate in the database.
func (gu *GeneralUpdate) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.general_update SET ` +
		`ToUserId = ?, TargetId = ?, GeneralUpdateTypeId = ?, ExtraPB = ?, ExtraJson = ?, CreatedMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, gu.ToUserId, gu.TargetId, gu.GeneralUpdateTypeId, gu.ExtraPB, gu.ExtraJson, gu.CreatedMs, gu.Id)
	_, err = db.Exec(sqlstr, gu.ToUserId, gu.TargetId, gu.GeneralUpdateTypeId, gu.ExtraPB, gu.ExtraJson, gu.CreatedMs, gu.Id)

	XOLogErr(err)
	OnGeneralUpdate_AfterUpdate(gu)

	return err
}

// Save saves the GeneralUpdate to the database.
func (gu *GeneralUpdate) Save(db XODB) error {
	if gu.Exists() {
		return gu.Update(db)
	}

	return gu.Replace(db)
}

// Delete deletes the GeneralUpdate from the database.
func (gu *GeneralUpdate) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gu._exists {
		return nil
	}

	// if deleted, bail
	if gu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.general_update WHERE Id = ?`

	// run query
	XOLog(sqlstr, gu.Id)
	_, err = db.Exec(sqlstr, gu.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	gu._deleted = true

	OnGeneralUpdate_AfterDelete(gu)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __GeneralUpdate_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __GeneralUpdate_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __GeneralUpdate_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewGeneralUpdate_Deleter() *__GeneralUpdate_Deleter {
	d := __GeneralUpdate_Deleter{whereSep: " AND "}
	return &d
}

func NewGeneralUpdate_Updater() *__GeneralUpdate_Updater {
	u := __GeneralUpdate_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewGeneralUpdate_Selector() *__GeneralUpdate_Selector {
	u := __GeneralUpdate_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__GeneralUpdate_Deleter) Or() *__GeneralUpdate_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__GeneralUpdate_Deleter) Id_In(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) Id_Ins(ins ...int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) Id_NotIn(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Deleter) Id_Eq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) Id_NotEq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) Id_LT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) Id_LE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) Id_GT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) Id_GE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Deleter) ToUserId_In(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) ToUserId_Ins(ins ...int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) ToUserId_NotIn(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Deleter) ToUserId_Eq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) ToUserId_NotEq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) ToUserId_LT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) ToUserId_LE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) ToUserId_GT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) ToUserId_GE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Deleter) TargetId_In(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) TargetId_Ins(ins ...int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) TargetId_NotIn(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Deleter) TargetId_Eq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) TargetId_NotEq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) TargetId_LT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) TargetId_LE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) TargetId_GT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) TargetId_GE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Deleter) GeneralUpdateTypeId_In(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) GeneralUpdateTypeId_Ins(ins ...int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) GeneralUpdateTypeId_NotIn(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Deleter) GeneralUpdateTypeId_Eq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) GeneralUpdateTypeId_NotEq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) GeneralUpdateTypeId_LT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) GeneralUpdateTypeId_LE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) GeneralUpdateTypeId_GT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) GeneralUpdateTypeId_GE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Deleter) CreatedMs_In(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) CreatedMs_Ins(ins ...int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) CreatedMs_NotIn(ins []int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Deleter) CreatedMs_Eq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) CreatedMs_NotEq(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) CreatedMs_LT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) CreatedMs_LE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) CreatedMs_GT(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) CreatedMs_GE(val int) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__GeneralUpdate_Updater) Or() *__GeneralUpdate_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__GeneralUpdate_Updater) Id_In(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) Id_Ins(ins ...int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) Id_NotIn(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Updater) Id_Eq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) Id_NotEq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) Id_LT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) Id_LE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) Id_GT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) Id_GE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Updater) ToUserId_In(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) ToUserId_Ins(ins ...int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) ToUserId_NotIn(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Updater) ToUserId_Eq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) ToUserId_NotEq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) ToUserId_LT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) ToUserId_LE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) ToUserId_GT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) ToUserId_GE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Updater) TargetId_In(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) TargetId_Ins(ins ...int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) TargetId_NotIn(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Updater) TargetId_Eq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) TargetId_NotEq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) TargetId_LT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) TargetId_LE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) TargetId_GT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) TargetId_GE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Updater) GeneralUpdateTypeId_In(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) GeneralUpdateTypeId_Ins(ins ...int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) GeneralUpdateTypeId_NotIn(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Updater) GeneralUpdateTypeId_Eq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) GeneralUpdateTypeId_NotEq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) GeneralUpdateTypeId_LT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) GeneralUpdateTypeId_LE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) GeneralUpdateTypeId_GT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) GeneralUpdateTypeId_GE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Updater) CreatedMs_In(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) CreatedMs_Ins(ins ...int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) CreatedMs_NotIn(ins []int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Updater) CreatedMs_Eq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) CreatedMs_NotEq(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) CreatedMs_LT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) CreatedMs_LE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) CreatedMs_GT(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) CreatedMs_GE(val int) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__GeneralUpdate_Selector) Or() *__GeneralUpdate_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__GeneralUpdate_Selector) Id_In(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) Id_Ins(ins ...int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) Id_NotIn(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Selector) Id_Eq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) Id_NotEq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) Id_LT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) Id_LE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) Id_GT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) Id_GE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Selector) ToUserId_In(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) ToUserId_Ins(ins ...int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) ToUserId_NotIn(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Selector) ToUserId_Eq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) ToUserId_NotEq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) ToUserId_LT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) ToUserId_LE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) ToUserId_GT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) ToUserId_GE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Selector) TargetId_In(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) TargetId_Ins(ins ...int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) TargetId_NotIn(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Selector) TargetId_Eq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) TargetId_NotEq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) TargetId_LT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) TargetId_LE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) TargetId_GT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) TargetId_GE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Selector) GeneralUpdateTypeId_In(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) GeneralUpdateTypeId_Ins(ins ...int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) GeneralUpdateTypeId_NotIn(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Selector) GeneralUpdateTypeId_Eq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) GeneralUpdateTypeId_NotEq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) GeneralUpdateTypeId_LT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) GeneralUpdateTypeId_LE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) GeneralUpdateTypeId_GT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) GeneralUpdateTypeId_GE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GeneralUpdateTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GeneralUpdate_Selector) CreatedMs_In(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) CreatedMs_Ins(ins ...int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) CreatedMs_NotIn(ins []int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Selector) CreatedMs_Eq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) CreatedMs_NotEq(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) CreatedMs_LT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) CreatedMs_LE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) CreatedMs_GT(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) CreatedMs_GE(val int) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__GeneralUpdate_Deleter) ExtraJson_In(ins []string) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Deleter) ExtraJson_NotIn(ins []string) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__GeneralUpdate_Deleter) ExtraJson_Like(val string) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Deleter) ExtraJson_Eq(val string) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Deleter) ExtraJson_NotEq(val string) *__GeneralUpdate_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__GeneralUpdate_Updater) ExtraJson_In(ins []string) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Updater) ExtraJson_NotIn(ins []string) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__GeneralUpdate_Updater) ExtraJson_Like(val string) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Updater) ExtraJson_Eq(val string) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Updater) ExtraJson_NotEq(val string) *__GeneralUpdate_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__GeneralUpdate_Selector) ExtraJson_In(ins []string) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GeneralUpdate_Selector) ExtraJson_NotIn(ins []string) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__GeneralUpdate_Selector) ExtraJson_Like(val string) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GeneralUpdate_Selector) ExtraJson_Eq(val string) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GeneralUpdate_Selector) ExtraJson_NotEq(val string) *__GeneralUpdate_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__GeneralUpdate_Updater) Id(newVal int) *__GeneralUpdate_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__GeneralUpdate_Updater) Id_Increment(count int) *__GeneralUpdate_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GeneralUpdate_Updater) ToUserId(newVal int) *__GeneralUpdate_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__GeneralUpdate_Updater) ToUserId_Increment(count int) *__GeneralUpdate_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GeneralUpdate_Updater) TargetId(newVal int) *__GeneralUpdate_Updater {
	u.updates[" TargetId = ? "] = newVal
	return u
}

func (u *__GeneralUpdate_Updater) TargetId_Increment(count int) *__GeneralUpdate_Updater {
	if count > 0 {
		u.updates[" TargetId = TargetId+? "] = count
	}

	if count < 0 {
		u.updates[" TargetId = TargetId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GeneralUpdate_Updater) GeneralUpdateTypeId(newVal int) *__GeneralUpdate_Updater {
	u.updates[" GeneralUpdateTypeId = ? "] = newVal
	return u
}

func (u *__GeneralUpdate_Updater) GeneralUpdateTypeId_Increment(count int) *__GeneralUpdate_Updater {
	if count > 0 {
		u.updates[" GeneralUpdateTypeId = GeneralUpdateTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" GeneralUpdateTypeId = GeneralUpdateTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

//ints

//string
func (u *__GeneralUpdate_Updater) ExtraJson(newVal string) *__GeneralUpdate_Updater {
	u.updates[" ExtraJson = ? "] = newVal
	return u
}

//ints

func (u *__GeneralUpdate_Updater) CreatedMs(newVal int) *__GeneralUpdate_Updater {
	u.updates[" CreatedMs = ? "] = newVal
	return u
}

func (u *__GeneralUpdate_Updater) CreatedMs_Increment(count int) *__GeneralUpdate_Updater {
	if count > 0 {
		u.updates[" CreatedMs = CreatedMs+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedMs = CreatedMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__GeneralUpdate_Selector) OrderBy_Id_Desc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_Id_Asc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__GeneralUpdate_Selector) Select_Id() *__GeneralUpdate_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_ToUserId_Desc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_ToUserId_Asc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__GeneralUpdate_Selector) Select_ToUserId() *__GeneralUpdate_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_TargetId_Desc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY TargetId DESC "
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_TargetId_Asc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY TargetId ASC "
	return u
}

func (u *__GeneralUpdate_Selector) Select_TargetId() *__GeneralUpdate_Selector {
	u.selectCol = "TargetId"
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_GeneralUpdateTypeId_Desc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY GeneralUpdateTypeId DESC "
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_GeneralUpdateTypeId_Asc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY GeneralUpdateTypeId ASC "
	return u
}

func (u *__GeneralUpdate_Selector) Select_GeneralUpdateTypeId() *__GeneralUpdate_Selector {
	u.selectCol = "GeneralUpdateTypeId"
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_ExtraPB_Desc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY ExtraPB DESC "
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_ExtraPB_Asc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY ExtraPB ASC "
	return u
}

func (u *__GeneralUpdate_Selector) Select_ExtraPB() *__GeneralUpdate_Selector {
	u.selectCol = "ExtraPB"
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_ExtraJson_Desc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY ExtraJson DESC "
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_ExtraJson_Asc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY ExtraJson ASC "
	return u
}

func (u *__GeneralUpdate_Selector) Select_ExtraJson() *__GeneralUpdate_Selector {
	u.selectCol = "ExtraJson"
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_CreatedMs_Desc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY CreatedMs DESC "
	return u
}

func (u *__GeneralUpdate_Selector) OrderBy_CreatedMs_Asc() *__GeneralUpdate_Selector {
	u.orderBy = " ORDER BY CreatedMs ASC "
	return u
}

func (u *__GeneralUpdate_Selector) Select_CreatedMs() *__GeneralUpdate_Selector {
	u.selectCol = "CreatedMs"
	return u
}

func (u *__GeneralUpdate_Selector) Limit(num int) *__GeneralUpdate_Selector {
	u.limit = num
	return u
}

func (u *__GeneralUpdate_Selector) Offset(num int) *__GeneralUpdate_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__GeneralUpdate_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.general_update"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__GeneralUpdate_Selector) GetRow(db *sqlx.DB) (*GeneralUpdate, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &GeneralUpdate{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnGeneralUpdate_LoadOne(row)

	return row, nil
}

func (u *__GeneralUpdate_Selector) GetRows(db *sqlx.DB) ([]*GeneralUpdate, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*GeneralUpdate
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGeneralUpdate_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__GeneralUpdate_Selector) GetRows2(db *sqlx.DB) ([]GeneralUpdate, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*GeneralUpdate
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGeneralUpdate_LoadMany(rows)

	rows2 := make([]GeneralUpdate, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__GeneralUpdate_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__GeneralUpdate_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__GeneralUpdate_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__GeneralUpdate_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__GeneralUpdate_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.general_update SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__GeneralUpdate_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.general_update WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  GeneralUpdate ////////////////
func MassInsert_GeneralUpdate(rows []GeneralUpdate, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.general_update (" +
		"ToUserId, TargetId, GeneralUpdateTypeId, ExtraPB, ExtraJson, CreatedMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.TargetId)
		vals = append(vals, row.GeneralUpdateTypeId)
		vals = append(vals, row.ExtraPB)
		vals = append(vals, row.ExtraJson)
		vals = append(vals, row.CreatedMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_GeneralUpdate(rows []GeneralUpdate, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.general_update (" +
		"ToUserId, TargetId, GeneralUpdateTypeId, ExtraPB, ExtraJson, CreatedMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.TargetId)
		vals = append(vals, row.GeneralUpdateTypeId)
		vals = append(vals, row.ExtraPB)
		vals = append(vals, row.ExtraJson)
		vals = append(vals, row.CreatedMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

// GeneralUpdateById retrieves a row from 'ms.general_update' as a GeneralUpdate.
//
// Generated from index 'general_update_Id_pkey'.
func GeneralUpdateById(db XODB, id int) (*GeneralUpdate, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, TargetId, GeneralUpdateTypeId, ExtraPB, ExtraJson, CreatedMs ` +
		`FROM ms.general_update ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	gu := GeneralUpdate{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&gu.Id, &gu.ToUserId, &gu.TargetId, &gu.GeneralUpdateTypeId, &gu.ExtraPB, &gu.ExtraJson, &gu.CreatedMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnGeneralUpdate_LoadOne(&gu)

	return &gu, nil
}
