// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// PushMessage represents a row from 'ms.push_message'.

// Manualy copy this to project
type PushMessage__ struct {
	PushMessageId int `json:"PushMessageId"` // PushMessageId -
	ToUserId      int `json:"ToUserId"`      // ToUserId -
	ToDeviceId    int `json:"ToDeviceId"`    // ToDeviceId -
	MessageId     int `json:"MessageId"`     // MessageId -
	RoomTypeEnum  int `json:"RoomTypeEnum"`  // RoomTypeEnum -
	CreatedMs     int `json:"CreatedMs"`     // CreatedMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PushMessage exists in the database.
func (pm *PushMessage) Exists() bool {
	return pm._exists
}

// Deleted provides information if the PushMessage has been deleted from the database.
func (pm *PushMessage) Deleted() bool {
	return pm._deleted
}

// Insert inserts the PushMessage to the database.
func (pm *PushMessage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.push_message (` +
		`ToUserId, ToDeviceId, MessageId, RoomTypeEnum, CreatedMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pm.ToUserId, pm.ToDeviceId, pm.MessageId, pm.RoomTypeEnum, pm.CreatedMs)
	res, err := db.Exec(sqlstr, pm.ToUserId, pm.ToDeviceId, pm.MessageId, pm.RoomTypeEnum, pm.CreatedMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	pm.PushMessageId = int(id)
	pm._exists = true

	OnPushMessage_AfterInsert(pm)

	return nil
}

// Insert inserts the PushMessage to the database.
func (pm *PushMessage) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.push_message (` +
		`ToUserId, ToDeviceId, MessageId, RoomTypeEnum, CreatedMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pm.ToUserId, pm.ToDeviceId, pm.MessageId, pm.RoomTypeEnum, pm.CreatedMs)
	res, err := db.Exec(sqlstr, pm.ToUserId, pm.ToDeviceId, pm.MessageId, pm.RoomTypeEnum, pm.CreatedMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	pm.PushMessageId = int(id)
	pm._exists = true

	OnPushMessage_AfterInsert(pm)

	return nil
}

// Update updates the PushMessage in the database.
func (pm *PushMessage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.push_message SET ` +
		`ToUserId = ?, ToDeviceId = ?, MessageId = ?, RoomTypeEnum = ?, CreatedMs = ?` +
		` WHERE PushMessageId = ?`

	// run query
	XOLog(sqlstr, pm.ToUserId, pm.ToDeviceId, pm.MessageId, pm.RoomTypeEnum, pm.CreatedMs, pm.PushMessageId)
	_, err = db.Exec(sqlstr, pm.ToUserId, pm.ToDeviceId, pm.MessageId, pm.RoomTypeEnum, pm.CreatedMs, pm.PushMessageId)

	XOLogErr(err)
	OnPushMessage_AfterUpdate(pm)

	return err
}

// Save saves the PushMessage to the database.
func (pm *PushMessage) Save(db XODB) error {
	if pm.Exists() {
		return pm.Update(db)
	}

	return pm.Replace(db)
}

// Delete deletes the PushMessage from the database.
func (pm *PushMessage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return nil
	}

	// if deleted, bail
	if pm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.push_message WHERE PushMessageId = ?`

	// run query
	XOLog(sqlstr, pm.PushMessageId)
	_, err = db.Exec(sqlstr, pm.PushMessageId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	pm._deleted = true

	OnPushMessage_AfterDelete(pm)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __PushMessage_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __PushMessage_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __PushMessage_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPushMessage_Deleter() *__PushMessage_Deleter {
	d := __PushMessage_Deleter{whereSep: " AND "}
	return &d
}

func NewPushMessage_Updater() *__PushMessage_Updater {
	u := __PushMessage_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPushMessage_Selector() *__PushMessage_Selector {
	u := __PushMessage_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__PushMessage_Deleter) Or() *__PushMessage_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PushMessage_Deleter) PushMessageId_In(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) PushMessageId_Ins(ins ...int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) PushMessageId_NotIn(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushMessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Deleter) PushMessageId_Eq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) PushMessageId_NotEq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) PushMessageId_LT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) PushMessageId_LE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) PushMessageId_GT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) PushMessageId_GE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Deleter) ToUserId_In(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) ToUserId_Ins(ins ...int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) ToUserId_NotIn(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Deleter) ToUserId_Eq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToUserId_NotEq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToUserId_LT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToUserId_LE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToUserId_GT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToUserId_GE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Deleter) ToDeviceId_In(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToDeviceId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) ToDeviceId_Ins(ins ...int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToDeviceId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) ToDeviceId_NotIn(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToDeviceId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Deleter) ToDeviceId_Eq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToDeviceId_NotEq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToDeviceId_LT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToDeviceId_LE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToDeviceId_GT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) ToDeviceId_GE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Deleter) MessageId_In(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) MessageId_Ins(ins ...int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) MessageId_NotIn(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Deleter) MessageId_Eq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) MessageId_NotEq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) MessageId_LT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) MessageId_LE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) MessageId_GT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) MessageId_GE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Deleter) RoomTypeEnum_In(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) RoomTypeEnum_Ins(ins ...int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) RoomTypeEnum_NotIn(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Deleter) RoomTypeEnum_Eq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) RoomTypeEnum_NotEq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) RoomTypeEnum_LT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) RoomTypeEnum_LE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) RoomTypeEnum_GT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) RoomTypeEnum_GE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Deleter) CreatedMs_In(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) CreatedMs_Ins(ins ...int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Deleter) CreatedMs_NotIn(ins []int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Deleter) CreatedMs_Eq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) CreatedMs_NotEq(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) CreatedMs_LT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) CreatedMs_LE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) CreatedMs_GT(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Deleter) CreatedMs_GE(val int) *__PushMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PushMessage_Updater) Or() *__PushMessage_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PushMessage_Updater) PushMessageId_In(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) PushMessageId_Ins(ins ...int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) PushMessageId_NotIn(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushMessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Updater) PushMessageId_Eq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) PushMessageId_NotEq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) PushMessageId_LT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) PushMessageId_LE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) PushMessageId_GT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) PushMessageId_GE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Updater) ToUserId_In(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) ToUserId_Ins(ins ...int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) ToUserId_NotIn(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Updater) ToUserId_Eq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToUserId_NotEq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToUserId_LT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToUserId_LE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToUserId_GT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToUserId_GE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Updater) ToDeviceId_In(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToDeviceId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) ToDeviceId_Ins(ins ...int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToDeviceId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) ToDeviceId_NotIn(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToDeviceId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Updater) ToDeviceId_Eq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToDeviceId_NotEq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToDeviceId_LT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToDeviceId_LE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToDeviceId_GT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) ToDeviceId_GE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Updater) MessageId_In(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) MessageId_Ins(ins ...int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) MessageId_NotIn(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Updater) MessageId_Eq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) MessageId_NotEq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) MessageId_LT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) MessageId_LE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) MessageId_GT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) MessageId_GE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Updater) RoomTypeEnum_In(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) RoomTypeEnum_Ins(ins ...int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) RoomTypeEnum_NotIn(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Updater) RoomTypeEnum_Eq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) RoomTypeEnum_NotEq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) RoomTypeEnum_LT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) RoomTypeEnum_LE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) RoomTypeEnum_GT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) RoomTypeEnum_GE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Updater) CreatedMs_In(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) CreatedMs_Ins(ins ...int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Updater) CreatedMs_NotIn(ins []int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Updater) CreatedMs_Eq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) CreatedMs_NotEq(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) CreatedMs_LT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) CreatedMs_LE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) CreatedMs_GT(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Updater) CreatedMs_GE(val int) *__PushMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PushMessage_Selector) Or() *__PushMessage_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PushMessage_Selector) PushMessageId_In(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) PushMessageId_Ins(ins ...int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) PushMessageId_NotIn(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushMessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Selector) PushMessageId_Eq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) PushMessageId_NotEq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) PushMessageId_LT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) PushMessageId_LE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) PushMessageId_GT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) PushMessageId_GE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushMessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Selector) ToUserId_In(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) ToUserId_Ins(ins ...int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) ToUserId_NotIn(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Selector) ToUserId_Eq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToUserId_NotEq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToUserId_LT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToUserId_LE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToUserId_GT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToUserId_GE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Selector) ToDeviceId_In(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToDeviceId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) ToDeviceId_Ins(ins ...int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToDeviceId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) ToDeviceId_NotIn(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToDeviceId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Selector) ToDeviceId_Eq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToDeviceId_NotEq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToDeviceId_LT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToDeviceId_LE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToDeviceId_GT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) ToDeviceId_GE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToDeviceId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Selector) MessageId_In(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) MessageId_Ins(ins ...int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) MessageId_NotIn(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Selector) MessageId_Eq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) MessageId_NotEq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) MessageId_LT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) MessageId_LE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) MessageId_GT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) MessageId_GE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Selector) RoomTypeEnum_In(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) RoomTypeEnum_Ins(ins ...int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) RoomTypeEnum_NotIn(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Selector) RoomTypeEnum_Eq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) RoomTypeEnum_NotEq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) RoomTypeEnum_LT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) RoomTypeEnum_LE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) RoomTypeEnum_GT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) RoomTypeEnum_GE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushMessage_Selector) CreatedMs_In(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) CreatedMs_Ins(ins ...int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushMessage_Selector) CreatedMs_NotIn(ins []int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushMessage_Selector) CreatedMs_Eq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) CreatedMs_NotEq(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) CreatedMs_LT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) CreatedMs_LE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) CreatedMs_GT(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushMessage_Selector) CreatedMs_GE(val int) *__PushMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PushMessage_Updater) PushMessageId(newVal int) *__PushMessage_Updater {
	u.updates[" PushMessageId = ? "] = newVal
	return u
}

func (u *__PushMessage_Updater) PushMessageId_Increment(count int) *__PushMessage_Updater {
	if count > 0 {
		u.updates[" PushMessageId = PushMessageId+? "] = count
	}

	if count < 0 {
		u.updates[" PushMessageId = PushMessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushMessage_Updater) ToUserId(newVal int) *__PushMessage_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__PushMessage_Updater) ToUserId_Increment(count int) *__PushMessage_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushMessage_Updater) ToDeviceId(newVal int) *__PushMessage_Updater {
	u.updates[" ToDeviceId = ? "] = newVal
	return u
}

func (u *__PushMessage_Updater) ToDeviceId_Increment(count int) *__PushMessage_Updater {
	if count > 0 {
		u.updates[" ToDeviceId = ToDeviceId+? "] = count
	}

	if count < 0 {
		u.updates[" ToDeviceId = ToDeviceId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushMessage_Updater) MessageId(newVal int) *__PushMessage_Updater {
	u.updates[" MessageId = ? "] = newVal
	return u
}

func (u *__PushMessage_Updater) MessageId_Increment(count int) *__PushMessage_Updater {
	if count > 0 {
		u.updates[" MessageId = MessageId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageId = MessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushMessage_Updater) RoomTypeEnum(newVal int) *__PushMessage_Updater {
	u.updates[" RoomTypeEnum = ? "] = newVal
	return u
}

func (u *__PushMessage_Updater) RoomTypeEnum_Increment(count int) *__PushMessage_Updater {
	if count > 0 {
		u.updates[" RoomTypeEnum = RoomTypeEnum+? "] = count
	}

	if count < 0 {
		u.updates[" RoomTypeEnum = RoomTypeEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushMessage_Updater) CreatedMs(newVal int) *__PushMessage_Updater {
	u.updates[" CreatedMs = ? "] = newVal
	return u
}

func (u *__PushMessage_Updater) CreatedMs_Increment(count int) *__PushMessage_Updater {
	if count > 0 {
		u.updates[" CreatedMs = CreatedMs+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedMs = CreatedMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PushMessage_Selector) OrderBy_PushMessageId_Desc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY PushMessageId DESC "
	return u
}

func (u *__PushMessage_Selector) OrderBy_PushMessageId_Asc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY PushMessageId ASC "
	return u
}

func (u *__PushMessage_Selector) Select_PushMessageId() *__PushMessage_Selector {
	u.selectCol = "PushMessageId"
	return u
}

func (u *__PushMessage_Selector) OrderBy_ToUserId_Desc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__PushMessage_Selector) OrderBy_ToUserId_Asc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__PushMessage_Selector) Select_ToUserId() *__PushMessage_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__PushMessage_Selector) OrderBy_ToDeviceId_Desc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY ToDeviceId DESC "
	return u
}

func (u *__PushMessage_Selector) OrderBy_ToDeviceId_Asc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY ToDeviceId ASC "
	return u
}

func (u *__PushMessage_Selector) Select_ToDeviceId() *__PushMessage_Selector {
	u.selectCol = "ToDeviceId"
	return u
}

func (u *__PushMessage_Selector) OrderBy_MessageId_Desc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__PushMessage_Selector) OrderBy_MessageId_Asc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__PushMessage_Selector) Select_MessageId() *__PushMessage_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__PushMessage_Selector) OrderBy_RoomTypeEnum_Desc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY RoomTypeEnum DESC "
	return u
}

func (u *__PushMessage_Selector) OrderBy_RoomTypeEnum_Asc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY RoomTypeEnum ASC "
	return u
}

func (u *__PushMessage_Selector) Select_RoomTypeEnum() *__PushMessage_Selector {
	u.selectCol = "RoomTypeEnum"
	return u
}

func (u *__PushMessage_Selector) OrderBy_CreatedMs_Desc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY CreatedMs DESC "
	return u
}

func (u *__PushMessage_Selector) OrderBy_CreatedMs_Asc() *__PushMessage_Selector {
	u.orderBy = " ORDER BY CreatedMs ASC "
	return u
}

func (u *__PushMessage_Selector) Select_CreatedMs() *__PushMessage_Selector {
	u.selectCol = "CreatedMs"
	return u
}

func (u *__PushMessage_Selector) Limit(num int) *__PushMessage_Selector {
	u.limit = num
	return u
}

func (u *__PushMessage_Selector) Offset(num int) *__PushMessage_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PushMessage_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.push_message"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PushMessage_Selector) GetRow(db *sqlx.DB) (*PushMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &PushMessage{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnPushMessage_LoadOne(row)

	return row, nil
}

func (u *__PushMessage_Selector) GetRows(db *sqlx.DB) ([]*PushMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*PushMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPushMessage_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__PushMessage_Selector) GetRows2(db *sqlx.DB) ([]PushMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*PushMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPushMessage_LoadMany(rows)

	rows2 := make([]PushMessage, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__PushMessage_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__PushMessage_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__PushMessage_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__PushMessage_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PushMessage_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.push_message SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__PushMessage_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.push_message WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PushMessage ////////////////
func MassInsert_PushMessage(rows []PushMessage, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.push_message (" +
		"ToUserId, ToDeviceId, MessageId, RoomTypeEnum, CreatedMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.ToDeviceId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.RoomTypeEnum)
		vals = append(vals, row.CreatedMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_PushMessage(rows []PushMessage, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.push_message (" +
		"ToUserId, ToDeviceId, MessageId, RoomTypeEnum, CreatedMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.ToDeviceId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.RoomTypeEnum)
		vals = append(vals, row.CreatedMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// PushMessageByPushMessageId retrieves a row from 'ms.push_message' as a PushMessage.
//
// Generated from index 'push_message_PushMessageId_pkey'.
func PushMessageByPushMessageId(db XODB, pushMessageId int) (*PushMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`PushMessageId, ToUserId, ToDeviceId, MessageId, RoomTypeEnum, CreatedMs ` +
		`FROM ms.push_message ` +
		`WHERE PushMessageId = ?`

	// run query
	XOLog(sqlstr, pushMessageId)
	pm := PushMessage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, pushMessageId).Scan(&pm.PushMessageId, &pm.ToUserId, &pm.ToDeviceId, &pm.MessageId, &pm.RoomTypeEnum, &pm.CreatedMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnPushMessage_LoadOne(&pm)

	return &pm, nil
}
