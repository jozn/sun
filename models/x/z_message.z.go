// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// Message represents a row from 'ms.messages'.

// Manualy copy this to project
type Message__ struct {
	Id            int    `json:"Id"`            // Id -
	UserId        int    `json:"UserId"`        // UserId -
	MessageKey    string `json:"MessageKey"`    // MessageKey -
	RoomKey       string `json:"RoomKey"`       // RoomKey -
	MessageType   int    `json:"MessageType"`   // MessageType -
	RoomType      int    `json:"RoomType"`      // RoomType -
	DataPB        []byte `json:"DataPB"`        // DataPB -
	DataJson      string `json:"DataJson"`      // DataJson -
	CreatedTimeMs int    `json:"CreatedTimeMs"` // CreatedTimeMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Message exists in the database.
func (m *Message) Exists() bool {
	return m._exists
}

// Deleted provides information if the Message has been deleted from the database.
func (m *Message) Deleted() bool {
	return m._deleted
}

// Insert inserts the Message to the database.
func (m *Message) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.messages (` +
		`UserId, MessageKey, RoomKey, MessageType, RoomType, DataPB, DataJson, CreatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.UserId, m.MessageKey, m.RoomKey, m.MessageType, m.RoomType, m.DataPB, m.DataJson, m.CreatedTimeMs)
	res, err := db.Exec(sqlstr, m.UserId, m.MessageKey, m.RoomKey, m.MessageType, m.RoomType, m.DataPB, m.DataJson, m.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	m.Id = int(id)
	m._exists = true

	OnMessage_AfterInsert(m)

	return nil
}

// Insert inserts the Message to the database.
func (m *Message) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.messages (` +
		`UserId, MessageKey, RoomKey, MessageType, RoomType, DataPB, DataJson, CreatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.UserId, m.MessageKey, m.RoomKey, m.MessageType, m.RoomType, m.DataPB, m.DataJson, m.CreatedTimeMs)
	res, err := db.Exec(sqlstr, m.UserId, m.MessageKey, m.RoomKey, m.MessageType, m.RoomType, m.DataPB, m.DataJson, m.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	m.Id = int(id)
	m._exists = true

	OnMessage_AfterInsert(m)

	return nil
}

// Update updates the Message in the database.
func (m *Message) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.messages SET ` +
		`UserId = ?, MessageKey = ?, RoomKey = ?, MessageType = ?, RoomType = ?, DataPB = ?, DataJson = ?, CreatedTimeMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.UserId, m.MessageKey, m.RoomKey, m.MessageType, m.RoomType, m.DataPB, m.DataJson, m.CreatedTimeMs, m.Id)
	_, err = db.Exec(sqlstr, m.UserId, m.MessageKey, m.RoomKey, m.MessageType, m.RoomType, m.DataPB, m.DataJson, m.CreatedTimeMs, m.Id)

	XOLogErr(err)
	OnMessage_AfterUpdate(m)

	return err
}

// Save saves the Message to the database.
func (m *Message) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Replace(db)
}

// Delete deletes the Message from the database.
func (m *Message) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.messages WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.Id)
	_, err = db.Exec(sqlstr, m.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	m._deleted = true

	OnMessage_AfterDelete(m)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Message_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Message_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Message_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMessage_Deleter() *__Message_Deleter {
	d := __Message_Deleter{whereSep: " AND "}
	return &d
}

func NewMessage_Updater() *__Message_Updater {
	u := __Message_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMessage_Selector() *__Message_Selector {
	u := __Message_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Message_Deleter) Or() *__Message_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Message_Deleter) Id_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) Id_Ins(ins ...int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) Id_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) Id_Eq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_NotEq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) UserId_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) UserId_Ins(ins ...int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) UserId_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) UserId_Eq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) UserId_NotEq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) UserId_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) UserId_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) UserId_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) UserId_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) MessageType_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) MessageType_Ins(ins ...int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) MessageType_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) MessageType_Eq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) MessageType_NotEq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) MessageType_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) MessageType_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) MessageType_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) MessageType_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) RoomType_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) RoomType_Ins(ins ...int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) RoomType_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) RoomType_Eq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) RoomType_NotEq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) RoomType_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) RoomType_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) RoomType_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) RoomType_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) CreatedTimeMs_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) CreatedTimeMs_Ins(ins ...int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) CreatedTimeMs_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) CreatedTimeMs_Eq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) CreatedTimeMs_NotEq(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) CreatedTimeMs_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) CreatedTimeMs_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) CreatedTimeMs_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) CreatedTimeMs_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Message_Updater) Or() *__Message_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Message_Updater) Id_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) Id_Ins(ins ...int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) Id_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) Id_Eq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_NotEq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) UserId_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) UserId_Ins(ins ...int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) UserId_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) UserId_Eq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) UserId_NotEq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) UserId_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) UserId_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) UserId_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) UserId_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) MessageType_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) MessageType_Ins(ins ...int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) MessageType_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) MessageType_Eq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) MessageType_NotEq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) MessageType_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) MessageType_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) MessageType_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) MessageType_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) RoomType_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) RoomType_Ins(ins ...int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) RoomType_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) RoomType_Eq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) RoomType_NotEq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) RoomType_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) RoomType_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) RoomType_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) RoomType_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) CreatedTimeMs_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) CreatedTimeMs_Ins(ins ...int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) CreatedTimeMs_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) CreatedTimeMs_Eq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) CreatedTimeMs_NotEq(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) CreatedTimeMs_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) CreatedTimeMs_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) CreatedTimeMs_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) CreatedTimeMs_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Message_Selector) Or() *__Message_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Message_Selector) Id_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) Id_Ins(ins ...int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) Id_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) Id_Eq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_NotEq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) UserId_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) UserId_Ins(ins ...int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) UserId_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) UserId_Eq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) UserId_NotEq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) UserId_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) UserId_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) UserId_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) UserId_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) MessageType_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) MessageType_Ins(ins ...int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) MessageType_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) MessageType_Eq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) MessageType_NotEq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) MessageType_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) MessageType_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) MessageType_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) MessageType_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) RoomType_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) RoomType_Ins(ins ...int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) RoomType_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) RoomType_Eq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) RoomType_NotEq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) RoomType_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) RoomType_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) RoomType_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) RoomType_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) CreatedTimeMs_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) CreatedTimeMs_Ins(ins ...int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) CreatedTimeMs_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) CreatedTimeMs_Eq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) CreatedTimeMs_NotEq(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) CreatedTimeMs_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) CreatedTimeMs_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) CreatedTimeMs_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) CreatedTimeMs_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Message_Deleter) MessageKey_In(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) MessageKey_NotIn(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Deleter) MessageKey_Like(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) MessageKey_Eq(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) MessageKey_NotEq(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) RoomKey_In(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) RoomKey_NotIn(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Deleter) RoomKey_Like(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) RoomKey_Eq(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) RoomKey_NotEq(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) DataJson_In(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) DataJson_NotIn(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Deleter) DataJson_Like(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) DataJson_Eq(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) DataJson_NotEq(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Message_Updater) MessageKey_In(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) MessageKey_NotIn(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Updater) MessageKey_Like(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) MessageKey_Eq(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) MessageKey_NotEq(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) RoomKey_In(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) RoomKey_NotIn(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Updater) RoomKey_Like(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) RoomKey_Eq(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) RoomKey_NotEq(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) DataJson_In(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) DataJson_NotIn(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Updater) DataJson_Like(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) DataJson_Eq(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) DataJson_NotEq(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Message_Selector) MessageKey_In(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) MessageKey_NotIn(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Selector) MessageKey_Like(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) MessageKey_Eq(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) MessageKey_NotEq(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) RoomKey_In(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) RoomKey_NotIn(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Selector) RoomKey_Like(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) RoomKey_Eq(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) RoomKey_NotEq(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) DataJson_In(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) DataJson_NotIn(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Selector) DataJson_Like(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) DataJson_Eq(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) DataJson_NotEq(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Message_Updater) Id(newVal int) *__Message_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Message_Updater) Id_Increment(count int) *__Message_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Message_Updater) UserId(newVal int) *__Message_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Message_Updater) UserId_Increment(count int) *__Message_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Message_Updater) MessageKey(newVal string) *__Message_Updater {
	u.updates[" MessageKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__Message_Updater) RoomKey(newVal string) *__Message_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__Message_Updater) MessageType(newVal int) *__Message_Updater {
	u.updates[" MessageType = ? "] = newVal
	return u
}

func (u *__Message_Updater) MessageType_Increment(count int) *__Message_Updater {
	if count > 0 {
		u.updates[" MessageType = MessageType+? "] = count
	}

	if count < 0 {
		u.updates[" MessageType = MessageType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Message_Updater) RoomType(newVal int) *__Message_Updater {
	u.updates[" RoomType = ? "] = newVal
	return u
}

func (u *__Message_Updater) RoomType_Increment(count int) *__Message_Updater {
	if count > 0 {
		u.updates[" RoomType = RoomType+? "] = count
	}

	if count < 0 {
		u.updates[" RoomType = RoomType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

//ints

//string
func (u *__Message_Updater) DataJson(newVal string) *__Message_Updater {
	u.updates[" DataJson = ? "] = newVal
	return u
}

//ints

func (u *__Message_Updater) CreatedTimeMs(newVal int) *__Message_Updater {
	u.updates[" CreatedTimeMs = ? "] = newVal
	return u
}

func (u *__Message_Updater) CreatedTimeMs_Increment(count int) *__Message_Updater {
	if count > 0 {
		u.updates[" CreatedTimeMs = CreatedTimeMs+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTimeMs = CreatedTimeMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Message_Selector) OrderBy_Id_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Message_Selector) OrderBy_Id_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Message_Selector) Select_Id() *__Message_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Message_Selector) OrderBy_UserId_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Message_Selector) OrderBy_UserId_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Message_Selector) Select_UserId() *__Message_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Message_Selector) OrderBy_MessageKey_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY MessageKey DESC "
	return u
}

func (u *__Message_Selector) OrderBy_MessageKey_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY MessageKey ASC "
	return u
}

func (u *__Message_Selector) Select_MessageKey() *__Message_Selector {
	u.selectCol = "MessageKey"
	return u
}

func (u *__Message_Selector) OrderBy_RoomKey_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__Message_Selector) OrderBy_RoomKey_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__Message_Selector) Select_RoomKey() *__Message_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__Message_Selector) OrderBy_MessageType_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY MessageType DESC "
	return u
}

func (u *__Message_Selector) OrderBy_MessageType_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY MessageType ASC "
	return u
}

func (u *__Message_Selector) Select_MessageType() *__Message_Selector {
	u.selectCol = "MessageType"
	return u
}

func (u *__Message_Selector) OrderBy_RoomType_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY RoomType DESC "
	return u
}

func (u *__Message_Selector) OrderBy_RoomType_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY RoomType ASC "
	return u
}

func (u *__Message_Selector) Select_RoomType() *__Message_Selector {
	u.selectCol = "RoomType"
	return u
}

func (u *__Message_Selector) OrderBy_DataPB_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY DataPB DESC "
	return u
}

func (u *__Message_Selector) OrderBy_DataPB_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY DataPB ASC "
	return u
}

func (u *__Message_Selector) Select_DataPB() *__Message_Selector {
	u.selectCol = "DataPB"
	return u
}

func (u *__Message_Selector) OrderBy_DataJson_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY DataJson DESC "
	return u
}

func (u *__Message_Selector) OrderBy_DataJson_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY DataJson ASC "
	return u
}

func (u *__Message_Selector) Select_DataJson() *__Message_Selector {
	u.selectCol = "DataJson"
	return u
}

func (u *__Message_Selector) OrderBy_CreatedTimeMs_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY CreatedTimeMs DESC "
	return u
}

func (u *__Message_Selector) OrderBy_CreatedTimeMs_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY CreatedTimeMs ASC "
	return u
}

func (u *__Message_Selector) Select_CreatedTimeMs() *__Message_Selector {
	u.selectCol = "CreatedTimeMs"
	return u
}

func (u *__Message_Selector) Limit(num int) *__Message_Selector {
	u.limit = num
	return u
}

func (u *__Message_Selector) Offset(num int) *__Message_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Message_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.messages"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Message_Selector) GetRow(db *sqlx.DB) (*Message, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Message{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnMessage_LoadOne(row)

	return row, nil
}

func (u *__Message_Selector) GetRows(db *sqlx.DB) ([]*Message, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Message
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMessage_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Message_Selector) GetRows2(db *sqlx.DB) ([]Message, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Message
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMessage_LoadMany(rows)

	rows2 := make([]Message, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Message_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__Message_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Message_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Message_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Message_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.messages SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__Message_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.messages WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Message ////////////////
func MassInsert_Message(rows []Message, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.messages (" +
		"UserId, MessageKey, RoomKey, MessageType, RoomType, DataPB, DataJson, CreatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.MessageType)
		vals = append(vals, row.RoomType)
		vals = append(vals, row.DataPB)
		vals = append(vals, row.DataJson)
		vals = append(vals, row.CreatedTimeMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_Message(rows []Message, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.messages (" +
		"UserId, MessageKey, RoomKey, MessageType, RoomType, DataPB, DataJson, CreatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.MessageType)
		vals = append(vals, row.RoomType)
		vals = append(vals, row.DataPB)
		vals = append(vals, row.DataJson)
		vals = append(vals, row.CreatedTimeMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

// MessagesByMessageKey retrieves a row from 'ms.messages' as a Message.
//
// Generated from index 'MessageKey'.
func MessagesByMessageKey(db XODB, messageKey string) ([]*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, MessageKey, RoomKey, MessageType, RoomType, DataPB, DataJson, CreatedTimeMs ` +
		`FROM ms.messages ` +
		`WHERE MessageKey = ?`

	// run query
	XOLog(sqlstr, messageKey)
	q, err := db.Query(sqlstr, messageKey)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Message{}
	for q.Next() {
		m := Message{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.Id, &m.UserId, &m.MessageKey, &m.RoomKey, &m.MessageType, &m.RoomType, &m.DataPB, &m.DataJson, &m.CreatedTimeMs)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &m)
	}

	OnMessage_LoadMany(res)

	return res, nil
}

// MessageById retrieves a row from 'ms.messages' as a Message.
//
// Generated from index 'messages_Id_pkey'.
func MessageById(db XODB, id int) (*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, MessageKey, RoomKey, MessageType, RoomType, DataPB, DataJson, CreatedTimeMs ` +
		`FROM ms.messages ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Message{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.Id, &m.UserId, &m.MessageKey, &m.RoomKey, &m.MessageType, &m.RoomType, &m.DataPB, &m.DataJson, &m.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnMessage_LoadOne(&m)

	return &m, nil
}
