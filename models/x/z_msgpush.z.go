// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// MsgPush represents a row from 'ms.msg_push'.

// Manualy copy this to project
type MsgPush__ struct {
	Id            int `json:"Id"`            // Id -
	ToUser        int `json:"ToUser"`        // ToUser -
	MessageId     int `json:"MessageId"`     // MessageId -
	CreatedTimeMs int `json:"CreatedTimeMs"` // CreatedTimeMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MsgPush exists in the database.
func (mp *MsgPush) Exists() bool {
	return mp._exists
}

// Deleted provides information if the MsgPush has been deleted from the database.
func (mp *MsgPush) Deleted() bool {
	return mp._deleted
}

// Insert inserts the MsgPush to the database.
func (mp *MsgPush) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.msg_push (` +
		`ToUser, MessageId, CreatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mp.ToUser, mp.MessageId, mp.CreatedTimeMs)
	res, err := db.Exec(sqlstr, mp.ToUser, mp.MessageId, mp.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	mp.Id = int(id)
	mp._exists = true

	OnMsgPush_AfterInsert(mp)

	return nil
}

// Insert inserts the MsgPush to the database.
func (mp *MsgPush) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.msg_push (` +
		`ToUser, MessageId, CreatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mp.ToUser, mp.MessageId, mp.CreatedTimeMs)
	res, err := db.Exec(sqlstr, mp.ToUser, mp.MessageId, mp.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	mp.Id = int(id)
	mp._exists = true

	OnMsgPush_AfterInsert(mp)

	return nil
}

// Update updates the MsgPush in the database.
func (mp *MsgPush) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.msg_push SET ` +
		`ToUser = ?, MessageId = ?, CreatedTimeMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, mp.ToUser, mp.MessageId, mp.CreatedTimeMs, mp.Id)
	_, err = db.Exec(sqlstr, mp.ToUser, mp.MessageId, mp.CreatedTimeMs, mp.Id)

	XOLogErr(err)
	OnMsgPush_AfterUpdate(mp)

	return err
}

// Save saves the MsgPush to the database.
func (mp *MsgPush) Save(db XODB) error {
	if mp.Exists() {
		return mp.Update(db)
	}

	return mp.Replace(db)
}

// Delete deletes the MsgPush from the database.
func (mp *MsgPush) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mp._exists {
		return nil
	}

	// if deleted, bail
	if mp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.msg_push WHERE Id = ?`

	// run query
	XOLog(sqlstr, mp.Id)
	_, err = db.Exec(sqlstr, mp.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	mp._deleted = true

	OnMsgPush_AfterDelete(mp)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MsgPush_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MsgPush_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MsgPush_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMsgPush_Deleter() *__MsgPush_Deleter {
	d := __MsgPush_Deleter{whereSep: " AND "}
	return &d
}

func NewMsgPush_Updater() *__MsgPush_Updater {
	u := __MsgPush_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMsgPush_Selector() *__MsgPush_Selector {
	u := __MsgPush_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MsgPush_Deleter) Or() *__MsgPush_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MsgPush_Deleter) Id_In(ins []int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Deleter) Id_Ins(ins ...int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Deleter) Id_NotIn(ins []int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Deleter) Id_Eq(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) Id_NotEq(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) Id_LT(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) Id_LE(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) Id_GT(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) Id_GE(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgPush_Deleter) ToUser_In(ins []int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUser IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Deleter) ToUser_Ins(ins ...int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUser IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Deleter) ToUser_NotIn(ins []int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUser NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Deleter) ToUser_Eq(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) ToUser_NotEq(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) ToUser_LT(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) ToUser_LE(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) ToUser_GT(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) ToUser_GE(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgPush_Deleter) MessageId_In(ins []int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Deleter) MessageId_Ins(ins ...int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Deleter) MessageId_NotIn(ins []int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Deleter) MessageId_Eq(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) MessageId_NotEq(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) MessageId_LT(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) MessageId_LE(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) MessageId_GT(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) MessageId_GE(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgPush_Deleter) CreatedTimeMs_In(ins []int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Deleter) CreatedTimeMs_Ins(ins ...int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Deleter) CreatedTimeMs_NotIn(ins []int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Deleter) CreatedTimeMs_Eq(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) CreatedTimeMs_NotEq(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) CreatedTimeMs_LT(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) CreatedTimeMs_LE(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) CreatedTimeMs_GT(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Deleter) CreatedTimeMs_GE(val int) *__MsgPush_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgPush_Updater) Or() *__MsgPush_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MsgPush_Updater) Id_In(ins []int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Updater) Id_Ins(ins ...int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Updater) Id_NotIn(ins []int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Updater) Id_Eq(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) Id_NotEq(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) Id_LT(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) Id_LE(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) Id_GT(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) Id_GE(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgPush_Updater) ToUser_In(ins []int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUser IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Updater) ToUser_Ins(ins ...int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUser IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Updater) ToUser_NotIn(ins []int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUser NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Updater) ToUser_Eq(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) ToUser_NotEq(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) ToUser_LT(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) ToUser_LE(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) ToUser_GT(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) ToUser_GE(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgPush_Updater) MessageId_In(ins []int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Updater) MessageId_Ins(ins ...int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Updater) MessageId_NotIn(ins []int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Updater) MessageId_Eq(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) MessageId_NotEq(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) MessageId_LT(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) MessageId_LE(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) MessageId_GT(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) MessageId_GE(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgPush_Updater) CreatedTimeMs_In(ins []int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Updater) CreatedTimeMs_Ins(ins ...int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Updater) CreatedTimeMs_NotIn(ins []int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Updater) CreatedTimeMs_Eq(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) CreatedTimeMs_NotEq(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) CreatedTimeMs_LT(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) CreatedTimeMs_LE(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) CreatedTimeMs_GT(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Updater) CreatedTimeMs_GE(val int) *__MsgPush_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgPush_Selector) Or() *__MsgPush_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MsgPush_Selector) Id_In(ins []int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Selector) Id_Ins(ins ...int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Selector) Id_NotIn(ins []int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Selector) Id_Eq(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) Id_NotEq(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) Id_LT(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) Id_LE(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) Id_GT(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) Id_GE(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgPush_Selector) ToUser_In(ins []int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUser IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Selector) ToUser_Ins(ins ...int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUser IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Selector) ToUser_NotIn(ins []int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUser NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Selector) ToUser_Eq(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) ToUser_NotEq(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) ToUser_LT(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) ToUser_LE(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) ToUser_GT(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) ToUser_GE(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUser >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgPush_Selector) MessageId_In(ins []int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Selector) MessageId_Ins(ins ...int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Selector) MessageId_NotIn(ins []int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Selector) MessageId_Eq(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) MessageId_NotEq(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) MessageId_LT(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) MessageId_LE(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) MessageId_GT(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) MessageId_GE(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgPush_Selector) CreatedTimeMs_In(ins []int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Selector) CreatedTimeMs_Ins(ins ...int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgPush_Selector) CreatedTimeMs_NotIn(ins []int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgPush_Selector) CreatedTimeMs_Eq(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) CreatedTimeMs_NotEq(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) CreatedTimeMs_LT(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) CreatedTimeMs_LE(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) CreatedTimeMs_GT(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgPush_Selector) CreatedTimeMs_GE(val int) *__MsgPush_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MsgPush_Updater) Id(newVal int) *__MsgPush_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__MsgPush_Updater) Id_Increment(count int) *__MsgPush_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgPush_Updater) ToUser(newVal int) *__MsgPush_Updater {
	u.updates[" ToUser = ? "] = newVal
	return u
}

func (u *__MsgPush_Updater) ToUser_Increment(count int) *__MsgPush_Updater {
	if count > 0 {
		u.updates[" ToUser = ToUser+? "] = count
	}

	if count < 0 {
		u.updates[" ToUser = ToUser-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgPush_Updater) MessageId(newVal int) *__MsgPush_Updater {
	u.updates[" MessageId = ? "] = newVal
	return u
}

func (u *__MsgPush_Updater) MessageId_Increment(count int) *__MsgPush_Updater {
	if count > 0 {
		u.updates[" MessageId = MessageId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageId = MessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgPush_Updater) CreatedTimeMs(newVal int) *__MsgPush_Updater {
	u.updates[" CreatedTimeMs = ? "] = newVal
	return u
}

func (u *__MsgPush_Updater) CreatedTimeMs_Increment(count int) *__MsgPush_Updater {
	if count > 0 {
		u.updates[" CreatedTimeMs = CreatedTimeMs+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTimeMs = CreatedTimeMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MsgPush_Selector) OrderBy_Id_Desc() *__MsgPush_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MsgPush_Selector) OrderBy_Id_Asc() *__MsgPush_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MsgPush_Selector) Select_Id() *__MsgPush_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MsgPush_Selector) OrderBy_ToUser_Desc() *__MsgPush_Selector {
	u.orderBy = " ORDER BY ToUser DESC "
	return u
}

func (u *__MsgPush_Selector) OrderBy_ToUser_Asc() *__MsgPush_Selector {
	u.orderBy = " ORDER BY ToUser ASC "
	return u
}

func (u *__MsgPush_Selector) Select_ToUser() *__MsgPush_Selector {
	u.selectCol = "ToUser"
	return u
}

func (u *__MsgPush_Selector) OrderBy_MessageId_Desc() *__MsgPush_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__MsgPush_Selector) OrderBy_MessageId_Asc() *__MsgPush_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__MsgPush_Selector) Select_MessageId() *__MsgPush_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__MsgPush_Selector) OrderBy_CreatedTimeMs_Desc() *__MsgPush_Selector {
	u.orderBy = " ORDER BY CreatedTimeMs DESC "
	return u
}

func (u *__MsgPush_Selector) OrderBy_CreatedTimeMs_Asc() *__MsgPush_Selector {
	u.orderBy = " ORDER BY CreatedTimeMs ASC "
	return u
}

func (u *__MsgPush_Selector) Select_CreatedTimeMs() *__MsgPush_Selector {
	u.selectCol = "CreatedTimeMs"
	return u
}

func (u *__MsgPush_Selector) Limit(num int) *__MsgPush_Selector {
	u.limit = num
	return u
}

func (u *__MsgPush_Selector) Offset(num int) *__MsgPush_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MsgPush_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.msg_push"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MsgPush_Selector) GetRow(db *sqlx.DB) (*MsgPush, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MsgPush{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnMsgPush_LoadOne(row)

	return row, nil
}

func (u *__MsgPush_Selector) GetRows(db *sqlx.DB) ([]*MsgPush, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MsgPush
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMsgPush_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__MsgPush_Selector) GetRows2(db *sqlx.DB) ([]MsgPush, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MsgPush
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMsgPush_LoadMany(rows)

	rows2 := make([]MsgPush, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__MsgPush_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__MsgPush_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MsgPush_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MsgPush_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MsgPush_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.msg_push SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__MsgPush_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.msg_push WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MsgPush ////////////////
func MassInsert_MsgPush(rows []MsgPush, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.msg_push (" +
		"ToUser, MessageId, CreatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUser)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.CreatedTimeMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_MsgPush(rows []MsgPush, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.msg_push (" +
		"ToUser, MessageId, CreatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUser)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.CreatedTimeMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

// MsgPushesByToUserCreatedTimeMs retrieves a row from 'ms.msg_push' as a MsgPush.
//
// Generated from index 'ToUser'.
func MsgPushesByToUserCreatedTimeMs(db XODB, toUser int, createdTimeMs int) ([]*MsgPush, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUser, MessageId, CreatedTimeMs ` +
		`FROM ms.msg_push ` +
		`WHERE ToUser = ? AND CreatedTimeMs = ?`

	// run query
	XOLog(sqlstr, toUser, createdTimeMs)
	q, err := db.Query(sqlstr, toUser, createdTimeMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MsgPush{}
	for q.Next() {
		mp := MsgPush{
			_exists: true,
		}

		// scan
		err = q.Scan(&mp.Id, &mp.ToUser, &mp.MessageId, &mp.CreatedTimeMs)
		if err != nil {
			XOLogErr(err)
			return nil, err
		}

		res = append(res, &mp)
	}

	OnMsgPush_LoadMany(res)

	return res, nil
}

// MsgPushById retrieves a row from 'ms.msg_push' as a MsgPush.
//
// Generated from index 'msg_push_Id_pkey'.
func MsgPushById(db XODB, id int) (*MsgPush, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUser, MessageId, CreatedTimeMs ` +
		`FROM ms.msg_push ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	mp := MsgPush{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mp.Id, &mp.ToUser, &mp.MessageId, &mp.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnMsgPush_LoadOne(&mp)

	return &mp, nil
}
