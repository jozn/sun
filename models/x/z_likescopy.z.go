// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// LikesCopy represents a row from 'ms.likes_copy'.

// Manualy copy this to project
type LikesCopy__ struct {
	Id          int `json:"Id"`          // Id -
	PostId      int `json:"PostId"`      // PostId -
	PostTypeId  int `json:"PostTypeId"`  // PostTypeId -
	UserId      int `json:"UserId"`      // UserId -
	TypeId      int `json:"TypeId"`      // TypeId -
	CreatedTime int `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LikesCopy exists in the database.
func (lc *LikesCopy) Exists() bool {
	return lc._exists
}

// Deleted provides information if the LikesCopy has been deleted from the database.
func (lc *LikesCopy) Deleted() bool {
	return lc._deleted
}

// Insert inserts the LikesCopy to the database.
func (lc *LikesCopy) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if lc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.likes_copy (` +
		`PostId, PostTypeId, UserId, TypeId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, lc.PostId, lc.PostTypeId, lc.UserId, lc.TypeId, lc.CreatedTime)
	res, err := db.Exec(sqlstr, lc.PostId, lc.PostTypeId, lc.UserId, lc.TypeId, lc.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	lc.Id = int(id)
	lc._exists = true

	OnLikesCopy_AfterInsert(lc)

	return nil
}

// Insert inserts the LikesCopy to the database.
func (lc *LikesCopy) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.likes_copy (` +
		`PostId, PostTypeId, UserId, TypeId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, lc.PostId, lc.PostTypeId, lc.UserId, lc.TypeId, lc.CreatedTime)
	res, err := db.Exec(sqlstr, lc.PostId, lc.PostTypeId, lc.UserId, lc.TypeId, lc.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	lc.Id = int(id)
	lc._exists = true

	OnLikesCopy_AfterInsert(lc)

	return nil
}

// Update updates the LikesCopy in the database.
func (lc *LikesCopy) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if lc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.likes_copy SET ` +
		`PostId = ?, PostTypeId = ?, UserId = ?, TypeId = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, lc.PostId, lc.PostTypeId, lc.UserId, lc.TypeId, lc.CreatedTime, lc.Id)
	_, err = db.Exec(sqlstr, lc.PostId, lc.PostTypeId, lc.UserId, lc.TypeId, lc.CreatedTime, lc.Id)

	XOLogErr(err)
	OnLikesCopy_AfterUpdate(lc)

	return err
}

// Save saves the LikesCopy to the database.
func (lc *LikesCopy) Save(db XODB) error {
	if lc.Exists() {
		return lc.Update(db)
	}

	return lc.Replace(db)
}

// Delete deletes the LikesCopy from the database.
func (lc *LikesCopy) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lc._exists {
		return nil
	}

	// if deleted, bail
	if lc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.likes_copy WHERE Id = ?`

	// run query
	XOLog(sqlstr, lc.Id)
	_, err = db.Exec(sqlstr, lc.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	lc._deleted = true

	OnLikesCopy_AfterDelete(lc)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __LikesCopy_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __LikesCopy_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __LikesCopy_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewLikesCopy_Deleter() *__LikesCopy_Deleter {
	d := __LikesCopy_Deleter{whereSep: " AND "}
	return &d
}

func NewLikesCopy_Updater() *__LikesCopy_Updater {
	u := __LikesCopy_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewLikesCopy_Selector() *__LikesCopy_Selector {
	u := __LikesCopy_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__LikesCopy_Deleter) Or() *__LikesCopy_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__LikesCopy_Deleter) Id_In(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) Id_Ins(ins ...int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) Id_NotIn(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Deleter) Id_Eq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) Id_NotEq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) Id_LT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) Id_LE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) Id_GT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) Id_GE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Deleter) PostId_In(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) PostId_Ins(ins ...int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) PostId_NotIn(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Deleter) PostId_Eq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostId_NotEq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostId_LT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostId_LE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostId_GT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostId_GE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Deleter) PostTypeId_In(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) PostTypeId_Ins(ins ...int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) PostTypeId_NotIn(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Deleter) PostTypeId_Eq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostTypeId_NotEq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostTypeId_LT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostTypeId_LE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostTypeId_GT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) PostTypeId_GE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Deleter) UserId_In(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) UserId_Ins(ins ...int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) UserId_NotIn(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Deleter) UserId_Eq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) UserId_NotEq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) UserId_LT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) UserId_LE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) UserId_GT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) UserId_GE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Deleter) TypeId_In(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) TypeId_Ins(ins ...int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) TypeId_NotIn(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Deleter) TypeId_Eq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) TypeId_NotEq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) TypeId_LT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) TypeId_LE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) TypeId_GT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) TypeId_GE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Deleter) CreatedTime_In(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) CreatedTime_Ins(ins ...int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Deleter) CreatedTime_NotIn(ins []int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Deleter) CreatedTime_Eq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) CreatedTime_NotEq(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) CreatedTime_LT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) CreatedTime_LE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) CreatedTime_GT(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Deleter) CreatedTime_GE(val int) *__LikesCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__LikesCopy_Updater) Or() *__LikesCopy_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__LikesCopy_Updater) Id_In(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) Id_Ins(ins ...int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) Id_NotIn(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Updater) Id_Eq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) Id_NotEq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) Id_LT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) Id_LE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) Id_GT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) Id_GE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Updater) PostId_In(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) PostId_Ins(ins ...int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) PostId_NotIn(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Updater) PostId_Eq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostId_NotEq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostId_LT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostId_LE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostId_GT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostId_GE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Updater) PostTypeId_In(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) PostTypeId_Ins(ins ...int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) PostTypeId_NotIn(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Updater) PostTypeId_Eq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostTypeId_NotEq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostTypeId_LT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostTypeId_LE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostTypeId_GT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) PostTypeId_GE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Updater) UserId_In(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) UserId_Ins(ins ...int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) UserId_NotIn(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Updater) UserId_Eq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) UserId_NotEq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) UserId_LT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) UserId_LE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) UserId_GT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) UserId_GE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Updater) TypeId_In(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) TypeId_Ins(ins ...int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) TypeId_NotIn(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Updater) TypeId_Eq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) TypeId_NotEq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) TypeId_LT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) TypeId_LE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) TypeId_GT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) TypeId_GE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Updater) CreatedTime_In(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) CreatedTime_Ins(ins ...int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Updater) CreatedTime_NotIn(ins []int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Updater) CreatedTime_Eq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) CreatedTime_NotEq(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) CreatedTime_LT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) CreatedTime_LE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) CreatedTime_GT(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Updater) CreatedTime_GE(val int) *__LikesCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__LikesCopy_Selector) Or() *__LikesCopy_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__LikesCopy_Selector) Id_In(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) Id_Ins(ins ...int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) Id_NotIn(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Selector) Id_Eq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) Id_NotEq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) Id_LT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) Id_LE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) Id_GT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) Id_GE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Selector) PostId_In(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) PostId_Ins(ins ...int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) PostId_NotIn(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Selector) PostId_Eq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostId_NotEq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostId_LT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostId_LE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostId_GT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostId_GE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Selector) PostTypeId_In(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) PostTypeId_Ins(ins ...int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) PostTypeId_NotIn(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Selector) PostTypeId_Eq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostTypeId_NotEq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostTypeId_LT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostTypeId_LE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostTypeId_GT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) PostTypeId_GE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Selector) UserId_In(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) UserId_Ins(ins ...int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) UserId_NotIn(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Selector) UserId_Eq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) UserId_NotEq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) UserId_LT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) UserId_LE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) UserId_GT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) UserId_GE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Selector) TypeId_In(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) TypeId_Ins(ins ...int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) TypeId_NotIn(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Selector) TypeId_Eq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) TypeId_NotEq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) TypeId_LT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) TypeId_LE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) TypeId_GT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) TypeId_GE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__LikesCopy_Selector) CreatedTime_In(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) CreatedTime_Ins(ins ...int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__LikesCopy_Selector) CreatedTime_NotIn(ins []int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__LikesCopy_Selector) CreatedTime_Eq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) CreatedTime_NotEq(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) CreatedTime_LT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) CreatedTime_LE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) CreatedTime_GT(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__LikesCopy_Selector) CreatedTime_GE(val int) *__LikesCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__LikesCopy_Updater) Id(newVal int) *__LikesCopy_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__LikesCopy_Updater) Id_Increment(count int) *__LikesCopy_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__LikesCopy_Updater) PostId(newVal int) *__LikesCopy_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__LikesCopy_Updater) PostId_Increment(count int) *__LikesCopy_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__LikesCopy_Updater) PostTypeId(newVal int) *__LikesCopy_Updater {
	u.updates[" PostTypeId = ? "] = newVal
	return u
}

func (u *__LikesCopy_Updater) PostTypeId_Increment(count int) *__LikesCopy_Updater {
	if count > 0 {
		u.updates[" PostTypeId = PostTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" PostTypeId = PostTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__LikesCopy_Updater) UserId(newVal int) *__LikesCopy_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__LikesCopy_Updater) UserId_Increment(count int) *__LikesCopy_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__LikesCopy_Updater) TypeId(newVal int) *__LikesCopy_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

func (u *__LikesCopy_Updater) TypeId_Increment(count int) *__LikesCopy_Updater {
	if count > 0 {
		u.updates[" TypeId = TypeId+? "] = count
	}

	if count < 0 {
		u.updates[" TypeId = TypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__LikesCopy_Updater) CreatedTime(newVal int) *__LikesCopy_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__LikesCopy_Updater) CreatedTime_Increment(count int) *__LikesCopy_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__LikesCopy_Selector) OrderBy_Id_Desc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__LikesCopy_Selector) OrderBy_Id_Asc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__LikesCopy_Selector) Select_Id() *__LikesCopy_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__LikesCopy_Selector) OrderBy_PostId_Desc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__LikesCopy_Selector) OrderBy_PostId_Asc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__LikesCopy_Selector) Select_PostId() *__LikesCopy_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__LikesCopy_Selector) OrderBy_PostTypeId_Desc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY PostTypeId DESC "
	return u
}

func (u *__LikesCopy_Selector) OrderBy_PostTypeId_Asc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY PostTypeId ASC "
	return u
}

func (u *__LikesCopy_Selector) Select_PostTypeId() *__LikesCopy_Selector {
	u.selectCol = "PostTypeId"
	return u
}

func (u *__LikesCopy_Selector) OrderBy_UserId_Desc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__LikesCopy_Selector) OrderBy_UserId_Asc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__LikesCopy_Selector) Select_UserId() *__LikesCopy_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__LikesCopy_Selector) OrderBy_TypeId_Desc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__LikesCopy_Selector) OrderBy_TypeId_Asc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__LikesCopy_Selector) Select_TypeId() *__LikesCopy_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__LikesCopy_Selector) OrderBy_CreatedTime_Desc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__LikesCopy_Selector) OrderBy_CreatedTime_Asc() *__LikesCopy_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__LikesCopy_Selector) Select_CreatedTime() *__LikesCopy_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__LikesCopy_Selector) Limit(num int) *__LikesCopy_Selector {
	u.limit = num
	return u
}

func (u *__LikesCopy_Selector) Offset(num int) *__LikesCopy_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__LikesCopy_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.likes_copy"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__LikesCopy_Selector) GetRow(db *sqlx.DB) (*LikesCopy, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &LikesCopy{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnLikesCopy_LoadOne(row)

	return row, nil
}

func (u *__LikesCopy_Selector) GetRows(db *sqlx.DB) ([]*LikesCopy, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*LikesCopy
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnLikesCopy_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__LikesCopy_Selector) GetRows2(db *sqlx.DB) ([]LikesCopy, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*LikesCopy
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnLikesCopy_LoadMany(rows)

	rows2 := make([]LikesCopy, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__LikesCopy_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__LikesCopy_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__LikesCopy_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__LikesCopy_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__LikesCopy_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.likes_copy SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__LikesCopy_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.likes_copy WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  LikesCopy ////////////////
func MassInsert_LikesCopy(rows []LikesCopy, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.likes_copy (" +
		"PostId, PostTypeId, UserId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.PostTypeId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_LikesCopy(rows []LikesCopy, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.likes_copy (" +
		"PostId, PostTypeId, UserId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.PostTypeId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.TypeId)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// LikesCopyById retrieves a row from 'ms.likes_copy' as a LikesCopy.
//
// Generated from index 'likes_copy_Id_pkey'.
func LikesCopyById(db XODB, id int) (*LikesCopy, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PostId, PostTypeId, UserId, TypeId, CreatedTime ` +
		`FROM ms.likes_copy ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	lc := LikesCopy{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&lc.Id, &lc.PostId, &lc.PostTypeId, &lc.UserId, &lc.TypeId, &lc.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnLikesCopy_LoadOne(&lc)

	return &lc, nil
}
