// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb_global.proto

package x

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PB_CommandToServer struct {
	ClientCallId   int64  `protobuf:"varint,1,opt,name=ClientCallId" json:"ClientCallId,omitempty"`
	Command        string `protobuf:"bytes,2,opt,name=Command" json:"Command,omitempty"`
	RespondReached bool   `protobuf:"varint,3,opt,name=RespondReached" json:"RespondReached,omitempty"`
	Data           []byte `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *PB_CommandToServer) Reset()                    { *m = PB_CommandToServer{} }
func (m *PB_CommandToServer) String() string            { return proto.CompactTextString(m) }
func (*PB_CommandToServer) ProtoMessage()               {}
func (*PB_CommandToServer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *PB_CommandToServer) GetClientCallId() int64 {
	if m != nil {
		return m.ClientCallId
	}
	return 0
}

func (m *PB_CommandToServer) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *PB_CommandToServer) GetRespondReached() bool {
	if m != nil {
		return m.RespondReached
	}
	return false
}

func (m *PB_CommandToServer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PB_CommandToClient struct {
	ServerCallId   int64  `protobuf:"varint,1,opt,name=ServerCallId" json:"ServerCallId,omitempty"`
	Command        string `protobuf:"bytes,2,opt,name=Command" json:"Command,omitempty"`
	RespondReached bool   `protobuf:"varint,3,opt,name=RespondReached" json:"RespondReached,omitempty"`
	Data           []byte `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *PB_CommandToClient) Reset()                    { *m = PB_CommandToClient{} }
func (m *PB_CommandToClient) String() string            { return proto.CompactTextString(m) }
func (*PB_CommandToClient) ProtoMessage()               {}
func (*PB_CommandToClient) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PB_CommandToClient) GetServerCallId() int64 {
	if m != nil {
		return m.ServerCallId
	}
	return 0
}

func (m *PB_CommandToClient) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *PB_CommandToClient) GetRespondReached() bool {
	if m != nil {
		return m.RespondReached
	}
	return false
}

func (m *PB_CommandToClient) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PB_CommandReachedToServer struct {
	ClientCallId int64 `protobuf:"varint,1,opt,name=ClientCallId" json:"ClientCallId,omitempty"`
}

func (m *PB_CommandReachedToServer) Reset()                    { *m = PB_CommandReachedToServer{} }
func (m *PB_CommandReachedToServer) String() string            { return proto.CompactTextString(m) }
func (*PB_CommandReachedToServer) ProtoMessage()               {}
func (*PB_CommandReachedToServer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *PB_CommandReachedToServer) GetClientCallId() int64 {
	if m != nil {
		return m.ClientCallId
	}
	return 0
}

type PB_CommandReachedToClient struct {
	ServerCallId int64 `protobuf:"varint,1,opt,name=ServerCallId" json:"ServerCallId,omitempty"`
}

func (m *PB_CommandReachedToClient) Reset()                    { *m = PB_CommandReachedToClient{} }
func (m *PB_CommandReachedToClient) String() string            { return proto.CompactTextString(m) }
func (*PB_CommandReachedToClient) ProtoMessage()               {}
func (*PB_CommandReachedToClient) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *PB_CommandReachedToClient) GetServerCallId() int64 {
	if m != nil {
		return m.ServerCallId
	}
	return 0
}

type PB_ResponseToClient struct {
	ClientCallId int64  `protobuf:"varint,1,opt,name=ClientCallId" json:"ClientCallId,omitempty"`
	PBClass      string `protobuf:"bytes,2,opt,name=PBClass" json:"PBClass,omitempty"`
	RpcFullName  string `protobuf:"bytes,3,opt,name=RpcFullName" json:"RpcFullName,omitempty"`
	Data         []byte `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *PB_ResponseToClient) Reset()                    { *m = PB_ResponseToClient{} }
func (m *PB_ResponseToClient) String() string            { return proto.CompactTextString(m) }
func (*PB_ResponseToClient) ProtoMessage()               {}
func (*PB_ResponseToClient) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *PB_ResponseToClient) GetClientCallId() int64 {
	if m != nil {
		return m.ClientCallId
	}
	return 0
}

func (m *PB_ResponseToClient) GetPBClass() string {
	if m != nil {
		return m.PBClass
	}
	return ""
}

func (m *PB_ResponseToClient) GetRpcFullName() string {
	if m != nil {
		return m.RpcFullName
	}
	return ""
}

func (m *PB_ResponseToClient) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PB_CommandToServer)(nil), "PB_CommandToServer")
	proto.RegisterType((*PB_CommandToClient)(nil), "PB_CommandToClient")
	proto.RegisterType((*PB_CommandReachedToServer)(nil), "PB_CommandReachedToServer")
	proto.RegisterType((*PB_CommandReachedToClient)(nil), "PB_CommandReachedToClient")
	proto.RegisterType((*PB_ResponseToClient)(nil), "PB_ResponseToClient")
}

func init() { proto.RegisterFile("pb_global.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x48, 0x8a, 0x4f,
	0xcf, 0xc9, 0x4f, 0x4a, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xea, 0x63, 0xe4, 0x12,
	0x0a, 0x70, 0x8a, 0x77, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x09, 0xc9, 0x0f, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x12, 0x52, 0xe2, 0xe2, 0x71, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x71, 0x4e, 0xcc, 0xc9,
	0xf1, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x42, 0x11, 0x13, 0x92, 0xe0, 0x62, 0x87,
	0x6a, 0x93, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x85, 0xd4, 0xb8, 0xf8, 0x82, 0x52,
	0x8b, 0x0b, 0xf2, 0xf3, 0x52, 0x82, 0x52, 0x13, 0x93, 0x33, 0x52, 0x53, 0x24, 0x98, 0x15, 0x18,
	0x35, 0x38, 0x82, 0xd0, 0x44, 0x85, 0x84, 0xb8, 0x58, 0x5c, 0x12, 0x4b, 0x12, 0x25, 0x58, 0x14,
	0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0x0c, 0x07, 0x41, 0xac, 0x04, 0x39, 0x08, 0xe2, 0x34, 0x54,
	0x07, 0x21, 0x8b, 0xd1, 0xc8, 0x41, 0xf6, 0x5c, 0x92, 0x08, 0xf7, 0x40, 0x15, 0x92, 0x12, 0x4e,
	0x38, 0x0c, 0x20, 0xde, 0x5f, 0x4a, 0x9d, 0x8c, 0x5c, 0xc2, 0x01, 0x4e, 0xf1, 0x10, 0xb7, 0x16,
	0xa7, 0x22, 0xeb, 0x25, 0x26, 0x92, 0x02, 0x9c, 0x9c, 0x73, 0x12, 0x8b, 0x8b, 0x61, 0x61, 0x02,
	0xe5, 0x0a, 0x29, 0x70, 0x71, 0x07, 0x15, 0x24, 0xbb, 0x95, 0xe6, 0xe4, 0xf8, 0x25, 0xe6, 0xa6,
	0x82, 0x03, 0x84, 0x33, 0x08, 0x59, 0x08, 0x5b, 0x68, 0x38, 0x09, 0x72, 0x71, 0x64, 0x16, 0xe9,
	0xe5, 0x16, 0xeb, 0x15, 0x24, 0x79, 0x30, 0x07, 0x30, 0x46, 0x31, 0x56, 0x24, 0xb1, 0x81, 0x53,
	0x92, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x2d, 0x26, 0x35, 0x5c, 0x02, 0x00, 0x00,
}
