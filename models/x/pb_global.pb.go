// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb_global.proto

package x

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of PB_Chat from pb_table.proto

// Ignoring public import of PB_DirectMessage from pb_table.proto

type PB_CommandToServer struct {
	ClientCallId int64  `protobuf:"varint,1,opt,name=ClientCallId" json:"ClientCallId,omitempty"`
	Command      string `protobuf:"bytes,2,opt,name=Command" json:"Command,omitempty"`
	Data         []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *PB_CommandToServer) Reset()                    { *m = PB_CommandToServer{} }
func (m *PB_CommandToServer) String() string            { return proto.CompactTextString(m) }
func (*PB_CommandToServer) ProtoMessage()               {}
func (*PB_CommandToServer) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *PB_CommandToServer) GetClientCallId() int64 {
	if m != nil {
		return m.ClientCallId
	}
	return 0
}

func (m *PB_CommandToServer) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *PB_CommandToServer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PB_CommandToClient struct {
	ServerCallId int64  `protobuf:"varint,1,opt,name=ServerCallId" json:"ServerCallId,omitempty"`
	Command      string `protobuf:"bytes,2,opt,name=Command" json:"Command,omitempty"`
	Data         []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *PB_CommandToClient) Reset()                    { *m = PB_CommandToClient{} }
func (m *PB_CommandToClient) String() string            { return proto.CompactTextString(m) }
func (*PB_CommandToClient) ProtoMessage()               {}
func (*PB_CommandToClient) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *PB_CommandToClient) GetServerCallId() int64 {
	if m != nil {
		return m.ServerCallId
	}
	return 0
}

func (m *PB_CommandToClient) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *PB_CommandToClient) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PB_CommandReceivedToServer struct {
	ClientCallId int64 `protobuf:"varint,1,opt,name=ClientCallId" json:"ClientCallId,omitempty"`
}

func (m *PB_CommandReceivedToServer) Reset()                    { *m = PB_CommandReceivedToServer{} }
func (m *PB_CommandReceivedToServer) String() string            { return proto.CompactTextString(m) }
func (*PB_CommandReceivedToServer) ProtoMessage()               {}
func (*PB_CommandReceivedToServer) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *PB_CommandReceivedToServer) GetClientCallId() int64 {
	if m != nil {
		return m.ClientCallId
	}
	return 0
}

type PB_CommandReceivedToClient struct {
	ServerCallId int64 `protobuf:"varint,1,opt,name=ServerCallId" json:"ServerCallId,omitempty"`
}

func (m *PB_CommandReceivedToClient) Reset()                    { *m = PB_CommandReceivedToClient{} }
func (m *PB_CommandReceivedToClient) String() string            { return proto.CompactTextString(m) }
func (*PB_CommandReceivedToClient) ProtoMessage()               {}
func (*PB_CommandReceivedToClient) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *PB_CommandReceivedToClient) GetServerCallId() int64 {
	if m != nil {
		return m.ServerCallId
	}
	return 0
}

type PB_ResToClient struct {
	ClientCallId int64  `protobuf:"varint,1,opt,name=ClientCallId" json:"ClientCallId,omitempty"`
	PBClass      string `protobuf:"bytes,2,opt,name=PBClass" json:"PBClass,omitempty"`
	Data         []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *PB_ResToClient) Reset()                    { *m = PB_ResToClient{} }
func (m *PB_ResToClient) String() string            { return proto.CompactTextString(m) }
func (*PB_ResToClient) ProtoMessage()               {}
func (*PB_ResToClient) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *PB_ResToClient) GetClientCallId() int64 {
	if m != nil {
		return m.ClientCallId
	}
	return 0
}

func (m *PB_ResToClient) GetPBClass() string {
	if m != nil {
		return m.PBClass
	}
	return ""
}

func (m *PB_ResToClient) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PB_CommandToServer)(nil), "PB_CommandToServer")
	proto.RegisterType((*PB_CommandToClient)(nil), "PB_CommandToClient")
	proto.RegisterType((*PB_CommandReceivedToServer)(nil), "PB_CommandReceivedToServer")
	proto.RegisterType((*PB_CommandReceivedToClient)(nil), "PB_CommandReceivedToClient")
	proto.RegisterType((*PB_ResToClient)(nil), "PB_ResToClient")
}

func init() { proto.RegisterFile("pb_global.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x48, 0x8a, 0x4f,
	0xcf, 0xc9, 0x4f, 0x4a, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2, 0x2b, 0x48, 0x8a,
	0x2f, 0x49, 0x4c, 0xca, 0x49, 0x85, 0xf0, 0x95, 0xd2, 0xb8, 0x84, 0x02, 0x9c, 0xe2, 0x9d, 0xf3,
	0x73, 0x73, 0x13, 0xf3, 0x52, 0x42, 0xf2, 0x83, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0x84, 0x94, 0xb8,
	0x78, 0x9c, 0x73, 0x32, 0x53, 0xf3, 0x4a, 0x9c, 0x13, 0x73, 0x72, 0x3c, 0x53, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x98, 0x83, 0x50, 0xc4, 0x84, 0x24, 0xb8, 0xd8, 0xa1, 0xda, 0x24, 0x98, 0x14, 0x18,
	0x35, 0x38, 0x83, 0x60, 0x5c, 0x21, 0x21, 0x2e, 0x16, 0x97, 0xc4, 0x92, 0x44, 0x09, 0x66, 0x05,
	0x46, 0x0d, 0x9e, 0x20, 0x30, 0x1b, 0xdd, 0x1e, 0x88, 0x49, 0x20, 0x7b, 0x20, 0x36, 0xa2, 0xda,
	0x83, 0x2c, 0x46, 0xa2, 0x3d, 0x0e, 0x5c, 0x52, 0x08, 0x7b, 0x82, 0x52, 0x93, 0x53, 0x33, 0xcb,
	0x52, 0x49, 0xf2, 0x17, 0x2e, 0x13, 0x88, 0x77, 0xb1, 0x52, 0x12, 0x17, 0x5f, 0x80, 0x53, 0x7c,
	0x50, 0x6a, 0x31, 0xb2, 0x2e, 0x62, 0xc2, 0x33, 0xc0, 0xc9, 0x39, 0x27, 0xb1, 0xb8, 0x18, 0xe6,
	0x4f, 0x28, 0x17, 0x9b, 0x3f, 0x9d, 0x44, 0xb9, 0x38, 0x32, 0x8b, 0xf4, 0x72, 0x8b, 0xf5, 0x0a,
	0x92, 0x9c, 0x98, 0x02, 0x9c, 0x3c, 0x98, 0x03, 0x18, 0xa3, 0x18, 0x2b, 0x02, 0x18, 0x92, 0xd8,
	0xc0, 0xf1, 0x6a, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x03, 0x4f, 0xd1, 0x01, 0xfa, 0x01, 0x00,
	0x00,
}
