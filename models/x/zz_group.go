package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Group represents a row from 'ms.group'.

// Manualy copy this to project
type Group__ struct {
	GroupId          int    `json:"GroupId"`          // GroupId -
	GroupName        string `json:"GroupName"`        // GroupName -
	MembersCount     int    `json:"MembersCount"`     // MembersCount -
	GroupPrivacyEnum int    `json:"GroupPrivacyEnum"` // GroupPrivacyEnum -
	CreatorUserId    int    `json:"CreatorUserId"`    // CreatorUserId -
	CreatedTime      int    `json:"CreatedTime"`      // CreatedTime -
	UpdatedMs        int    `json:"UpdatedMs"`        // UpdatedMs -
	CurrentSeq       int    `json:"CurrentSeq"`       // CurrentSeq -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Group exists in the database.
func (g *Group) Exists() bool {
	return g._exists
}

// Deleted provides information if the Group has been deleted from the database.
func (g *Group) Deleted() bool {
	return g._deleted
}

// Insert inserts the Group to the database.
func (g *Group) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ms.group (` +
		`GroupId, GroupName, MembersCount, GroupPrivacyEnum, CreatorUserId, CreatedTime, UpdatedMs, CurrentSeq` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, g.GroupId, g.GroupName, g.MembersCount, g.GroupPrivacyEnum, g.CreatorUserId, g.CreatedTime, g.UpdatedMs, g.CurrentSeq)
	_, err = db.Exec(sqlstr, g.GroupId, g.GroupName, g.MembersCount, g.GroupPrivacyEnum, g.CreatorUserId, g.CreatedTime, g.UpdatedMs, g.CurrentSeq)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	OnGroup_AfterInsert(g)

	return nil
}

// Insert inserts the Group to the database.
func (g *Group) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.group (` +
		`GroupId, GroupName, MembersCount, GroupPrivacyEnum, CreatorUserId, CreatedTime, UpdatedMs, CurrentSeq` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, g.GroupId, g.GroupName, g.MembersCount, g.GroupPrivacyEnum, g.CreatorUserId, g.CreatedTime, g.UpdatedMs, g.CurrentSeq)
	_, err = db.Exec(sqlstr, g.GroupId, g.GroupName, g.MembersCount, g.GroupPrivacyEnum, g.CreatorUserId, g.CreatedTime, g.UpdatedMs, g.CurrentSeq)
	if err != nil {
		XOLogErr(err)
		return err
	}

	g._exists = true

	OnGroup_AfterInsert(g)

	return nil
}

// Update updates the Group in the database.
func (g *Group) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.group SET ` +
		`GroupName = ?, MembersCount = ?, GroupPrivacyEnum = ?, CreatorUserId = ?, CreatedTime = ?, UpdatedMs = ?, CurrentSeq = ?` +
		` WHERE GroupId = ?`

	// run query
	XOLog(sqlstr, g.GroupName, g.MembersCount, g.GroupPrivacyEnum, g.CreatorUserId, g.CreatedTime, g.UpdatedMs, g.CurrentSeq, g.GroupId)
	_, err = db.Exec(sqlstr, g.GroupName, g.MembersCount, g.GroupPrivacyEnum, g.CreatorUserId, g.CreatedTime, g.UpdatedMs, g.CurrentSeq, g.GroupId)

	XOLogErr(err)
	OnGroup_AfterUpdate(g)

	return err
}

// Save saves the Group to the database.
func (g *Group) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Replace(db)
}

// Delete deletes the Group from the database.
func (g *Group) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.group WHERE GroupId = ?`

	// run query
	XOLog(sqlstr, g.GroupId)
	_, err = db.Exec(sqlstr, g.GroupId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	g._deleted = true

	OnGroup_AfterDelete(g)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Group_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Group_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Group_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewGroup_Deleter() *__Group_Deleter {
	d := __Group_Deleter{whereSep: " AND "}
	return &d
}

func NewGroup_Updater() *__Group_Updater {
	u := __Group_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewGroup_Selector() *__Group_Selector {
	u := __Group_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Group_Deleter) Or() *__Group_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Group_Deleter) GroupId_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupId_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupId_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) GroupId_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) MembersCount_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) MembersCount_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) MembersCount_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) MembersCount_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) GroupPrivacyEnum_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupPrivacyEnum_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupPrivacyEnum_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacyEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) GroupPrivacyEnum_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacyEnum_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacyEnum_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacyEnum_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacyEnum_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacyEnum_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) CreatorUserId_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CreatorUserId_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CreatorUserId_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) CreatorUserId_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) CreatedTime_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CreatedTime_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CreatedTime_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) CreatedTime_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) UpdatedMs_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) UpdatedMs_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) UpdatedMs_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) UpdatedMs_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) UpdatedMs_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) UpdatedMs_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) UpdatedMs_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) UpdatedMs_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) UpdatedMs_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) CurrentSeq_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CurrentSeq_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CurrentSeq_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) CurrentSeq_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CurrentSeq_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CurrentSeq_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CurrentSeq_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CurrentSeq_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CurrentSeq_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Group_Updater) Or() *__Group_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Group_Updater) GroupId_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupId_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupId_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) GroupId_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) MembersCount_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) MembersCount_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) MembersCount_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) MembersCount_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) GroupPrivacyEnum_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupPrivacyEnum_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupPrivacyEnum_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacyEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) GroupPrivacyEnum_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacyEnum_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacyEnum_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacyEnum_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacyEnum_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacyEnum_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) CreatorUserId_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CreatorUserId_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CreatorUserId_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) CreatorUserId_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) CreatedTime_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CreatedTime_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CreatedTime_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) CreatedTime_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) UpdatedMs_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) UpdatedMs_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) UpdatedMs_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) UpdatedMs_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) UpdatedMs_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) UpdatedMs_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) UpdatedMs_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) UpdatedMs_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) UpdatedMs_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) CurrentSeq_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CurrentSeq_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CurrentSeq_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) CurrentSeq_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CurrentSeq_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CurrentSeq_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CurrentSeq_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CurrentSeq_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CurrentSeq_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Group_Selector) Or() *__Group_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Group_Selector) GroupId_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupId_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupId_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) GroupId_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) MembersCount_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) MembersCount_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) MembersCount_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) MembersCount_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) GroupPrivacyEnum_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupPrivacyEnum_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupPrivacyEnum_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacyEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) GroupPrivacyEnum_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacyEnum_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacyEnum_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacyEnum_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacyEnum_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacyEnum_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacyEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) CreatorUserId_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CreatorUserId_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CreatorUserId_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) CreatorUserId_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) CreatedTime_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CreatedTime_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CreatedTime_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) CreatedTime_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) UpdatedMs_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) UpdatedMs_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) UpdatedMs_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) UpdatedMs_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) UpdatedMs_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) UpdatedMs_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) UpdatedMs_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) UpdatedMs_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) UpdatedMs_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) CurrentSeq_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CurrentSeq_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CurrentSeq_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CurrentSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) CurrentSeq_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CurrentSeq_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CurrentSeq_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CurrentSeq_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CurrentSeq_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CurrentSeq_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CurrentSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Group_Deleter) GroupName_In(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupName_NotIn(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Deleter) GroupName_Like(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) GroupName_Eq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupName_NotEq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Group_Updater) GroupName_In(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupName_NotIn(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Updater) GroupName_Like(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) GroupName_Eq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupName_NotEq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Group_Selector) GroupName_In(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupName_NotIn(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Selector) GroupName_Like(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) GroupName_Eq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupName_NotEq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Group_Updater) GroupId(newVal int) *__Group_Updater {
	u.updates[" GroupId = ? "] = newVal
	return u
}

func (u *__Group_Updater) GroupId_Increment(count int) *__Group_Updater {
	if count > 0 {
		u.updates[" GroupId = GroupId+? "] = count
	}

	if count < 0 {
		u.updates[" GroupId = GroupId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Group_Updater) GroupName(newVal string) *__Group_Updater {
	u.updates[" GroupName = ? "] = newVal
	return u
}

//ints

func (u *__Group_Updater) MembersCount(newVal int) *__Group_Updater {
	u.updates[" MembersCount = ? "] = newVal
	return u
}

func (u *__Group_Updater) MembersCount_Increment(count int) *__Group_Updater {
	if count > 0 {
		u.updates[" MembersCount = MembersCount+? "] = count
	}

	if count < 0 {
		u.updates[" MembersCount = MembersCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) GroupPrivacyEnum(newVal int) *__Group_Updater {
	u.updates[" GroupPrivacyEnum = ? "] = newVal
	return u
}

func (u *__Group_Updater) GroupPrivacyEnum_Increment(count int) *__Group_Updater {
	if count > 0 {
		u.updates[" GroupPrivacyEnum = GroupPrivacyEnum+? "] = count
	}

	if count < 0 {
		u.updates[" GroupPrivacyEnum = GroupPrivacyEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) CreatorUserId(newVal int) *__Group_Updater {
	u.updates[" CreatorUserId = ? "] = newVal
	return u
}

func (u *__Group_Updater) CreatorUserId_Increment(count int) *__Group_Updater {
	if count > 0 {
		u.updates[" CreatorUserId = CreatorUserId+? "] = count
	}

	if count < 0 {
		u.updates[" CreatorUserId = CreatorUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) CreatedTime(newVal int) *__Group_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Group_Updater) CreatedTime_Increment(count int) *__Group_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) UpdatedMs(newVal int) *__Group_Updater {
	u.updates[" UpdatedMs = ? "] = newVal
	return u
}

func (u *__Group_Updater) UpdatedMs_Increment(count int) *__Group_Updater {
	if count > 0 {
		u.updates[" UpdatedMs = UpdatedMs+? "] = count
	}

	if count < 0 {
		u.updates[" UpdatedMs = UpdatedMs-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) CurrentSeq(newVal int) *__Group_Updater {
	u.updates[" CurrentSeq = ? "] = newVal
	return u
}

func (u *__Group_Updater) CurrentSeq_Increment(count int) *__Group_Updater {
	if count > 0 {
		u.updates[" CurrentSeq = CurrentSeq+? "] = count
	}

	if count < 0 {
		u.updates[" CurrentSeq = CurrentSeq-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Group_Selector) OrderBy_GroupId_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupId DESC "
	return u
}

func (u *__Group_Selector) OrderBy_GroupId_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupId ASC "
	return u
}

func (u *__Group_Selector) Select_GroupId() *__Group_Selector {
	u.selectCol = "GroupId"
	return u
}

func (u *__Group_Selector) OrderBy_GroupName_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupName DESC "
	return u
}

func (u *__Group_Selector) OrderBy_GroupName_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupName ASC "
	return u
}

func (u *__Group_Selector) Select_GroupName() *__Group_Selector {
	u.selectCol = "GroupName"
	return u
}

func (u *__Group_Selector) OrderBy_MembersCount_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY MembersCount DESC "
	return u
}

func (u *__Group_Selector) OrderBy_MembersCount_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY MembersCount ASC "
	return u
}

func (u *__Group_Selector) Select_MembersCount() *__Group_Selector {
	u.selectCol = "MembersCount"
	return u
}

func (u *__Group_Selector) OrderBy_GroupPrivacyEnum_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupPrivacyEnum DESC "
	return u
}

func (u *__Group_Selector) OrderBy_GroupPrivacyEnum_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupPrivacyEnum ASC "
	return u
}

func (u *__Group_Selector) Select_GroupPrivacyEnum() *__Group_Selector {
	u.selectCol = "GroupPrivacyEnum"
	return u
}

func (u *__Group_Selector) OrderBy_CreatorUserId_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY CreatorUserId DESC "
	return u
}

func (u *__Group_Selector) OrderBy_CreatorUserId_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY CreatorUserId ASC "
	return u
}

func (u *__Group_Selector) Select_CreatorUserId() *__Group_Selector {
	u.selectCol = "CreatorUserId"
	return u
}

func (u *__Group_Selector) OrderBy_CreatedTime_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Group_Selector) OrderBy_CreatedTime_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Group_Selector) Select_CreatedTime() *__Group_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Group_Selector) OrderBy_UpdatedMs_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY UpdatedMs DESC "
	return u
}

func (u *__Group_Selector) OrderBy_UpdatedMs_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY UpdatedMs ASC "
	return u
}

func (u *__Group_Selector) Select_UpdatedMs() *__Group_Selector {
	u.selectCol = "UpdatedMs"
	return u
}

func (u *__Group_Selector) OrderBy_CurrentSeq_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY CurrentSeq DESC "
	return u
}

func (u *__Group_Selector) OrderBy_CurrentSeq_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY CurrentSeq ASC "
	return u
}

func (u *__Group_Selector) Select_CurrentSeq() *__Group_Selector {
	u.selectCol = "CurrentSeq"
	return u
}

func (u *__Group_Selector) Limit(num int) *__Group_Selector {
	u.limit = num
	return u
}

func (u *__Group_Selector) Offset(num int) *__Group_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Group_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.group"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Group_Selector) GetRow(db *sqlx.DB) (*Group, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Group{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnGroup_LoadOne(row)

	return row, nil
}

func (u *__Group_Selector) GetRows(db *sqlx.DB) ([]*Group, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Group
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGroup_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Group_Selector) GetRows2(db *sqlx.DB) ([]Group, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Group
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGroup_LoadMany(rows)

	rows2 := make([]Group, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Group_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__Group_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Group_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Group_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Group_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.group SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__Group_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.group WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Group ////////////////

func MassInsert_Group(rows []Group, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.group (" +
		"GroupId, GroupName, MembersCount, GroupPrivacyEnum, CreatorUserId, CreatedTime, UpdatedMs, CurrentSeq" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.GroupName)
		vals = append(vals, row.MembersCount)
		vals = append(vals, row.GroupPrivacyEnum)
		vals = append(vals, row.CreatorUserId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedMs)
		vals = append(vals, row.CurrentSeq)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_Group(rows []Group, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.group (" +
		"GroupId, GroupName, MembersCount, GroupPrivacyEnum, CreatorUserId, CreatedTime, UpdatedMs, CurrentSeq" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.GroupName)
		vals = append(vals, row.MembersCount)
		vals = append(vals, row.GroupPrivacyEnum)
		vals = append(vals, row.CreatorUserId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedMs)
		vals = append(vals, row.CurrentSeq)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//
