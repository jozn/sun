// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// OldMessage represents a row from 'ms.old_messages'.

// Manualy copy this to project
type OldMessage__ struct {
	Id            int    `json:"Id"`            // Id -
	Uid           int    `json:"Uid"`           // Uid -
	UserId        int    `json:"UserId"`        // UserId -
	MessageKey    string `json:"MessageKey"`    // MessageKey -
	RoomKey       string `json:"RoomKey"`       // RoomKey -
	MessageType   int    `json:"MessageType"`   // MessageType -
	RoomType      int    `json:"RoomType"`      // RoomType -
	MsgFileId     int    `json:"MsgFileId"`     // MsgFileId -
	DataPB        []byte `json:"DataPB"`        // DataPB -
	Data64        string `json:"Data64"`        // Data64 -
	DataJson      string `json:"DataJson"`      // DataJson -
	CreatedTimeMs int    `json:"CreatedTimeMs"` // CreatedTimeMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OldMessage exists in the database.
func (om *OldMessage) Exists() bool {
	return om._exists
}

// Deleted provides information if the OldMessage has been deleted from the database.
func (om *OldMessage) Deleted() bool {
	return om._deleted
}

// Insert inserts the OldMessage to the database.
func (om *OldMessage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if om._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.old_messages (` +
		`Uid, UserId, MessageKey, RoomKey, MessageType, RoomType, MsgFileId, DataPB, Data64, DataJson, CreatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, om.Uid, om.UserId, om.MessageKey, om.RoomKey, om.MessageType, om.RoomType, om.MsgFileId, om.DataPB, om.Data64, om.DataJson, om.CreatedTimeMs)
	res, err := db.Exec(sqlstr, om.Uid, om.UserId, om.MessageKey, om.RoomKey, om.MessageType, om.RoomType, om.MsgFileId, om.DataPB, om.Data64, om.DataJson, om.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	om.Id = int(id)
	om._exists = true

	OnOldMessage_AfterInsert(om)

	return nil
}

// Insert inserts the OldMessage to the database.
func (om *OldMessage) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.old_messages (` +
		`Uid, UserId, MessageKey, RoomKey, MessageType, RoomType, MsgFileId, DataPB, Data64, DataJson, CreatedTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, om.Uid, om.UserId, om.MessageKey, om.RoomKey, om.MessageType, om.RoomType, om.MsgFileId, om.DataPB, om.Data64, om.DataJson, om.CreatedTimeMs)
	res, err := db.Exec(sqlstr, om.Uid, om.UserId, om.MessageKey, om.RoomKey, om.MessageType, om.RoomType, om.MsgFileId, om.DataPB, om.Data64, om.DataJson, om.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	om.Id = int(id)
	om._exists = true

	OnOldMessage_AfterInsert(om)

	return nil
}

// Update updates the OldMessage in the database.
func (om *OldMessage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !om._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if om._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.old_messages SET ` +
		`Uid = ?, UserId = ?, MessageKey = ?, RoomKey = ?, MessageType = ?, RoomType = ?, MsgFileId = ?, DataPB = ?, Data64 = ?, DataJson = ?, CreatedTimeMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, om.Uid, om.UserId, om.MessageKey, om.RoomKey, om.MessageType, om.RoomType, om.MsgFileId, om.DataPB, om.Data64, om.DataJson, om.CreatedTimeMs, om.Id)
	_, err = db.Exec(sqlstr, om.Uid, om.UserId, om.MessageKey, om.RoomKey, om.MessageType, om.RoomType, om.MsgFileId, om.DataPB, om.Data64, om.DataJson, om.CreatedTimeMs, om.Id)

	XOLogErr(err)
	OnOldMessage_AfterUpdate(om)

	return err
}

// Save saves the OldMessage to the database.
func (om *OldMessage) Save(db XODB) error {
	if om.Exists() {
		return om.Update(db)
	}

	return om.Replace(db)
}

// Delete deletes the OldMessage from the database.
func (om *OldMessage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !om._exists {
		return nil
	}

	// if deleted, bail
	if om._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.old_messages WHERE Id = ?`

	// run query
	XOLog(sqlstr, om.Id)
	_, err = db.Exec(sqlstr, om.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	om._deleted = true

	OnOldMessage_AfterDelete(om)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __OldMessage_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __OldMessage_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __OldMessage_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewOldMessage_Deleter() *__OldMessage_Deleter {
	d := __OldMessage_Deleter{whereSep: " AND "}
	return &d
}

func NewOldMessage_Updater() *__OldMessage_Updater {
	u := __OldMessage_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewOldMessage_Selector() *__OldMessage_Selector {
	u := __OldMessage_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__OldMessage_Deleter) Or() *__OldMessage_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__OldMessage_Deleter) Id_In(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) Id_Ins(ins ...int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) Id_NotIn(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) Id_Eq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Id_NotEq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Id_LT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Id_LE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Id_GT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Id_GE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Deleter) Uid_In(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Uid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) Uid_Ins(ins ...int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Uid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) Uid_NotIn(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Uid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) Uid_Eq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Uid_NotEq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Uid_LT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Uid_LE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Uid_GT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Uid_GE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Deleter) UserId_In(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) UserId_Ins(ins ...int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) UserId_NotIn(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) UserId_Eq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) UserId_NotEq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) UserId_LT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) UserId_LE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) UserId_GT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) UserId_GE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Deleter) MessageType_In(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) MessageType_Ins(ins ...int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) MessageType_NotIn(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) MessageType_Eq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MessageType_NotEq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MessageType_LT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MessageType_LE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MessageType_GT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MessageType_GE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Deleter) RoomType_In(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) RoomType_Ins(ins ...int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) RoomType_NotIn(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) RoomType_Eq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) RoomType_NotEq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) RoomType_LT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) RoomType_LE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) RoomType_GT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) RoomType_GE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Deleter) MsgFileId_In(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) MsgFileId_Ins(ins ...int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) MsgFileId_NotIn(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) MsgFileId_Eq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MsgFileId_NotEq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MsgFileId_LT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MsgFileId_LE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MsgFileId_GT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MsgFileId_GE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Deleter) CreatedTimeMs_In(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) CreatedTimeMs_Ins(ins ...int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) CreatedTimeMs_NotIn(ins []int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) CreatedTimeMs_Eq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) CreatedTimeMs_NotEq(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) CreatedTimeMs_LT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) CreatedTimeMs_LE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) CreatedTimeMs_GT(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) CreatedTimeMs_GE(val int) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__OldMessage_Updater) Or() *__OldMessage_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__OldMessage_Updater) Id_In(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) Id_Ins(ins ...int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) Id_NotIn(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) Id_Eq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Id_NotEq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Id_LT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Id_LE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Id_GT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Id_GE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Updater) Uid_In(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Uid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) Uid_Ins(ins ...int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Uid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) Uid_NotIn(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Uid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) Uid_Eq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Uid_NotEq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Uid_LT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Uid_LE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Uid_GT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Uid_GE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Updater) UserId_In(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) UserId_Ins(ins ...int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) UserId_NotIn(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) UserId_Eq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) UserId_NotEq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) UserId_LT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) UserId_LE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) UserId_GT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) UserId_GE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Updater) MessageType_In(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) MessageType_Ins(ins ...int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) MessageType_NotIn(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) MessageType_Eq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MessageType_NotEq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MessageType_LT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MessageType_LE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MessageType_GT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MessageType_GE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Updater) RoomType_In(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) RoomType_Ins(ins ...int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) RoomType_NotIn(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) RoomType_Eq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) RoomType_NotEq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) RoomType_LT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) RoomType_LE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) RoomType_GT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) RoomType_GE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Updater) MsgFileId_In(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) MsgFileId_Ins(ins ...int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) MsgFileId_NotIn(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) MsgFileId_Eq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MsgFileId_NotEq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MsgFileId_LT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MsgFileId_LE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MsgFileId_GT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MsgFileId_GE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Updater) CreatedTimeMs_In(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) CreatedTimeMs_Ins(ins ...int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) CreatedTimeMs_NotIn(ins []int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) CreatedTimeMs_Eq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) CreatedTimeMs_NotEq(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) CreatedTimeMs_LT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) CreatedTimeMs_LE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) CreatedTimeMs_GT(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) CreatedTimeMs_GE(val int) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__OldMessage_Selector) Or() *__OldMessage_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__OldMessage_Selector) Id_In(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) Id_Ins(ins ...int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) Id_NotIn(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) Id_Eq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Id_NotEq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Id_LT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Id_LE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Id_GT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Id_GE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Selector) Uid_In(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Uid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) Uid_Ins(ins ...int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Uid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) Uid_NotIn(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Uid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) Uid_Eq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Uid_NotEq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Uid_LT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Uid_LE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Uid_GT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Uid_GE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Uid >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Selector) UserId_In(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) UserId_Ins(ins ...int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) UserId_NotIn(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) UserId_Eq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) UserId_NotEq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) UserId_LT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) UserId_LE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) UserId_GT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) UserId_GE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Selector) MessageType_In(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) MessageType_Ins(ins ...int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) MessageType_NotIn(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) MessageType_Eq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MessageType_NotEq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MessageType_LT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MessageType_LE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MessageType_GT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MessageType_GE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Selector) RoomType_In(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) RoomType_Ins(ins ...int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) RoomType_NotIn(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) RoomType_Eq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) RoomType_NotEq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) RoomType_LT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) RoomType_LE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) RoomType_GT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) RoomType_GE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Selector) MsgFileId_In(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) MsgFileId_Ins(ins ...int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) MsgFileId_NotIn(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) MsgFileId_Eq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MsgFileId_NotEq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MsgFileId_LT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MsgFileId_LE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MsgFileId_GT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MsgFileId_GE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Selector) CreatedTimeMs_In(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) CreatedTimeMs_Ins(ins ...int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) CreatedTimeMs_NotIn(ins []int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) CreatedTimeMs_Eq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) CreatedTimeMs_NotEq(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) CreatedTimeMs_LT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) CreatedTimeMs_LE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) CreatedTimeMs_GT(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) CreatedTimeMs_GE(val int) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__OldMessage_Deleter) MessageKey_In(ins []string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) MessageKey_NotIn(ins []string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Deleter) MessageKey_Like(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) MessageKey_Eq(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) MessageKey_NotEq(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Deleter) RoomKey_In(ins []string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) RoomKey_NotIn(ins []string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Deleter) RoomKey_Like(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) RoomKey_Eq(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) RoomKey_NotEq(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Deleter) Data64_In(ins []string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data64 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) Data64_NotIn(ins []string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data64 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Deleter) Data64_Like(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data64 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) Data64_Eq(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data64 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) Data64_NotEq(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data64 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Deleter) DataJson_In(ins []string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Deleter) DataJson_NotIn(ins []string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Deleter) DataJson_Like(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Deleter) DataJson_Eq(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Deleter) DataJson_NotEq(val string) *__OldMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__OldMessage_Updater) MessageKey_In(ins []string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) MessageKey_NotIn(ins []string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Updater) MessageKey_Like(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) MessageKey_Eq(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) MessageKey_NotEq(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Updater) RoomKey_In(ins []string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) RoomKey_NotIn(ins []string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Updater) RoomKey_Like(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) RoomKey_Eq(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) RoomKey_NotEq(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Updater) Data64_In(ins []string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data64 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) Data64_NotIn(ins []string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data64 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Updater) Data64_Like(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data64 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) Data64_Eq(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data64 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) Data64_NotEq(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data64 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Updater) DataJson_In(ins []string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Updater) DataJson_NotIn(ins []string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Updater) DataJson_Like(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Updater) DataJson_Eq(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Updater) DataJson_NotEq(val string) *__OldMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__OldMessage_Selector) MessageKey_In(ins []string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) MessageKey_NotIn(ins []string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Selector) MessageKey_Like(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) MessageKey_Eq(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) MessageKey_NotEq(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Selector) RoomKey_In(ins []string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) RoomKey_NotIn(ins []string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Selector) RoomKey_Like(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) RoomKey_Eq(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) RoomKey_NotEq(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Selector) Data64_In(ins []string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data64 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) Data64_NotIn(ins []string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Data64 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Selector) Data64_Like(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data64 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) Data64_Eq(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data64 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) Data64_NotEq(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Data64 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__OldMessage_Selector) DataJson_In(ins []string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__OldMessage_Selector) DataJson_NotIn(ins []string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DataJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__OldMessage_Selector) DataJson_Like(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__OldMessage_Selector) DataJson_Eq(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__OldMessage_Selector) DataJson_NotEq(val string) *__OldMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DataJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__OldMessage_Updater) Id(newVal int) *__OldMessage_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__OldMessage_Updater) Id_Increment(count int) *__OldMessage_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__OldMessage_Updater) Uid(newVal int) *__OldMessage_Updater {
	u.updates[" Uid = ? "] = newVal
	return u
}

func (u *__OldMessage_Updater) Uid_Increment(count int) *__OldMessage_Updater {
	if count > 0 {
		u.updates[" Uid = Uid+? "] = count
	}

	if count < 0 {
		u.updates[" Uid = Uid-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__OldMessage_Updater) UserId(newVal int) *__OldMessage_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__OldMessage_Updater) UserId_Increment(count int) *__OldMessage_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__OldMessage_Updater) MessageKey(newVal string) *__OldMessage_Updater {
	u.updates[" MessageKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__OldMessage_Updater) RoomKey(newVal string) *__OldMessage_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__OldMessage_Updater) MessageType(newVal int) *__OldMessage_Updater {
	u.updates[" MessageType = ? "] = newVal
	return u
}

func (u *__OldMessage_Updater) MessageType_Increment(count int) *__OldMessage_Updater {
	if count > 0 {
		u.updates[" MessageType = MessageType+? "] = count
	}

	if count < 0 {
		u.updates[" MessageType = MessageType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__OldMessage_Updater) RoomType(newVal int) *__OldMessage_Updater {
	u.updates[" RoomType = ? "] = newVal
	return u
}

func (u *__OldMessage_Updater) RoomType_Increment(count int) *__OldMessage_Updater {
	if count > 0 {
		u.updates[" RoomType = RoomType+? "] = count
	}

	if count < 0 {
		u.updates[" RoomType = RoomType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__OldMessage_Updater) MsgFileId(newVal int) *__OldMessage_Updater {
	u.updates[" MsgFileId = ? "] = newVal
	return u
}

func (u *__OldMessage_Updater) MsgFileId_Increment(count int) *__OldMessage_Updater {
	if count > 0 {
		u.updates[" MsgFileId = MsgFileId+? "] = count
	}

	if count < 0 {
		u.updates[" MsgFileId = MsgFileId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

//ints

//string
func (u *__OldMessage_Updater) Data64(newVal string) *__OldMessage_Updater {
	u.updates[" Data64 = ? "] = newVal
	return u
}

//ints

//string
func (u *__OldMessage_Updater) DataJson(newVal string) *__OldMessage_Updater {
	u.updates[" DataJson = ? "] = newVal
	return u
}

//ints

func (u *__OldMessage_Updater) CreatedTimeMs(newVal int) *__OldMessage_Updater {
	u.updates[" CreatedTimeMs = ? "] = newVal
	return u
}

func (u *__OldMessage_Updater) CreatedTimeMs_Increment(count int) *__OldMessage_Updater {
	if count > 0 {
		u.updates[" CreatedTimeMs = CreatedTimeMs+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTimeMs = CreatedTimeMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__OldMessage_Selector) OrderBy_Id_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_Id_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__OldMessage_Selector) Select_Id() *__OldMessage_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__OldMessage_Selector) OrderBy_Uid_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY Uid DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_Uid_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY Uid ASC "
	return u
}

func (u *__OldMessage_Selector) Select_Uid() *__OldMessage_Selector {
	u.selectCol = "Uid"
	return u
}

func (u *__OldMessage_Selector) OrderBy_UserId_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_UserId_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__OldMessage_Selector) Select_UserId() *__OldMessage_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__OldMessage_Selector) OrderBy_MessageKey_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY MessageKey DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_MessageKey_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY MessageKey ASC "
	return u
}

func (u *__OldMessage_Selector) Select_MessageKey() *__OldMessage_Selector {
	u.selectCol = "MessageKey"
	return u
}

func (u *__OldMessage_Selector) OrderBy_RoomKey_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_RoomKey_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__OldMessage_Selector) Select_RoomKey() *__OldMessage_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__OldMessage_Selector) OrderBy_MessageType_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY MessageType DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_MessageType_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY MessageType ASC "
	return u
}

func (u *__OldMessage_Selector) Select_MessageType() *__OldMessage_Selector {
	u.selectCol = "MessageType"
	return u
}

func (u *__OldMessage_Selector) OrderBy_RoomType_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY RoomType DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_RoomType_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY RoomType ASC "
	return u
}

func (u *__OldMessage_Selector) Select_RoomType() *__OldMessage_Selector {
	u.selectCol = "RoomType"
	return u
}

func (u *__OldMessage_Selector) OrderBy_MsgFileId_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY MsgFileId DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_MsgFileId_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY MsgFileId ASC "
	return u
}

func (u *__OldMessage_Selector) Select_MsgFileId() *__OldMessage_Selector {
	u.selectCol = "MsgFileId"
	return u
}

func (u *__OldMessage_Selector) OrderBy_DataPB_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY DataPB DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_DataPB_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY DataPB ASC "
	return u
}

func (u *__OldMessage_Selector) Select_DataPB() *__OldMessage_Selector {
	u.selectCol = "DataPB"
	return u
}

func (u *__OldMessage_Selector) OrderBy_Data64_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY Data64 DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_Data64_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY Data64 ASC "
	return u
}

func (u *__OldMessage_Selector) Select_Data64() *__OldMessage_Selector {
	u.selectCol = "Data64"
	return u
}

func (u *__OldMessage_Selector) OrderBy_DataJson_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY DataJson DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_DataJson_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY DataJson ASC "
	return u
}

func (u *__OldMessage_Selector) Select_DataJson() *__OldMessage_Selector {
	u.selectCol = "DataJson"
	return u
}

func (u *__OldMessage_Selector) OrderBy_CreatedTimeMs_Desc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY CreatedTimeMs DESC "
	return u
}

func (u *__OldMessage_Selector) OrderBy_CreatedTimeMs_Asc() *__OldMessage_Selector {
	u.orderBy = " ORDER BY CreatedTimeMs ASC "
	return u
}

func (u *__OldMessage_Selector) Select_CreatedTimeMs() *__OldMessage_Selector {
	u.selectCol = "CreatedTimeMs"
	return u
}

func (u *__OldMessage_Selector) Limit(num int) *__OldMessage_Selector {
	u.limit = num
	return u
}

func (u *__OldMessage_Selector) Offset(num int) *__OldMessage_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__OldMessage_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.old_messages"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__OldMessage_Selector) GetRow(db *sqlx.DB) (*OldMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &OldMessage{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnOldMessage_LoadOne(row)

	return row, nil
}

func (u *__OldMessage_Selector) GetRows(db *sqlx.DB) ([]*OldMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*OldMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnOldMessage_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__OldMessage_Selector) GetRows2(db *sqlx.DB) ([]OldMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*OldMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnOldMessage_LoadMany(rows)

	rows2 := make([]OldMessage, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__OldMessage_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__OldMessage_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__OldMessage_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__OldMessage_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__OldMessage_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.old_messages SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__OldMessage_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.old_messages WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  OldMessage ////////////////

func MassInsert_OldMessage(rows []OldMessage, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.old_messages (" +
		"Uid, UserId, MessageKey, RoomKey, MessageType, RoomType, MsgFileId, DataPB, Data64, DataJson, CreatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Uid)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.MessageType)
		vals = append(vals, row.RoomType)
		vals = append(vals, row.MsgFileId)
		vals = append(vals, row.DataPB)
		vals = append(vals, row.Data64)
		vals = append(vals, row.DataJson)
		vals = append(vals, row.CreatedTimeMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_OldMessage(rows []OldMessage, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.old_messages (" +
		"Uid, UserId, MessageKey, RoomKey, MessageType, RoomType, MsgFileId, DataPB, Data64, DataJson, CreatedTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Uid)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.MessageType)
		vals = append(vals, row.RoomType)
		vals = append(vals, row.MsgFileId)
		vals = append(vals, row.DataPB)
		vals = append(vals, row.Data64)
		vals = append(vals, row.DataJson)
		vals = append(vals, row.CreatedTimeMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

// OldMessageByMessageKey retrieves a row from 'ms.old_messages' as a OldMessage.
//
// Generated from index 'MessageKey'.
func OldMessageByMessageKey(db XODB, messageKey string) (*OldMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Uid, UserId, MessageKey, RoomKey, MessageType, RoomType, MsgFileId, DataPB, Data64, DataJson, CreatedTimeMs ` +
		`FROM ms.old_messages ` +
		`WHERE MessageKey = ?`

	// run query
	XOLog(sqlstr, messageKey)
	om := OldMessage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, messageKey).Scan(&om.Id, &om.Uid, &om.UserId, &om.MessageKey, &om.RoomKey, &om.MessageType, &om.RoomType, &om.MsgFileId, &om.DataPB, &om.Data64, &om.DataJson, &om.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnOldMessage_LoadOne(&om)

	return &om, nil
}

// OldMessageById retrieves a row from 'ms.old_messages' as a OldMessage.
//
// Generated from index 'old_messages_Id_pkey'.
func OldMessageById(db XODB, id int) (*OldMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Uid, UserId, MessageKey, RoomKey, MessageType, RoomType, MsgFileId, DataPB, Data64, DataJson, CreatedTimeMs ` +
		`FROM ms.old_messages ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	om := OldMessage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&om.Id, &om.Uid, &om.UserId, &om.MessageKey, &om.RoomKey, &om.MessageType, &om.RoomType, &om.MsgFileId, &om.DataPB, &om.Data64, &om.DataJson, &om.CreatedTimeMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnOldMessage_LoadOne(&om)

	return &om, nil
}
