// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// GroupToMessage represents a row from 'ms.group_to_message'.

// Manualy copy this to project
type GroupToMessage__ struct {
	Id         int `json:"Id"`         // Id -
	GroupId    int `json:"GroupId"`    // GroupId -
	MessageId  int `json:"MessageId"`  // MessageId -
	CreatedMs  int `json:"CreatedMs"`  // CreatedMs -
	StatusEnum int `json:"StatusEnum"` // StatusEnum -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GroupToMessage exists in the database.
func (gtm *GroupToMessage) Exists() bool {
	return gtm._exists
}

// Deleted provides information if the GroupToMessage has been deleted from the database.
func (gtm *GroupToMessage) Deleted() bool {
	return gtm._deleted
}

// Insert inserts the GroupToMessage to the database.
func (gtm *GroupToMessage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gtm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.group_to_message (` +
		`GroupId, MessageId, CreatedMs, StatusEnum` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gtm.GroupId, gtm.MessageId, gtm.CreatedMs, gtm.StatusEnum)
	res, err := db.Exec(sqlstr, gtm.GroupId, gtm.MessageId, gtm.CreatedMs, gtm.StatusEnum)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	gtm.Id = int(id)
	gtm._exists = true

	OnGroupToMessage_AfterInsert(gtm)

	return nil
}

// Insert inserts the GroupToMessage to the database.
func (gtm *GroupToMessage) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.group_to_message (` +
		`GroupId, MessageId, CreatedMs, StatusEnum` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gtm.GroupId, gtm.MessageId, gtm.CreatedMs, gtm.StatusEnum)
	res, err := db.Exec(sqlstr, gtm.GroupId, gtm.MessageId, gtm.CreatedMs, gtm.StatusEnum)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	gtm.Id = int(id)
	gtm._exists = true

	OnGroupToMessage_AfterInsert(gtm)

	return nil
}

// Update updates the GroupToMessage in the database.
func (gtm *GroupToMessage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gtm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gtm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.group_to_message SET ` +
		`GroupId = ?, MessageId = ?, CreatedMs = ?, StatusEnum = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, gtm.GroupId, gtm.MessageId, gtm.CreatedMs, gtm.StatusEnum, gtm.Id)
	_, err = db.Exec(sqlstr, gtm.GroupId, gtm.MessageId, gtm.CreatedMs, gtm.StatusEnum, gtm.Id)

	XOLogErr(err)
	OnGroupToMessage_AfterUpdate(gtm)

	return err
}

// Save saves the GroupToMessage to the database.
func (gtm *GroupToMessage) Save(db XODB) error {
	if gtm.Exists() {
		return gtm.Update(db)
	}

	return gtm.Replace(db)
}

// Delete deletes the GroupToMessage from the database.
func (gtm *GroupToMessage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gtm._exists {
		return nil
	}

	// if deleted, bail
	if gtm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.group_to_message WHERE Id = ?`

	// run query
	XOLog(sqlstr, gtm.Id)
	_, err = db.Exec(sqlstr, gtm.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	gtm._deleted = true

	OnGroupToMessage_AfterDelete(gtm)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __GroupToMessage_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __GroupToMessage_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __GroupToMessage_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewGroupToMessage_Deleter() *__GroupToMessage_Deleter {
	d := __GroupToMessage_Deleter{whereSep: " AND "}
	return &d
}

func NewGroupToMessage_Updater() *__GroupToMessage_Updater {
	u := __GroupToMessage_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewGroupToMessage_Selector() *__GroupToMessage_Selector {
	u := __GroupToMessage_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__GroupToMessage_Deleter) Or() *__GroupToMessage_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__GroupToMessage_Deleter) Id_In(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) Id_Ins(ins ...int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) Id_NotIn(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Deleter) Id_Eq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) Id_NotEq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) Id_LT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) Id_LE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) Id_GT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) Id_GE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Deleter) GroupId_In(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) GroupId_Ins(ins ...int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) GroupId_NotIn(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Deleter) GroupId_Eq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) GroupId_NotEq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) GroupId_LT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) GroupId_LE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) GroupId_GT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) GroupId_GE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Deleter) MessageId_In(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) MessageId_Ins(ins ...int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) MessageId_NotIn(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Deleter) MessageId_Eq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) MessageId_NotEq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) MessageId_LT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) MessageId_LE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) MessageId_GT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) MessageId_GE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Deleter) CreatedMs_In(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) CreatedMs_Ins(ins ...int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) CreatedMs_NotIn(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Deleter) CreatedMs_Eq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) CreatedMs_NotEq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) CreatedMs_LT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) CreatedMs_LE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) CreatedMs_GT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) CreatedMs_GE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Deleter) StatusEnum_In(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) StatusEnum_Ins(ins ...int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Deleter) StatusEnum_NotIn(ins []int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Deleter) StatusEnum_Eq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) StatusEnum_NotEq(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) StatusEnum_LT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) StatusEnum_LE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) StatusEnum_GT(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Deleter) StatusEnum_GE(val int) *__GroupToMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__GroupToMessage_Updater) Or() *__GroupToMessage_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__GroupToMessage_Updater) Id_In(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) Id_Ins(ins ...int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) Id_NotIn(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Updater) Id_Eq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) Id_NotEq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) Id_LT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) Id_LE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) Id_GT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) Id_GE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Updater) GroupId_In(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) GroupId_Ins(ins ...int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) GroupId_NotIn(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Updater) GroupId_Eq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) GroupId_NotEq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) GroupId_LT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) GroupId_LE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) GroupId_GT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) GroupId_GE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Updater) MessageId_In(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) MessageId_Ins(ins ...int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) MessageId_NotIn(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Updater) MessageId_Eq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) MessageId_NotEq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) MessageId_LT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) MessageId_LE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) MessageId_GT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) MessageId_GE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Updater) CreatedMs_In(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) CreatedMs_Ins(ins ...int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) CreatedMs_NotIn(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Updater) CreatedMs_Eq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) CreatedMs_NotEq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) CreatedMs_LT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) CreatedMs_LE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) CreatedMs_GT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) CreatedMs_GE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Updater) StatusEnum_In(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) StatusEnum_Ins(ins ...int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Updater) StatusEnum_NotIn(ins []int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Updater) StatusEnum_Eq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) StatusEnum_NotEq(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) StatusEnum_LT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) StatusEnum_LE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) StatusEnum_GT(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Updater) StatusEnum_GE(val int) *__GroupToMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__GroupToMessage_Selector) Or() *__GroupToMessage_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__GroupToMessage_Selector) Id_In(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) Id_Ins(ins ...int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) Id_NotIn(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Selector) Id_Eq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) Id_NotEq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) Id_LT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) Id_LE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) Id_GT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) Id_GE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Selector) GroupId_In(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) GroupId_Ins(ins ...int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) GroupId_NotIn(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Selector) GroupId_Eq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) GroupId_NotEq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) GroupId_LT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) GroupId_LE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) GroupId_GT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) GroupId_GE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Selector) MessageId_In(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) MessageId_Ins(ins ...int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) MessageId_NotIn(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Selector) MessageId_Eq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) MessageId_NotEq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) MessageId_LT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) MessageId_LE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) MessageId_GT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) MessageId_GE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Selector) CreatedMs_In(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) CreatedMs_Ins(ins ...int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) CreatedMs_NotIn(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Selector) CreatedMs_Eq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) CreatedMs_NotEq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) CreatedMs_LT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) CreatedMs_LE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) CreatedMs_GT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) CreatedMs_GE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__GroupToMessage_Selector) StatusEnum_In(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) StatusEnum_Ins(ins ...int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__GroupToMessage_Selector) StatusEnum_NotIn(ins []int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__GroupToMessage_Selector) StatusEnum_Eq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) StatusEnum_NotEq(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) StatusEnum_LT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) StatusEnum_LE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) StatusEnum_GT(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__GroupToMessage_Selector) StatusEnum_GE(val int) *__GroupToMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__GroupToMessage_Updater) Id(newVal int) *__GroupToMessage_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__GroupToMessage_Updater) Id_Increment(count int) *__GroupToMessage_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GroupToMessage_Updater) GroupId(newVal int) *__GroupToMessage_Updater {
	u.updates[" GroupId = ? "] = newVal
	return u
}

func (u *__GroupToMessage_Updater) GroupId_Increment(count int) *__GroupToMessage_Updater {
	if count > 0 {
		u.updates[" GroupId = GroupId+? "] = count
	}

	if count < 0 {
		u.updates[" GroupId = GroupId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GroupToMessage_Updater) MessageId(newVal int) *__GroupToMessage_Updater {
	u.updates[" MessageId = ? "] = newVal
	return u
}

func (u *__GroupToMessage_Updater) MessageId_Increment(count int) *__GroupToMessage_Updater {
	if count > 0 {
		u.updates[" MessageId = MessageId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageId = MessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GroupToMessage_Updater) CreatedMs(newVal int) *__GroupToMessage_Updater {
	u.updates[" CreatedMs = ? "] = newVal
	return u
}

func (u *__GroupToMessage_Updater) CreatedMs_Increment(count int) *__GroupToMessage_Updater {
	if count > 0 {
		u.updates[" CreatedMs = CreatedMs+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedMs = CreatedMs-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__GroupToMessage_Updater) StatusEnum(newVal int) *__GroupToMessage_Updater {
	u.updates[" StatusEnum = ? "] = newVal
	return u
}

func (u *__GroupToMessage_Updater) StatusEnum_Increment(count int) *__GroupToMessage_Updater {
	if count > 0 {
		u.updates[" StatusEnum = StatusEnum+? "] = count
	}

	if count < 0 {
		u.updates[" StatusEnum = StatusEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__GroupToMessage_Selector) OrderBy_Id_Desc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__GroupToMessage_Selector) OrderBy_Id_Asc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__GroupToMessage_Selector) Select_Id() *__GroupToMessage_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__GroupToMessage_Selector) OrderBy_GroupId_Desc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY GroupId DESC "
	return u
}

func (u *__GroupToMessage_Selector) OrderBy_GroupId_Asc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY GroupId ASC "
	return u
}

func (u *__GroupToMessage_Selector) Select_GroupId() *__GroupToMessage_Selector {
	u.selectCol = "GroupId"
	return u
}

func (u *__GroupToMessage_Selector) OrderBy_MessageId_Desc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__GroupToMessage_Selector) OrderBy_MessageId_Asc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__GroupToMessage_Selector) Select_MessageId() *__GroupToMessage_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__GroupToMessage_Selector) OrderBy_CreatedMs_Desc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY CreatedMs DESC "
	return u
}

func (u *__GroupToMessage_Selector) OrderBy_CreatedMs_Asc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY CreatedMs ASC "
	return u
}

func (u *__GroupToMessage_Selector) Select_CreatedMs() *__GroupToMessage_Selector {
	u.selectCol = "CreatedMs"
	return u
}

func (u *__GroupToMessage_Selector) OrderBy_StatusEnum_Desc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY StatusEnum DESC "
	return u
}

func (u *__GroupToMessage_Selector) OrderBy_StatusEnum_Asc() *__GroupToMessage_Selector {
	u.orderBy = " ORDER BY StatusEnum ASC "
	return u
}

func (u *__GroupToMessage_Selector) Select_StatusEnum() *__GroupToMessage_Selector {
	u.selectCol = "StatusEnum"
	return u
}

func (u *__GroupToMessage_Selector) Limit(num int) *__GroupToMessage_Selector {
	u.limit = num
	return u
}

func (u *__GroupToMessage_Selector) Offset(num int) *__GroupToMessage_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__GroupToMessage_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.group_to_message"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__GroupToMessage_Selector) GetRow(db *sqlx.DB) (*GroupToMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &GroupToMessage{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnGroupToMessage_LoadOne(row)

	return row, nil
}

func (u *__GroupToMessage_Selector) GetRows(db *sqlx.DB) ([]*GroupToMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*GroupToMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGroupToMessage_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__GroupToMessage_Selector) GetRows2(db *sqlx.DB) ([]GroupToMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*GroupToMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGroupToMessage_LoadMany(rows)

	rows2 := make([]GroupToMessage, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__GroupToMessage_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__GroupToMessage_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__GroupToMessage_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__GroupToMessage_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__GroupToMessage_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.group_to_message SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__GroupToMessage_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.group_to_message WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  GroupToMessage ////////////////
func MassInsert_GroupToMessage(rows []GroupToMessage, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.group_to_message (" +
		"GroupId, MessageId, CreatedMs, StatusEnum" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.CreatedMs)
		vals = append(vals, row.StatusEnum)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_GroupToMessage(rows []GroupToMessage, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.group_to_message (" +
		"GroupId, MessageId, CreatedMs, StatusEnum" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.CreatedMs)
		vals = append(vals, row.StatusEnum)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// GroupToMessageById retrieves a row from 'ms.group_to_message' as a GroupToMessage.
//
// Generated from index 'group_to_message_Id_pkey'.
func GroupToMessageById(db XODB, id int) (*GroupToMessage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, GroupId, MessageId, CreatedMs, StatusEnum ` +
		`FROM ms.group_to_message ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	gtm := GroupToMessage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&gtm.Id, &gtm.GroupId, &gtm.MessageId, &gtm.CreatedMs, &gtm.StatusEnum)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnGroupToMessage_LoadOne(&gtm)

	return &gtm, nil
}
