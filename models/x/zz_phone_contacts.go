package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// PhoneContact represents a row from 'ms.phone_contacts'.

// Manualy copy this to project
type PhoneContact__ struct {
	Id                    int    `json:"Id"`                    // Id -
	PhoneDisplayName      string `json:"PhoneDisplayName"`      // PhoneDisplayName -
	PhoneFamilyName       string `json:"PhoneFamilyName"`       // PhoneFamilyName -
	PhoneNumber           string `json:"PhoneNumber"`           // PhoneNumber -
	PhoneNormalizedNumber string `json:"PhoneNormalizedNumber"` // PhoneNormalizedNumber -
	PhoneContactRowId     int    `json:"PhoneContactRowId"`     // PhoneContactRowId -
	UserId                int    `json:"UserId"`                // UserId -
	DeviceUuidId          int    `json:"DeviceUuidId"`          // DeviceUuidId -
	CreatedTime           int    `json:"CreatedTime"`           // CreatedTime -
	UpdatedTime           int    `json:"UpdatedTime"`           // UpdatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PhoneContact exists in the database.
func (pc *PhoneContact) Exists() bool {
	return pc._exists
}

// Deleted provides information if the PhoneContact has been deleted from the database.
func (pc *PhoneContact) Deleted() bool {
	return pc._deleted
}

// Insert inserts the PhoneContact to the database.
func (pc *PhoneContact) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.phone_contacts (` +
		`PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime)
	res, err := db.Exec(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	pc.Id = int(id)
	pc._exists = true

	OnPhoneContact_AfterInsert(pc)

	return nil
}

// Insert inserts the PhoneContact to the database.
func (pc *PhoneContact) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.phone_contacts (` +
		`PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime)
	res, err := db.Exec(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	pc.Id = int(id)
	pc._exists = true

	OnPhoneContact_AfterInsert(pc)

	return nil
}

// Update updates the PhoneContact in the database.
func (pc *PhoneContact) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.phone_contacts SET ` +
		`PhoneDisplayName = ?, PhoneFamilyName = ?, PhoneNumber = ?, PhoneNormalizedNumber = ?, PhoneContactRowId = ?, UserId = ?, DeviceUuidId = ?, CreatedTime = ?, UpdatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime, pc.Id)
	_, err = db.Exec(sqlstr, pc.PhoneDisplayName, pc.PhoneFamilyName, pc.PhoneNumber, pc.PhoneNormalizedNumber, pc.PhoneContactRowId, pc.UserId, pc.DeviceUuidId, pc.CreatedTime, pc.UpdatedTime, pc.Id)

	XOLogErr(err)
	OnPhoneContact_AfterUpdate(pc)

	return err
}

// Save saves the PhoneContact to the database.
func (pc *PhoneContact) Save(db XODB) error {
	if pc.Exists() {
		return pc.Update(db)
	}

	return pc.Replace(db)
}

// Delete deletes the PhoneContact from the database.
func (pc *PhoneContact) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return nil
	}

	// if deleted, bail
	if pc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.phone_contacts WHERE Id = ?`

	// run query
	XOLog(sqlstr, pc.Id)
	_, err = db.Exec(sqlstr, pc.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	pc._deleted = true

	OnPhoneContact_AfterDelete(pc)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __PhoneContact_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __PhoneContact_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __PhoneContact_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPhoneContact_Deleter() *__PhoneContact_Deleter {
	d := __PhoneContact_Deleter{whereSep: " AND "}
	return &d
}

func NewPhoneContact_Updater() *__PhoneContact_Updater {
	u := __PhoneContact_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPhoneContact_Selector() *__PhoneContact_Selector {
	u := __PhoneContact_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__PhoneContact_Deleter) Or() *__PhoneContact_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PhoneContact_Deleter) Id_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) Id_Ins(ins ...int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) Id_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) Id_Eq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_NotEq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneContactRowId_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneContactRowId_Ins(ins ...int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneContactRowId_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_Eq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_NotEq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneContactRowId_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) UserId_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) UserId_Ins(ins ...int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) UserId_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) UserId_Eq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_NotEq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UserId_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) DeviceUuidId_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) DeviceUuidId_Ins(ins ...int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) DeviceUuidId_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) DeviceUuidId_Eq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_NotEq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) DeviceUuidId_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) CreatedTime_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) CreatedTime_Ins(ins ...int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) CreatedTime_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) CreatedTime_Eq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_NotEq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) CreatedTime_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) UpdatedTime_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) UpdatedTime_Ins(ins ...int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) UpdatedTime_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) UpdatedTime_Eq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_NotEq(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) UpdatedTime_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PhoneContact_Updater) Or() *__PhoneContact_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PhoneContact_Updater) Id_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) Id_Ins(ins ...int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) Id_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) Id_Eq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_NotEq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneContactRowId_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneContactRowId_Ins(ins ...int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneContactRowId_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneContactRowId_Eq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_NotEq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneContactRowId_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) UserId_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) UserId_Ins(ins ...int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) UserId_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) UserId_Eq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_NotEq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UserId_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) DeviceUuidId_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) DeviceUuidId_Ins(ins ...int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) DeviceUuidId_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) DeviceUuidId_Eq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_NotEq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) DeviceUuidId_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) CreatedTime_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) CreatedTime_Ins(ins ...int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) CreatedTime_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) CreatedTime_Eq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_NotEq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) CreatedTime_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) UpdatedTime_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) UpdatedTime_Ins(ins ...int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) UpdatedTime_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) UpdatedTime_Eq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_NotEq(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) UpdatedTime_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PhoneContact_Selector) Or() *__PhoneContact_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PhoneContact_Selector) Id_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) Id_Ins(ins ...int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) Id_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) Id_Eq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_NotEq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneContactRowId_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneContactRowId_Ins(ins ...int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneContactRowId_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneContactRowId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneContactRowId_Eq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_NotEq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneContactRowId_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneContactRowId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) UserId_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) UserId_Ins(ins ...int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) UserId_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) UserId_Eq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_NotEq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UserId_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) DeviceUuidId_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) DeviceUuidId_Ins(ins ...int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) DeviceUuidId_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuidId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) DeviceUuidId_Eq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_NotEq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) DeviceUuidId_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuidId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) CreatedTime_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) CreatedTime_Ins(ins ...int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) CreatedTime_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) CreatedTime_Eq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_NotEq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) CreatedTime_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) UpdatedTime_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) UpdatedTime_Ins(ins ...int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) UpdatedTime_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) UpdatedTime_Eq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_NotEq(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) UpdatedTime_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__PhoneContact_Deleter) PhoneDisplayName_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneDisplayName_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneDisplayName_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneDisplayName_Eq(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneDisplayName_NotEq(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneFamilyName_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneFamilyName_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneFamilyName_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneFamilyName_Eq(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneFamilyName_NotEq(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneNumber_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneNumber_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneNumber_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneNumber_Eq(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneNumber_NotEq(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneNormalizedNumber_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneNormalizedNumber_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneNormalizedNumber_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneNormalizedNumber_Eq(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) PhoneNormalizedNumber_NotEq(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PhoneContact_Updater) PhoneDisplayName_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneDisplayName_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneDisplayName_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneDisplayName_Eq(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneDisplayName_NotEq(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneFamilyName_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneFamilyName_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneFamilyName_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneFamilyName_Eq(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneFamilyName_NotEq(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneNumber_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneNumber_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneNumber_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneNumber_Eq(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneNumber_NotEq(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneNormalizedNumber_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneNormalizedNumber_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneNormalizedNumber_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneNormalizedNumber_Eq(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) PhoneNormalizedNumber_NotEq(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PhoneContact_Selector) PhoneDisplayName_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneDisplayName_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneDisplayName_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneDisplayName_Eq(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneDisplayName_NotEq(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneFamilyName_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneFamilyName_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneFamilyName_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneFamilyName_Eq(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneFamilyName_NotEq(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneNumber_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneNumber_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneNumber_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneNumber_Eq(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneNumber_NotEq(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneNormalizedNumber_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneNormalizedNumber_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneNormalizedNumber_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneNormalizedNumber_Eq(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) PhoneNormalizedNumber_NotEq(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PhoneContact_Updater) Id(newVal int) *__PhoneContact_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) Id_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__PhoneContact_Updater) PhoneDisplayName(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneDisplayName = ? "] = newVal
	return u
}

//ints

//string
func (u *__PhoneContact_Updater) PhoneFamilyName(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneFamilyName = ? "] = newVal
	return u
}

//ints

//string
func (u *__PhoneContact_Updater) PhoneNumber(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneNumber = ? "] = newVal
	return u
}

//ints

//string
func (u *__PhoneContact_Updater) PhoneNormalizedNumber(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneNormalizedNumber = ? "] = newVal
	return u
}

//ints

func (u *__PhoneContact_Updater) PhoneContactRowId(newVal int) *__PhoneContact_Updater {
	u.updates[" PhoneContactRowId = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) PhoneContactRowId_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" PhoneContactRowId = PhoneContactRowId+? "] = count
	}

	if count < 0 {
		u.updates[" PhoneContactRowId = PhoneContactRowId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PhoneContact_Updater) UserId(newVal int) *__PhoneContact_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) UserId_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PhoneContact_Updater) DeviceUuidId(newVal int) *__PhoneContact_Updater {
	u.updates[" DeviceUuidId = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) DeviceUuidId_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" DeviceUuidId = DeviceUuidId+? "] = count
	}

	if count < 0 {
		u.updates[" DeviceUuidId = DeviceUuidId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PhoneContact_Updater) CreatedTime(newVal int) *__PhoneContact_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) CreatedTime_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PhoneContact_Updater) UpdatedTime(newVal int) *__PhoneContact_Updater {
	u.updates[" UpdatedTime = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) UpdatedTime_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" UpdatedTime = UpdatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" UpdatedTime = UpdatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PhoneContact_Selector) OrderBy_Id_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_Id_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_Id() *__PhoneContact_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneDisplayName_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneDisplayName DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneDisplayName_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneDisplayName ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneDisplayName() *__PhoneContact_Selector {
	u.selectCol = "PhoneDisplayName"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneFamilyName_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneFamilyName DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneFamilyName_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneFamilyName ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneFamilyName() *__PhoneContact_Selector {
	u.selectCol = "PhoneFamilyName"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNumber_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNumber DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNumber_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNumber ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneNumber() *__PhoneContact_Selector {
	u.selectCol = "PhoneNumber"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNormalizedNumber_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNormalizedNumber DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNormalizedNumber_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNormalizedNumber ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneNormalizedNumber() *__PhoneContact_Selector {
	u.selectCol = "PhoneNormalizedNumber"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneContactRowId_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneContactRowId DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneContactRowId_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneContactRowId ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneContactRowId() *__PhoneContact_Selector {
	u.selectCol = "PhoneContactRowId"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_UserId_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_UserId_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_UserId() *__PhoneContact_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_DeviceUuidId_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY DeviceUuidId DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_DeviceUuidId_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY DeviceUuidId ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_DeviceUuidId() *__PhoneContact_Selector {
	u.selectCol = "DeviceUuidId"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_CreatedTime_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_CreatedTime_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_CreatedTime() *__PhoneContact_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_UpdatedTime_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY UpdatedTime DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_UpdatedTime_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY UpdatedTime ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_UpdatedTime() *__PhoneContact_Selector {
	u.selectCol = "UpdatedTime"
	return u
}

func (u *__PhoneContact_Selector) Limit(num int) *__PhoneContact_Selector {
	u.limit = num
	return u
}

func (u *__PhoneContact_Selector) Offset(num int) *__PhoneContact_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PhoneContact_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.phone_contacts"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PhoneContact_Selector) GetRow(db *sqlx.DB) (*PhoneContact, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &PhoneContact{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnPhoneContact_LoadOne(row)

	return row, nil
}

func (u *__PhoneContact_Selector) GetRows(db *sqlx.DB) ([]*PhoneContact, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*PhoneContact
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPhoneContact_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__PhoneContact_Selector) GetRows2(db *sqlx.DB) ([]PhoneContact, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*PhoneContact
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPhoneContact_LoadMany(rows)

	rows2 := make([]PhoneContact, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__PhoneContact_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__PhoneContact_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__PhoneContact_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__PhoneContact_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PhoneContact_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.phone_contacts SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__PhoneContact_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.phone_contacts WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PhoneContact ////////////////

func MassInsert_PhoneContact(rows []PhoneContact, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "( ms_question_mark .Columns .PrimaryKey.ColumnName }})," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.phone_contacts (" +
		"PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PhoneDisplayName)
		vals = append(vals, row.PhoneFamilyName)
		vals = append(vals, row.PhoneNumber)
		vals = append(vals, row.PhoneNormalizedNumber)
		vals = append(vals, row.PhoneContactRowId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.DeviceUuidId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_PhoneContact(rows []PhoneContact, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.phone_contacts (" +
		"PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, PhoneContactRowId, UserId, DeviceUuidId, CreatedTime, UpdatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PhoneDisplayName)
		vals = append(vals, row.PhoneFamilyName)
		vals = append(vals, row.PhoneNumber)
		vals = append(vals, row.PhoneNormalizedNumber)
		vals = append(vals, row.PhoneContactRowId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.DeviceUuidId)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.UpdatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//
