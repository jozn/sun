// Package x contains the types for schema 'ms'.
package x

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// DirectLog represents a row from 'ms.direct_log'.

// Manualy copy this to project
type DirectLog__ struct {
	Id            int    `json:"Id"`            // Id -
	ToUserId      int    `json:"ToUserId"`      // ToUserId -
	MessageId     int    `json:"MessageId"`     // MessageId -
	ChatId        int    `json:"ChatId"`        // ChatId -
	PeerUserId    int    `json:"PeerUserId"`    // PeerUserId -
	EventType     int    `json:"EventType"`     // EventType -
	RoomLogTypeId int    `json:"RoomLogTypeId"` // RoomLogTypeId -
	FromSeq       int    `json:"FromSeq"`       // FromSeq -
	ToSeq         int    `json:"ToSeq"`         // ToSeq -
	ExtraPB       []byte `json:"ExtraPB"`       // ExtraPB -
	ExtraJson     string `json:"ExtraJson"`     // ExtraJson -
	AtTimeMs      int    `json:"AtTimeMs"`      // AtTimeMs -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DirectLog exists in the database.
func (dl *DirectLog) Exists() bool {
	return dl._exists
}

// Deleted provides information if the DirectLog has been deleted from the database.
func (dl *DirectLog) Deleted() bool {
	return dl._deleted
}

// Insert inserts the DirectLog to the database.
func (dl *DirectLog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.direct_log (` +
		`ToUserId, MessageId, ChatId, PeerUserId, EventType, RoomLogTypeId, FromSeq, ToSeq, ExtraPB, ExtraJson, AtTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, dl.ToUserId, dl.MessageId, dl.ChatId, dl.PeerUserId, dl.EventType, dl.RoomLogTypeId, dl.FromSeq, dl.ToSeq, dl.ExtraPB, dl.ExtraJson, dl.AtTimeMs)
	res, err := db.Exec(sqlstr, dl.ToUserId, dl.MessageId, dl.ChatId, dl.PeerUserId, dl.EventType, dl.RoomLogTypeId, dl.FromSeq, dl.ToSeq, dl.ExtraPB, dl.ExtraJson, dl.AtTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	dl.Id = int(id)
	dl._exists = true

	OnDirectLog_AfterInsert(dl)

	return nil
}

// Insert inserts the DirectLog to the database.
func (dl *DirectLog) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO ms.direct_log (` +
		`ToUserId, MessageId, ChatId, PeerUserId, EventType, RoomLogTypeId, FromSeq, ToSeq, ExtraPB, ExtraJson, AtTimeMs` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, dl.ToUserId, dl.MessageId, dl.ChatId, dl.PeerUserId, dl.EventType, dl.RoomLogTypeId, dl.FromSeq, dl.ToSeq, dl.ExtraPB, dl.ExtraJson, dl.AtTimeMs)
	res, err := db.Exec(sqlstr, dl.ToUserId, dl.MessageId, dl.ChatId, dl.PeerUserId, dl.EventType, dl.RoomLogTypeId, dl.FromSeq, dl.ToSeq, dl.ExtraPB, dl.ExtraJson, dl.AtTimeMs)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	dl.Id = int(id)
	dl._exists = true

	OnDirectLog_AfterInsert(dl)

	return nil
}

// Update updates the DirectLog in the database.
func (dl *DirectLog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if dl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.direct_log SET ` +
		`ToUserId = ?, MessageId = ?, ChatId = ?, PeerUserId = ?, EventType = ?, RoomLogTypeId = ?, FromSeq = ?, ToSeq = ?, ExtraPB = ?, ExtraJson = ?, AtTimeMs = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, dl.ToUserId, dl.MessageId, dl.ChatId, dl.PeerUserId, dl.EventType, dl.RoomLogTypeId, dl.FromSeq, dl.ToSeq, dl.ExtraPB, dl.ExtraJson, dl.AtTimeMs, dl.Id)
	_, err = db.Exec(sqlstr, dl.ToUserId, dl.MessageId, dl.ChatId, dl.PeerUserId, dl.EventType, dl.RoomLogTypeId, dl.FromSeq, dl.ToSeq, dl.ExtraPB, dl.ExtraJson, dl.AtTimeMs, dl.Id)

	XOLogErr(err)
	OnDirectLog_AfterUpdate(dl)

	return err
}

// Save saves the DirectLog to the database.
func (dl *DirectLog) Save(db XODB) error {
	if dl.Exists() {
		return dl.Update(db)
	}

	return dl.Replace(db)
}

// Delete deletes the DirectLog from the database.
func (dl *DirectLog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dl._exists {
		return nil
	}

	// if deleted, bail
	if dl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.direct_log WHERE Id = ?`

	// run query
	XOLog(sqlstr, dl.Id)
	_, err = db.Exec(sqlstr, dl.Id)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	dl._deleted = true

	OnDirectLog_AfterDelete(dl)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __DirectLog_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __DirectLog_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __DirectLog_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewDirectLog_Deleter() *__DirectLog_Deleter {
	d := __DirectLog_Deleter{whereSep: " AND "}
	return &d
}

func NewDirectLog_Updater() *__DirectLog_Updater {
	u := __DirectLog_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewDirectLog_Selector() *__DirectLog_Selector {
	u := __DirectLog_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__DirectLog_Deleter) Or() *__DirectLog_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__DirectLog_Deleter) Id_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) Id_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) Id_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) Id_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) Id_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) Id_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) Id_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) Id_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) Id_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Deleter) ToUserId_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) ToUserId_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) ToUserId_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) ToUserId_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToUserId_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToUserId_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToUserId_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToUserId_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToUserId_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Deleter) MessageId_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) MessageId_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) MessageId_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) MessageId_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) MessageId_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) MessageId_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) MessageId_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) MessageId_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) MessageId_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Deleter) ChatId_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) ChatId_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) ChatId_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) ChatId_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ChatId_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ChatId_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ChatId_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ChatId_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ChatId_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Deleter) PeerUserId_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) PeerUserId_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) PeerUserId_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) PeerUserId_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) PeerUserId_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) PeerUserId_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) PeerUserId_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) PeerUserId_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) PeerUserId_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Deleter) EventType_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) EventType_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) EventType_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) EventType_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) EventType_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) EventType_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) EventType_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) EventType_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) EventType_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Deleter) RoomLogTypeId_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomLogTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) RoomLogTypeId_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomLogTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) RoomLogTypeId_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomLogTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) RoomLogTypeId_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) RoomLogTypeId_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) RoomLogTypeId_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) RoomLogTypeId_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) RoomLogTypeId_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) RoomLogTypeId_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Deleter) FromSeq_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) FromSeq_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) FromSeq_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) FromSeq_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) FromSeq_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) FromSeq_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) FromSeq_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) FromSeq_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) FromSeq_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Deleter) ToSeq_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) ToSeq_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) ToSeq_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) ToSeq_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToSeq_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToSeq_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToSeq_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToSeq_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ToSeq_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Deleter) AtTimeMs_In(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) AtTimeMs_Ins(ins ...int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) AtTimeMs_NotIn(ins []int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) AtTimeMs_Eq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) AtTimeMs_NotEq(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) AtTimeMs_LT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) AtTimeMs_LE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) AtTimeMs_GT(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) AtTimeMs_GE(val int) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__DirectLog_Updater) Or() *__DirectLog_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__DirectLog_Updater) Id_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) Id_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) Id_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) Id_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) Id_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) Id_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) Id_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) Id_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) Id_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Updater) ToUserId_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) ToUserId_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) ToUserId_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) ToUserId_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToUserId_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToUserId_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToUserId_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToUserId_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToUserId_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Updater) MessageId_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) MessageId_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) MessageId_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) MessageId_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) MessageId_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) MessageId_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) MessageId_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) MessageId_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) MessageId_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Updater) ChatId_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) ChatId_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) ChatId_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) ChatId_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ChatId_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ChatId_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ChatId_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ChatId_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ChatId_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Updater) PeerUserId_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) PeerUserId_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) PeerUserId_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) PeerUserId_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) PeerUserId_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) PeerUserId_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) PeerUserId_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) PeerUserId_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) PeerUserId_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Updater) EventType_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) EventType_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) EventType_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) EventType_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) EventType_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) EventType_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) EventType_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) EventType_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) EventType_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Updater) RoomLogTypeId_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomLogTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) RoomLogTypeId_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomLogTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) RoomLogTypeId_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomLogTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) RoomLogTypeId_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) RoomLogTypeId_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) RoomLogTypeId_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) RoomLogTypeId_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) RoomLogTypeId_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) RoomLogTypeId_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Updater) FromSeq_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) FromSeq_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) FromSeq_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) FromSeq_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) FromSeq_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) FromSeq_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) FromSeq_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) FromSeq_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) FromSeq_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Updater) ToSeq_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) ToSeq_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) ToSeq_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) ToSeq_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToSeq_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToSeq_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToSeq_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToSeq_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ToSeq_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Updater) AtTimeMs_In(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) AtTimeMs_Ins(ins ...int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) AtTimeMs_NotIn(ins []int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) AtTimeMs_Eq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) AtTimeMs_NotEq(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) AtTimeMs_LT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) AtTimeMs_LE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) AtTimeMs_GT(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) AtTimeMs_GE(val int) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__DirectLog_Selector) Or() *__DirectLog_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__DirectLog_Selector) Id_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) Id_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) Id_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) Id_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) Id_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) Id_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) Id_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) Id_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) Id_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Selector) ToUserId_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) ToUserId_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) ToUserId_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) ToUserId_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToUserId_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToUserId_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToUserId_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToUserId_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToUserId_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Selector) MessageId_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) MessageId_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) MessageId_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) MessageId_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) MessageId_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) MessageId_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) MessageId_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) MessageId_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) MessageId_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Selector) ChatId_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) ChatId_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) ChatId_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) ChatId_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ChatId_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ChatId_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ChatId_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ChatId_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ChatId_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Selector) PeerUserId_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) PeerUserId_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) PeerUserId_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) PeerUserId_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) PeerUserId_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) PeerUserId_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) PeerUserId_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) PeerUserId_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) PeerUserId_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Selector) EventType_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) EventType_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) EventType_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) EventType_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) EventType_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) EventType_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) EventType_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) EventType_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) EventType_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Selector) RoomLogTypeId_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomLogTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) RoomLogTypeId_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomLogTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) RoomLogTypeId_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomLogTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) RoomLogTypeId_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) RoomLogTypeId_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) RoomLogTypeId_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) RoomLogTypeId_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) RoomLogTypeId_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) RoomLogTypeId_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomLogTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Selector) FromSeq_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) FromSeq_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) FromSeq_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) FromSeq_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) FromSeq_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) FromSeq_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) FromSeq_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) FromSeq_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) FromSeq_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Selector) ToSeq_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) ToSeq_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) ToSeq_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) ToSeq_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToSeq_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToSeq_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToSeq_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToSeq_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ToSeq_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectLog_Selector) AtTimeMs_In(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) AtTimeMs_Ins(ins ...int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) AtTimeMs_NotIn(ins []int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AtTimeMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) AtTimeMs_Eq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) AtTimeMs_NotEq(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) AtTimeMs_LT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) AtTimeMs_LE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) AtTimeMs_GT(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) AtTimeMs_GE(val int) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AtTimeMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__DirectLog_Deleter) ExtraJson_In(ins []string) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Deleter) ExtraJson_NotIn(ins []string) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectLog_Deleter) ExtraJson_Like(val string) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Deleter) ExtraJson_Eq(val string) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Deleter) ExtraJson_NotEq(val string) *__DirectLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__DirectLog_Updater) ExtraJson_In(ins []string) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Updater) ExtraJson_NotIn(ins []string) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectLog_Updater) ExtraJson_Like(val string) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Updater) ExtraJson_Eq(val string) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Updater) ExtraJson_NotEq(val string) *__DirectLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__DirectLog_Selector) ExtraJson_In(ins []string) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectLog_Selector) ExtraJson_NotIn(ins []string) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ExtraJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectLog_Selector) ExtraJson_Like(val string) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectLog_Selector) ExtraJson_Eq(val string) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectLog_Selector) ExtraJson_NotEq(val string) *__DirectLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ExtraJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__DirectLog_Updater) Id(newVal int) *__DirectLog_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) Id_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectLog_Updater) ToUserId(newVal int) *__DirectLog_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) ToUserId_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectLog_Updater) MessageId(newVal int) *__DirectLog_Updater {
	u.updates[" MessageId = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) MessageId_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" MessageId = MessageId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageId = MessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectLog_Updater) ChatId(newVal int) *__DirectLog_Updater {
	u.updates[" ChatId = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) ChatId_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" ChatId = ChatId+? "] = count
	}

	if count < 0 {
		u.updates[" ChatId = ChatId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectLog_Updater) PeerUserId(newVal int) *__DirectLog_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) PeerUserId_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" PeerUserId = PeerUserId+? "] = count
	}

	if count < 0 {
		u.updates[" PeerUserId = PeerUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectLog_Updater) EventType(newVal int) *__DirectLog_Updater {
	u.updates[" EventType = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) EventType_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" EventType = EventType+? "] = count
	}

	if count < 0 {
		u.updates[" EventType = EventType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectLog_Updater) RoomLogTypeId(newVal int) *__DirectLog_Updater {
	u.updates[" RoomLogTypeId = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) RoomLogTypeId_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" RoomLogTypeId = RoomLogTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" RoomLogTypeId = RoomLogTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectLog_Updater) FromSeq(newVal int) *__DirectLog_Updater {
	u.updates[" FromSeq = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) FromSeq_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" FromSeq = FromSeq+? "] = count
	}

	if count < 0 {
		u.updates[" FromSeq = FromSeq-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectLog_Updater) ToSeq(newVal int) *__DirectLog_Updater {
	u.updates[" ToSeq = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) ToSeq_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" ToSeq = ToSeq+? "] = count
	}

	if count < 0 {
		u.updates[" ToSeq = ToSeq-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

//ints

//string
func (u *__DirectLog_Updater) ExtraJson(newVal string) *__DirectLog_Updater {
	u.updates[" ExtraJson = ? "] = newVal
	return u
}

//ints

func (u *__DirectLog_Updater) AtTimeMs(newVal int) *__DirectLog_Updater {
	u.updates[" AtTimeMs = ? "] = newVal
	return u
}

func (u *__DirectLog_Updater) AtTimeMs_Increment(count int) *__DirectLog_Updater {
	if count > 0 {
		u.updates[" AtTimeMs = AtTimeMs+? "] = count
	}

	if count < 0 {
		u.updates[" AtTimeMs = AtTimeMs-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__DirectLog_Selector) OrderBy_Id_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_Id_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__DirectLog_Selector) Select_Id() *__DirectLog_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__DirectLog_Selector) OrderBy_ToUserId_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_ToUserId_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__DirectLog_Selector) Select_ToUserId() *__DirectLog_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__DirectLog_Selector) OrderBy_MessageId_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_MessageId_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__DirectLog_Selector) Select_MessageId() *__DirectLog_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__DirectLog_Selector) OrderBy_ChatId_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ChatId DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_ChatId_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ChatId ASC "
	return u
}

func (u *__DirectLog_Selector) Select_ChatId() *__DirectLog_Selector {
	u.selectCol = "ChatId"
	return u
}

func (u *__DirectLog_Selector) OrderBy_PeerUserId_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_PeerUserId_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__DirectLog_Selector) Select_PeerUserId() *__DirectLog_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__DirectLog_Selector) OrderBy_EventType_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY EventType DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_EventType_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY EventType ASC "
	return u
}

func (u *__DirectLog_Selector) Select_EventType() *__DirectLog_Selector {
	u.selectCol = "EventType"
	return u
}

func (u *__DirectLog_Selector) OrderBy_RoomLogTypeId_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY RoomLogTypeId DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_RoomLogTypeId_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY RoomLogTypeId ASC "
	return u
}

func (u *__DirectLog_Selector) Select_RoomLogTypeId() *__DirectLog_Selector {
	u.selectCol = "RoomLogTypeId"
	return u
}

func (u *__DirectLog_Selector) OrderBy_FromSeq_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY FromSeq DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_FromSeq_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY FromSeq ASC "
	return u
}

func (u *__DirectLog_Selector) Select_FromSeq() *__DirectLog_Selector {
	u.selectCol = "FromSeq"
	return u
}

func (u *__DirectLog_Selector) OrderBy_ToSeq_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ToSeq DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_ToSeq_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ToSeq ASC "
	return u
}

func (u *__DirectLog_Selector) Select_ToSeq() *__DirectLog_Selector {
	u.selectCol = "ToSeq"
	return u
}

func (u *__DirectLog_Selector) OrderBy_ExtraPB_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ExtraPB DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_ExtraPB_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ExtraPB ASC "
	return u
}

func (u *__DirectLog_Selector) Select_ExtraPB() *__DirectLog_Selector {
	u.selectCol = "ExtraPB"
	return u
}

func (u *__DirectLog_Selector) OrderBy_ExtraJson_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ExtraJson DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_ExtraJson_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY ExtraJson ASC "
	return u
}

func (u *__DirectLog_Selector) Select_ExtraJson() *__DirectLog_Selector {
	u.selectCol = "ExtraJson"
	return u
}

func (u *__DirectLog_Selector) OrderBy_AtTimeMs_Desc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY AtTimeMs DESC "
	return u
}

func (u *__DirectLog_Selector) OrderBy_AtTimeMs_Asc() *__DirectLog_Selector {
	u.orderBy = " ORDER BY AtTimeMs ASC "
	return u
}

func (u *__DirectLog_Selector) Select_AtTimeMs() *__DirectLog_Selector {
	u.selectCol = "AtTimeMs"
	return u
}

func (u *__DirectLog_Selector) Limit(num int) *__DirectLog_Selector {
	u.limit = num
	return u
}

func (u *__DirectLog_Selector) Offset(num int) *__DirectLog_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__DirectLog_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.direct_log"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__DirectLog_Selector) GetRow(db *sqlx.DB) (*DirectLog, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &DirectLog{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnDirectLog_LoadOne(row)

	return row, nil
}

func (u *__DirectLog_Selector) GetRows(db *sqlx.DB) ([]*DirectLog, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*DirectLog
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnDirectLog_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__DirectLog_Selector) GetRows2(db *sqlx.DB) ([]DirectLog, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*DirectLog
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnDirectLog_LoadMany(rows)

	rows2 := make([]DirectLog, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__DirectLog_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__DirectLog_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__DirectLog_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__DirectLog_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__DirectLog_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.direct_log SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__DirectLog_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.direct_log WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  DirectLog ////////////////
func MassInsert_DirectLog(rows []DirectLog, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.direct_log (" +
		"ToUserId, MessageId, ChatId, PeerUserId, EventType, RoomLogTypeId, FromSeq, ToSeq, ExtraPB, ExtraJson, AtTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.ChatId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.EventType)
		vals = append(vals, row.RoomLogTypeId)
		vals = append(vals, row.FromSeq)
		vals = append(vals, row.ToSeq)
		vals = append(vals, row.ExtraPB)
		vals = append(vals, row.ExtraJson)
		vals = append(vals, row.AtTimeMs)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_DirectLog(rows []DirectLog, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.direct_log (" +
		"ToUserId, MessageId, ChatId, PeerUserId, EventType, RoomLogTypeId, FromSeq, ToSeq, ExtraPB, ExtraJson, AtTimeMs" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.ChatId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.EventType)
		vals = append(vals, row.RoomLogTypeId)
		vals = append(vals, row.FromSeq)
		vals = append(vals, row.ToSeq)
		vals = append(vals, row.ExtraPB)
		vals = append(vals, row.ExtraJson)
		vals = append(vals, row.AtTimeMs)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

// DirectLogById retrieves a row from 'ms.direct_log' as a DirectLog.
//
// Generated from index 'direct_log_Id_pkey'.
func DirectLogById(db XODB, id int) (*DirectLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, MessageId, ChatId, PeerUserId, EventType, RoomLogTypeId, FromSeq, ToSeq, ExtraPB, ExtraJson, AtTimeMs ` +
		`FROM ms.direct_log ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	dl := DirectLog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&dl.Id, &dl.ToUserId, &dl.MessageId, &dl.ChatId, &dl.PeerUserId, &dl.EventType, &dl.RoomLogTypeId, &dl.FromSeq, &dl.ToSeq, &dl.ExtraPB, &dl.ExtraJson, &dl.AtTimeMs)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnDirectLog_LoadOne(&dl)

	return &dl, nil
}
