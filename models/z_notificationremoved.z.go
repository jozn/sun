// Package models contains the types for schema 'ms'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// NotificationRemoved represents a row from 'ms.notification_removed'.

// Manualy copy this to project
type NotificationRemoved__ struct {
	NotificationId int `json:"NotificationId"` // NotificationId -
	ForUserId      int `json:"ForUserId"`      // ForUserId -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the NotificationRemoved exists in the database.
func (nr *NotificationRemoved) Exists() bool {
	return nr._exists
}

// Deleted provides information if the NotificationRemoved has been deleted from the database.
func (nr *NotificationRemoved) Deleted() bool {
	return nr._deleted
}

// Insert inserts the NotificationRemoved to the database.
func (nr *NotificationRemoved) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if nr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ms.notification_removed (` +
		`NotificationId, ForUserId` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, nr.NotificationId, nr.ForUserId)
	_, err = db.Exec(sqlstr, nr.NotificationId, nr.ForUserId)
	if err != nil {
		return err
	}

	// set existence
	nr._exists = true

	OnNotificationRemoved_AfterInsert(nr)

	return nil
}

// Insert inserts the NotificationRemoved to the database.
func (nr *NotificationRemoved) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.notification_removed (` +
		`ForUserId` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, nr.ForUserId)
	res, err := db.Exec(sqlstr, nr.ForUserId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set primary key and existence
	nr.NotificationId = int(id)
	nr._exists = true

	OnNotificationRemoved_AfterInsert(nr)

	return nil
}

// Update updates the NotificationRemoved in the database.
func (nr *NotificationRemoved) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !nr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if nr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.notification_removed SET ` +
		`ForUserId = ?` +
		` WHERE NotificationId = ?`

	// run query
	XOLog(sqlstr, nr.ForUserId, nr.NotificationId)
	_, err = db.Exec(sqlstr, nr.ForUserId, nr.NotificationId)

	XOLogErr(err)
	OnNotificationRemoved_AfterUpdate(nr)

	return err
}

// Save saves the NotificationRemoved to the database.
func (nr *NotificationRemoved) Save(db XODB) error {
	if nr.Exists() {
		return nr.Update(db)
	}

	return nr.Replace(db)
}

// Delete deletes the NotificationRemoved from the database.
func (nr *NotificationRemoved) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !nr._exists {
		return nil
	}

	// if deleted, bail
	if nr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.notification_removed WHERE NotificationId = ?`

	// run query
	XOLog(sqlstr, nr.NotificationId)
	_, err = db.Exec(sqlstr, nr.NotificationId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	nr._deleted = true

	OnNotificationRemoved_AfterDelete(nr)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __NotificationRemoved_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __NotificationRemoved_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __NotificationRemoved_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewNotificationRemoved_Deleter() *__NotificationRemoved_Deleter {
	d := __NotificationRemoved_Deleter{whereSep: " AND "}
	return &d
}

func NewNotificationRemoved_Updater() *__NotificationRemoved_Updater {
	u := __NotificationRemoved_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewNotificationRemoved_Selector() *__NotificationRemoved_Selector {
	u := __NotificationRemoved_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__NotificationRemoved_Deleter) Or() *__NotificationRemoved_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__NotificationRemoved_Deleter) NotificationId_In(ins []int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Deleter) NotificationId_Ins(ins ...int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Deleter) NotificationId_NotIn(ins []int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Deleter) NotificationId_EQ(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_NotEQ(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_LT(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_LE(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_GT(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_GE(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__NotificationRemoved_Deleter) ForUserId_In(ins []int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Deleter) ForUserId_Ins(ins ...int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Deleter) ForUserId_NotIn(ins []int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Deleter) ForUserId_EQ(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_NotEQ(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_LT(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_LE(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_GT(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_GE(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__NotificationRemoved_Updater) Or() *__NotificationRemoved_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__NotificationRemoved_Updater) NotificationId_In(ins []int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Updater) NotificationId_Ins(ins ...int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Updater) NotificationId_NotIn(ins []int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Updater) NotificationId_EQ(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_NotEQ(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_LT(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_LE(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_GT(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_GE(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__NotificationRemoved_Updater) ForUserId_In(ins []int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Updater) ForUserId_Ins(ins ...int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Updater) ForUserId_NotIn(ins []int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Updater) ForUserId_EQ(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_NotEQ(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_LT(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_LE(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_GT(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_GE(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__NotificationRemoved_Selector) Or() *__NotificationRemoved_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__NotificationRemoved_Selector) NotificationId_In(ins []int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Selector) NotificationId_Ins(ins ...int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Selector) NotificationId_NotIn(ins []int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Selector) NotificationId_EQ(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_NotEQ(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_LT(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_LE(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_GT(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_GE(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__NotificationRemoved_Selector) ForUserId_In(ins []int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Selector) ForUserId_Ins(ins ...int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Selector) ForUserId_NotIn(ins []int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Selector) ForUserId_EQ(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_NotEQ(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_LT(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_LE(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_GT(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_GE(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__NotificationRemoved_Updater) NotificationId(newVal int) *__NotificationRemoved_Updater {
	u.updates[" NotificationId = ? "] = newVal
	return u
}

func (u *__NotificationRemoved_Updater) NotificationId_Increment(count int) *__NotificationRemoved_Updater {
	if count > 0 {
		u.updates[" NotificationId = NotificationId+? "] = count
	}

	if count < 0 {
		u.updates[" NotificationId = NotificationId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__NotificationRemoved_Updater) ForUserId(newVal int) *__NotificationRemoved_Updater {
	u.updates[" ForUserId = ? "] = newVal
	return u
}

func (u *__NotificationRemoved_Updater) ForUserId_Increment(count int) *__NotificationRemoved_Updater {
	if count > 0 {
		u.updates[" ForUserId = ForUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ForUserId = ForUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__NotificationRemoved_Selector) OrderBy_NotificationId_Desc() *__NotificationRemoved_Selector {
	u.orderBy = " ORDER BY NotificationId DESC "
	return u
}

func (u *__NotificationRemoved_Selector) OrderBy_NotificationId_Asc() *__NotificationRemoved_Selector {
	u.orderBy = " ORDER BY NotificationId ASC "
	return u
}

func (u *__NotificationRemoved_Selector) Select_NotificationId() *__NotificationRemoved_Selector {
	u.selectCol = "NotificationId"
	return u
}

func (u *__NotificationRemoved_Selector) OrderBy_ForUserId_Desc() *__NotificationRemoved_Selector {
	u.orderBy = " ORDER BY ForUserId DESC "
	return u
}

func (u *__NotificationRemoved_Selector) OrderBy_ForUserId_Asc() *__NotificationRemoved_Selector {
	u.orderBy = " ORDER BY ForUserId ASC "
	return u
}

func (u *__NotificationRemoved_Selector) Select_ForUserId() *__NotificationRemoved_Selector {
	u.selectCol = "ForUserId"
	return u
}

func (u *__NotificationRemoved_Selector) Limit(num int) *__NotificationRemoved_Selector {
	u.limit = num
	return u
}

func (u *__NotificationRemoved_Selector) Offset(num int) *__NotificationRemoved_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__NotificationRemoved_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.notification_removed"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__NotificationRemoved_Selector) GetRow(db *sqlx.DB) (*NotificationRemoved, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &NotificationRemoved{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnNotificationRemoved_LoadOne(row)

	return row, nil
}

func (u *__NotificationRemoved_Selector) GetRows(db *sqlx.DB) ([]*NotificationRemoved, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*NotificationRemoved
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnNotificationRemoved_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__NotificationRemoved_Selector) GetRows2(db *sqlx.DB) ([]NotificationRemoved, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*NotificationRemoved
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnNotificationRemoved_LoadMany(rows)

	rows2 := make([]NotificationRemoved, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__NotificationRemoved_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__NotificationRemoved_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__NotificationRemoved_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__NotificationRemoved_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__NotificationRemoved_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.notification_removed SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__NotificationRemoved_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.notification_removed WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  NotificationRemoved ////////////////
func MassInsert_NotificationRemoved(rows []NotificationRemoved, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.notification_removed (" +
		"ForUserId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ForUserId)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_NotificationRemoved(rows []NotificationRemoved, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.notification_removed (" +
		"ForUserId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ForUserId)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

// NotificationRemovedByNotificationId retrieves a row from 'ms.notification_removed' as a NotificationRemoved.
//
// Generated from index 'notification_removed_NotificationId_pkey'.
func NotificationRemovedByNotificationId(db XODB, notificationId int) (*NotificationRemoved, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`NotificationId, ForUserId ` +
		`FROM ms.notification_removed ` +
		`WHERE NotificationId = ?`

	// run query
	XOLog(sqlstr, notificationId)
	nr := NotificationRemoved{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, notificationId).Scan(&nr.NotificationId, &nr.ForUserId)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	OnNotificationRemoved_LoadOne(&nr)

	return &nr, nil
}
