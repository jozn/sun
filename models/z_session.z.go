// Package models contains the types for schema 'ms'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"ms/sun/helper"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// Session represents a row from 'ms.session'.

// Manualy copy this to project
type Session__ struct {
	Id                 int    `json:"Id"`                 // Id -
	UserId             int    `json:"UserId"`             // UserId -
	SessionUuid        string `json:"SessionUuid"`        // SessionUuid -
	ClientUuid         string `json:"ClientUuid"`         // ClientUuid -
	DeviceUuid         string `json:"DeviceUuid"`         // DeviceUuid -
	LastActivityTime   int    `json:"LastActivityTime"`   // LastActivityTime -
	LastIpAddress      string `json:"LastIpAddress"`      // LastIpAddress -
	LastWifiMacAddress string `json:"LastWifiMacAddress"` // LastWifiMacAddress -
	LastNetworkType    string `json:"LastNetworkType"`    // LastNetworkType -
	CreatedTime        int    `json:"CreatedTime"`        // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Session exists in the database.
func (s *Session) Exists() bool {
	return s._exists
}

// Deleted provides information if the Session has been deleted from the database.
func (s *Session) Deleted() bool {
	return s._deleted
}

// Insert inserts the Session to the database.
func (s *Session) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ms.session (` +
		`UserId, SessionUuid, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.UserId, s.SessionUuid, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime)
	res, err := db.Exec(sqlstr, s.UserId, s.SessionUuid, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.Id = int(id)
	s._exists = true

	OnSession_AfterInsert(s)

	return nil
}

// Insert inserts the Session to the database.
func (s *Session) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO ms.session (` +
		`UserId, SessionUuid, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.UserId, s.SessionUuid, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime)
	res, err := db.Exec(sqlstr, s.UserId, s.SessionUuid, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.Id = int(id)
	s._exists = true

	OnSession_AfterInsert(s)

	return nil
}

// Update updates the Session in the database.
func (s *Session) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ms.session SET ` +
		`UserId = ?, SessionUuid = ?, ClientUuid = ?, DeviceUuid = ?, LastActivityTime = ?, LastIpAddress = ?, LastWifiMacAddress = ?, LastNetworkType = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, s.UserId, s.SessionUuid, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime, s.Id)
	_, err = db.Exec(sqlstr, s.UserId, s.SessionUuid, s.ClientUuid, s.DeviceUuid, s.LastActivityTime, s.LastIpAddress, s.LastWifiMacAddress, s.LastNetworkType, s.CreatedTime, s.Id)

	OnSession_AfterUpdate(s)

	return err
}

// Save saves the Session to the database.
func (s *Session) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Replace(db)
}

// Delete deletes the Session from the database.
func (s *Session) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ms.session WHERE Id = ?`

	// run query
	XOLog(sqlstr, s.Id)
	_, err = db.Exec(sqlstr, s.Id)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	OnSession_AfterDelete(s)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Session_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Session_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Session_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewSession_Deleter() *__Session_Deleter {
	d := __Session_Deleter{whereSep: " AND "}
	return &d
}

func NewSession_Updater() *__Session_Updater {
	u := __Session_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewSession_Selector() *__Session_Selector {
	u := __Session_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Session_Deleter) Or() *__Session_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Session_Deleter) Id_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) Id_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) Id_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) UserId_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) UserId_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) UserId_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) LastActivityTime_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) LastActivityTime_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) LastActivityTime_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) LastActivityTime_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) CreatedTime_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) CreatedTime_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) CreatedTime_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) CreatedTime_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Session_Updater) Or() *__Session_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Session_Updater) Id_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) Id_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) Id_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) UserId_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) UserId_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) UserId_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) LastActivityTime_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) LastActivityTime_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) LastActivityTime_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) LastActivityTime_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) CreatedTime_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) CreatedTime_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) CreatedTime_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) CreatedTime_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Session_Selector) Or() *__Session_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Session_Selector) Id_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) Id_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) Id_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) UserId_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) UserId_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) UserId_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) LastActivityTime_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) LastActivityTime_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) LastActivityTime_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) LastActivityTime_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) CreatedTime_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) CreatedTime_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) CreatedTime_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) CreatedTime_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Session_Deleter) SessionUuid_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) SessionUuid_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) SessionUuid_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) SessionUuid_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) ClientUuid_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) ClientUuid_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) ClientUuid_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) ClientUuid_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) DeviceUuid_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) DeviceUuid_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) DeviceUuid_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) DeviceUuid_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) LastIpAddress_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) LastIpAddress_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) LastIpAddress_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) LastIpAddress_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) LastWifiMacAddress_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) LastWifiMacAddress_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) LastWifiMacAddress_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) LastWifiMacAddress_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) LastNetworkType_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) LastNetworkType_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) LastNetworkType_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) LastNetworkType_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Session_Updater) SessionUuid_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) SessionUuid_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) SessionUuid_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) SessionUuid_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) ClientUuid_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) ClientUuid_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) ClientUuid_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) ClientUuid_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) DeviceUuid_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) DeviceUuid_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) DeviceUuid_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) DeviceUuid_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) LastIpAddress_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) LastIpAddress_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) LastIpAddress_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) LastIpAddress_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) LastWifiMacAddress_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) LastWifiMacAddress_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) LastWifiMacAddress_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) LastWifiMacAddress_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) LastNetworkType_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) LastNetworkType_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) LastNetworkType_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) LastNetworkType_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Session_Selector) SessionUuid_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) SessionUuid_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) SessionUuid_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) SessionUuid_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) ClientUuid_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) ClientUuid_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) ClientUuid_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) ClientUuid_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) DeviceUuid_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) DeviceUuid_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) DeviceUuid_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) DeviceUuid_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) LastIpAddress_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) LastIpAddress_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastIpAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) LastIpAddress_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) LastIpAddress_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastIpAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) LastWifiMacAddress_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) LastWifiMacAddress_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastWifiMacAddress NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) LastWifiMacAddress_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) LastWifiMacAddress_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastWifiMacAddress = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) LastNetworkType_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) LastNetworkType_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastNetworkType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) LastNetworkType_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) LastNetworkType_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastNetworkType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Session_Updater) Id(newVal int) *__Session_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Session_Updater) Id_Increment(count int) *__Session_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Session_Updater) UserId(newVal int) *__Session_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Session_Updater) UserId_Increment(count int) *__Session_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Session_Updater) SessionUuid(newVal string) *__Session_Updater {
	u.updates[" SessionUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) ClientUuid(newVal string) *__Session_Updater {
	u.updates[" ClientUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) DeviceUuid(newVal string) *__Session_Updater {
	u.updates[" DeviceUuid = ? "] = newVal
	return u
}

//ints

func (u *__Session_Updater) LastActivityTime(newVal int) *__Session_Updater {
	u.updates[" LastActivityTime = ? "] = newVal
	return u
}

func (u *__Session_Updater) LastActivityTime_Increment(count int) *__Session_Updater {
	if count > 0 {
		u.updates[" LastActivityTime = LastActivityTime+? "] = count
	}

	if count < 0 {
		u.updates[" LastActivityTime = LastActivityTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Session_Updater) LastIpAddress(newVal string) *__Session_Updater {
	u.updates[" LastIpAddress = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) LastWifiMacAddress(newVal string) *__Session_Updater {
	u.updates[" LastWifiMacAddress = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) LastNetworkType(newVal string) *__Session_Updater {
	u.updates[" LastNetworkType = ? "] = newVal
	return u
}

//ints

func (u *__Session_Updater) CreatedTime(newVal int) *__Session_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Session_Updater) CreatedTime_Increment(count int) *__Session_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Session_Selector) OrderBy_Id_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Session_Selector) OrderBy_Id_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Session_Selector) Select_Id() *__Session_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Session_Selector) OrderBy_UserId_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Session_Selector) OrderBy_UserId_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Session_Selector) Select_UserId() *__Session_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Session_Selector) OrderBy_SessionUuid_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY SessionUuid DESC "
	return u
}

func (u *__Session_Selector) OrderBy_SessionUuid_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY SessionUuid ASC "
	return u
}

func (u *__Session_Selector) Select_SessionUuid() *__Session_Selector {
	u.selectCol = "SessionUuid"
	return u
}

func (u *__Session_Selector) OrderBy_ClientUuid_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY ClientUuid DESC "
	return u
}

func (u *__Session_Selector) OrderBy_ClientUuid_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY ClientUuid ASC "
	return u
}

func (u *__Session_Selector) Select_ClientUuid() *__Session_Selector {
	u.selectCol = "ClientUuid"
	return u
}

func (u *__Session_Selector) OrderBy_DeviceUuid_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY DeviceUuid DESC "
	return u
}

func (u *__Session_Selector) OrderBy_DeviceUuid_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY DeviceUuid ASC "
	return u
}

func (u *__Session_Selector) Select_DeviceUuid() *__Session_Selector {
	u.selectCol = "DeviceUuid"
	return u
}

func (u *__Session_Selector) OrderBy_LastActivityTime_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY LastActivityTime DESC "
	return u
}

func (u *__Session_Selector) OrderBy_LastActivityTime_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY LastActivityTime ASC "
	return u
}

func (u *__Session_Selector) Select_LastActivityTime() *__Session_Selector {
	u.selectCol = "LastActivityTime"
	return u
}

func (u *__Session_Selector) OrderBy_LastIpAddress_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY LastIpAddress DESC "
	return u
}

func (u *__Session_Selector) OrderBy_LastIpAddress_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY LastIpAddress ASC "
	return u
}

func (u *__Session_Selector) Select_LastIpAddress() *__Session_Selector {
	u.selectCol = "LastIpAddress"
	return u
}

func (u *__Session_Selector) OrderBy_LastWifiMacAddress_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY LastWifiMacAddress DESC "
	return u
}

func (u *__Session_Selector) OrderBy_LastWifiMacAddress_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY LastWifiMacAddress ASC "
	return u
}

func (u *__Session_Selector) Select_LastWifiMacAddress() *__Session_Selector {
	u.selectCol = "LastWifiMacAddress"
	return u
}

func (u *__Session_Selector) OrderBy_LastNetworkType_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY LastNetworkType DESC "
	return u
}

func (u *__Session_Selector) OrderBy_LastNetworkType_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY LastNetworkType ASC "
	return u
}

func (u *__Session_Selector) Select_LastNetworkType() *__Session_Selector {
	u.selectCol = "LastNetworkType"
	return u
}

func (u *__Session_Selector) OrderBy_CreatedTime_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Session_Selector) OrderBy_CreatedTime_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Session_Selector) Select_CreatedTime() *__Session_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Session_Selector) Limit(num int) *__Session_Selector {
	u.limit = num
	return u
}

func (u *__Session_Selector) Offset(num int) *__Session_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Session_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM ms.session"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Session_Selector) GetRow(db *sqlx.DB) (*Session, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Session{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	OnSession_LoadOne(row)

	return row, nil
}

func (u *__Session_Selector) GetRows(db *sqlx.DB) ([]*Session, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Session
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnSession_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Session_Selector) GetRows2(db *sqlx.DB) ([]Session, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Session
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnSession_LoadMany(rows)

	rows2 := make([]Session, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Session_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Session_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Session_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Session_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Session_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE ms.session SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Session_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM ms.session WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Session ////////////////
func MassInsert_Session(rows []Session, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO ms.session (" +
		"UserId, SessionUuid, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.SessionUuid)
		vals = append(vals, row.ClientUuid)
		vals = append(vals, row.DeviceUuid)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.LastIpAddress)
		vals = append(vals, row.LastWifiMacAddress)
		vals = append(vals, row.LastNetworkType)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Session(rows []Session, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO ms.session (" +
		"UserId, SessionUuid, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.SessionUuid)
		vals = append(vals, row.ClientUuid)
		vals = append(vals, row.DeviceUuid)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.LastIpAddress)
		vals = append(vals, row.LastWifiMacAddress)
		vals = append(vals, row.LastNetworkType)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

// SessionById retrieves a row from 'ms.session' as a Session.
//
// Generated from index 'session_Id_pkey'.
func SessionById(db XODB, id int) (*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, SessionUuid, ClientUuid, DeviceUuid, LastActivityTime, LastIpAddress, LastWifiMacAddress, LastNetworkType, CreatedTime ` +
		`FROM ms.session ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	s := Session{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.Id, &s.UserId, &s.SessionUuid, &s.ClientUuid, &s.DeviceUuid, &s.LastActivityTime, &s.LastIpAddress, &s.LastWifiMacAddress, &s.LastNetworkType, &s.CreatedTime)
	if err != nil {
		return nil, err
	}

	OnSession_LoadOne(&s)

	return &s, nil
}
