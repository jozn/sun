// Package main contains the types for schema 'public'.
package main

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"ms/sun/config"
	"ms/sun/helper"
	"os"
	"regexp"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// Bench4 represents a row from 'public.bench4'.

// Manualy copy this to project
type Bench4 struct {
	Id      int    `json:"Id"`      // Id -
	Text    string `json:"Text"`    // Text -
	Time    int    `json:"Time"`    // Time -
	Name    string `json:"Name"`    // Name -
	Indexed int    `json:"Indexed"` // Indexed -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Bench4 exists in the database.
func (b *Bench4) Exists() bool {
	return b._exists
}

// Deleted provides information if the Bench4 has been deleted from the database.
func (b *Bench4) Deleted() bool {
	return b._deleted
}

// Insert inserts the Bench4 to the database.
func (b *Bench4) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.bench4 (` +
		`Text, Time, Name, Indexed` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING "Id"`

	// run query
	XOLog(sqlstr, b.Text, b.Time, b.Name, b.Indexed)
	err = db.QueryRow(sqlstr, b.Text, b.Time, b.Name, b.Indexed).Scan(&b.Id)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Update updates the Bench4 in the database.
func (b *Bench4) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.bench4 SET (` +
		`Text, Time, Name, Indexed` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE "bench4.Id" = $5`

	// run query
	XOLog(sqlstr, b.Text, b.Time, b.Name, b.Indexed, b.Id)
	_, err = db.Exec(sqlstr, b.Text, b.Time, b.Name, b.Indexed, b.Id)
	return err
}

// Save saves the Bench4 to the database.
func (b *Bench4) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Upsert performs an upsert for Bench4.
//
// NOTE: PostgreSQL 9.5+ only
func (b *Bench4) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.bench4 (` +
		`Id, Text, Time, Name, Indexed` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (Id) DO UPDATE SET (` +
		`Id, Text, Time, Name, Indexed` +
		`) = (` +
		`EXCLUDED.Id, EXCLUDED.Text, EXCLUDED.Time, EXCLUDED.Name, EXCLUDED.Indexed` +
		`)`

	// run query
	XOLog(sqlstr, b.Id, b.Text, b.Time, b.Name, b.Indexed)
	_, err = db.Exec(sqlstr, b.Id, b.Text, b.Time, b.Name, b.Indexed)
	if err != nil {
		return err
	}

	// set existence
	b._exists = true

	return nil
}

// Delete deletes the Bench4 from the database.
func (b *Bench4) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.bench4 WHERE Id = $1`

	// run query
	XOLog(sqlstr, b.Id)
	_, err = db.Exec(sqlstr, b.Id)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// DEP MUST USE .Upsert()
func (b *Bench4) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.bench4 (` +
		`Text, Time, Name, Indexed` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, b.Text, b.Time, b.Name, b.Indexed)
	res, err := db.Exec(sqlstr, b.Text, b.Time, b.Name, b.Indexed)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	b.Id = int(id)
	b._exists = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Bench4_Deleter struct {
	wheres   []whereClause
	dollar   postgresDollar
	whereSep string
}

type __Bench4_Updater struct {
	wheres []whereClause
	dollar postgresDollar
	// updates   map[string]interface{}
	updates  []updateClause
	whereSep string
}

type __Bench4_Selector struct {
	wheres    []whereClause
	dollar    postgresDollar
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewBench4_Deleter() *__Bench4_Deleter {
	d := __Bench4_Deleter{whereSep: " AND "}
	return &d
}

func NewBench4_Updater() *__Bench4_Updater {
	u := __Bench4_Updater{whereSep: " AND "}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewBench4_Selector() *__Bench4_Selector {
	u := __Bench4_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Bench4_Deleter) Or() *__Bench4_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Bench4_Deleter) Id_In(ins []int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Deleter) Id_NotIn(ins []int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Deleter) Id_Eq(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Id_NotEQ(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Id_LT(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Id_LE(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Id_GT(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Id_GE(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bench4_Deleter) Time_In(ins []int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Time IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Deleter) Time_NotIn(ins []int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Time NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Deleter) Time_Eq(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Time_NotEQ(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Time_LT(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Time_LE(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Time_GT(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Time_GE(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bench4_Deleter) Indexed_In(ins []int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Indexed IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Deleter) Indexed_NotIn(ins []int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Indexed NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Deleter) Indexed_Eq(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Indexed_NotEQ(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Indexed_LT(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Indexed_LE(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Indexed_GT(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Deleter) Indexed_GE(val int) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Bench4_Updater) Or() *__Bench4_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Bench4_Updater) Id_In(ins []int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Updater) Id_NotIn(ins []int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Updater) Id_Eq(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Id_NotEQ(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Id_LT(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Id_LE(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Id_GT(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Id_GE(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bench4_Updater) Time_In(ins []int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Time IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Updater) Time_NotIn(ins []int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Time NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Updater) Time_Eq(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Time_NotEQ(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Time_LT(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Time_LE(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Time_GT(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Time_GE(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bench4_Updater) Indexed_In(ins []int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Indexed IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Updater) Indexed_NotIn(ins []int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Indexed NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Updater) Indexed_Eq(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Indexed_NotEQ(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Indexed_LT(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Indexed_LE(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Indexed_GT(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Updater) Indexed_GE(val int) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Bench4_Selector) Or() *__Bench4_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Bench4_Selector) Id_In(ins []int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Selector) Id_NotIn(ins []int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Selector) Id_Eq(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` "Id" = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Id_NotEQ(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Id_LT(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Id_LE(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Id_GT(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Id_GE(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bench4_Selector) Time_In(ins []int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Time IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Selector) Time_NotIn(ins []int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Time NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Selector) Time_Eq(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Time_NotEQ(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Time_LT(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Time_LE(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Time_GT(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Time_GE(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Time >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bench4_Selector) Indexed_In(ins []int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Indexed IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Selector) Indexed_NotIn(ins []int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Indexed NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Selector) Indexed_Eq(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Indexed_NotEQ(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Indexed_LT(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Indexed_LE(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Indexed_GT(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Bench4_Selector) Indexed_GE(val int) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Indexed >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Bench4_Deleter) Text_In(ins []string) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Text IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Deleter) Text_NotIn(ins []string) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Text NOT IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Bench4_Deleter) Text_Like(val string) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Text LIKE ` + u.dollar.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Deleter) Text_Eq(val string) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Text = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bench4_Deleter) Name_In(ins []string) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Deleter) Name_NotIn(ins []string) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name NOT IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Bench4_Deleter) Name_Like(val string) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name LIKE ` + u.dollar.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Deleter) Name_Eq(val string) *__Bench4_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Bench4_Updater) Text_In(ins []string) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Text IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Updater) Text_NotIn(ins []string) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Text NOT IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Bench4_Updater) Text_Like(val string) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Text LIKE ` + u.dollar.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Updater) Text_Eq(val string) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Text = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bench4_Updater) Name_In(ins []string) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Updater) Name_NotIn(ins []string) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name NOT IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Bench4_Updater) Name_Like(val string) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name LIKE ` + u.dollar.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Updater) Name_Eq(val string) *__Bench4_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Bench4_Selector) Text_In(ins []string) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Text IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Selector) Text_NotIn(ins []string) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Text NOT IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Bench4_Selector) Text_Like(val string) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Text LIKE ` + u.dollar.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Selector) Text_Eq(val string) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Text = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Bench4_Selector) Name_In(ins []string) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Bench4_Selector) Name_NotIn(ins []string) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name NOT IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Bench4_Selector) Name_Like(val string) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name LIKE ` + u.dollar.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Bench4_Selector) Name_Eq(val string) *__Bench4_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Bench4_Updater) Id(newVal int) *__Bench4_Updater {
	u.updates = append(u.updates, updateClause{col: ` Id = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[` Id = `+ u.dollar.nextDollar()] = newVal
	return u
}

func (u *__Bench4_Updater) Id_Increment(count int) *__Bench4_Updater {
	if count > 0 {
		u.updates = append(u.updates, updateClause{col: ` Id = Id+ ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Id = Id+`+ u.dollar.nextDollar()] = count
	}

	if count < 0 {
		u.updates = append(u.updates, updateClause{col: ` Id = Id- ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Id = Id-`+ u.dollar.nextDollar()] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Bench4_Updater) Text(newVal string) *__Bench4_Updater {
	u.updates = append(u.updates, updateClause{col: ` Text = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[" Text = "+ u.dollar.nextDollar()] = newVal
	return u
}

//ints

func (u *__Bench4_Updater) Time(newVal int) *__Bench4_Updater {
	u.updates = append(u.updates, updateClause{col: ` Time = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[` Time = `+ u.dollar.nextDollar()] = newVal
	return u
}

func (u *__Bench4_Updater) Time_Increment(count int) *__Bench4_Updater {
	if count > 0 {
		u.updates = append(u.updates, updateClause{col: ` Time = Time+ ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Time = Time+`+ u.dollar.nextDollar()] = count
	}

	if count < 0 {
		u.updates = append(u.updates, updateClause{col: ` Time = Time- ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Time = Time-`+ u.dollar.nextDollar()] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Bench4_Updater) Name(newVal string) *__Bench4_Updater {
	u.updates = append(u.updates, updateClause{col: ` Name = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[" Name = "+ u.dollar.nextDollar()] = newVal
	return u
}

//ints

func (u *__Bench4_Updater) Indexed(newVal int) *__Bench4_Updater {
	u.updates = append(u.updates, updateClause{col: ` Indexed = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[` Indexed = `+ u.dollar.nextDollar()] = newVal
	return u
}

func (u *__Bench4_Updater) Indexed_Increment(count int) *__Bench4_Updater {
	if count > 0 {
		u.updates = append(u.updates, updateClause{col: ` Indexed = Indexed+ ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Indexed = Indexed+`+ u.dollar.nextDollar()] = count
	}

	if count < 0 {
		u.updates = append(u.updates, updateClause{col: ` Indexed = Indexed- ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Indexed = Indexed-`+ u.dollar.nextDollar()] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Bench4_Selector) OrderBy_Id_Desc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Id DESC `
	return u
}

func (u *__Bench4_Selector) OrderBy_Id_Asc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Id ASC `
	return u
}

func (u *__Bench4_Selector) Select_Id() *__Bench4_Selector {
	u.selectCol = `Id`
	return u
}

func (u *__Bench4_Selector) OrderBy_Text_Desc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Text DESC `
	return u
}

func (u *__Bench4_Selector) OrderBy_Text_Asc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Text ASC `
	return u
}

func (u *__Bench4_Selector) Select_Text() *__Bench4_Selector {
	u.selectCol = `Text`
	return u
}

func (u *__Bench4_Selector) OrderBy_Time_Desc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Time DESC `
	return u
}

func (u *__Bench4_Selector) OrderBy_Time_Asc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Time ASC `
	return u
}

func (u *__Bench4_Selector) Select_Time() *__Bench4_Selector {
	u.selectCol = `Time`
	return u
}

func (u *__Bench4_Selector) OrderBy_Name_Desc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Name DESC `
	return u
}

func (u *__Bench4_Selector) OrderBy_Name_Asc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Name ASC `
	return u
}

func (u *__Bench4_Selector) Select_Name() *__Bench4_Selector {
	u.selectCol = `Name`
	return u
}

func (u *__Bench4_Selector) OrderBy_Indexed_Desc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Indexed DESC `
	return u
}

func (u *__Bench4_Selector) OrderBy_Indexed_Asc() *__Bench4_Selector {
	u.orderBy = ` ORDER BY Indexed ASC `
	return u
}

func (u *__Bench4_Selector) Select_Indexed() *__Bench4_Selector {
	u.selectCol = `Indexed`
	return u
}

func (u *__Bench4_Selector) Limit(num int) *__Bench4_Selector {
	u.limit = num
	return u
}

func (u *__Bench4_Selector) Offset(num int) *__Bench4_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Bench4_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := `SELECT ` + u.selectCol + ` FROM public.bench4`

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Bench4_Selector) GetRow(db *sqlx.DB) (*Bench4, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Bench4{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Bench4_Selector) GetRows(db *sqlx.DB) ([]Bench4, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Bench4
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Bench4_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Bench4_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Bench4_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Bench4_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Bench4_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.bench4 SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Bench4_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := `DELETE FROM public.bench4 WHERE ` + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Bench4 ////////////////
func MassInsert_Bench4(rows []Bench4, db XODB) error {
	var err error
	ln := len(rows)
	s := `(?,?,?,?),` //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := `INSERT INTO public.bench4 (` +
		`Text, Time, Name, Indexed` +
		`) VALUES ` + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Text)
		vals = append(vals, row.Time)
		vals = append(vals, row.Name)
		vals = append(vals, row.Indexed)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Bench4(rows []Bench4, db XODB) error {
	var err error
	ln := len(rows)
	s := `(?,?,?,?),` //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := `REPLACE INTO public.bench4 (` +
		`Text, Time, Name, Indexed` +
		`) VALUES ` + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Text)
		vals = append(vals, row.Time)
		vals = append(vals, row.Name)
		vals = append(vals, row.Indexed)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// Tag represents a row from 'public.tags'.

// Manualy copy this to project
type Tag struct {
	Id          int    `json:"Id"`          // Id -
	Name        string `json:"Name"`        // Name -
	Count       int    `json:"Count"`       // Count -
	IsBlocked   int    `json:"IsBlocked"`   // IsBlocked -
	CreatedTime int    `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Tag exists in the database.
func (t *Tag) Exists() bool {
	return t._exists
}

// Deleted provides information if the Tag has been deleted from the database.
func (t *Tag) Deleted() bool {
	return t._deleted
}

// Insert inserts the Tag to the database.
func (t *Tag) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.tags (` +
		`Id, Name, Count, IsBlocked, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, t.Id, t.Name, t.Count, t.IsBlocked, t.CreatedTime)
	err = db.QueryRow(sqlstr, t.Id, t.Name, t.Count, t.IsBlocked, t.CreatedTime).Scan(&t.Id)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Tag in the database.
func (t *Tag) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.tags SET (` +
		`Name, Count, IsBlocked, CreatedTime` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE Id = $5`

	// run query
	XOLog(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime, t.Id)
	_, err = db.Exec(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime, t.Id)
	return err
}

// Save saves the Tag to the database.
func (t *Tag) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Tag.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Tag) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.tags (` +
		`Id, Name, Count, IsBlocked, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (Id) DO UPDATE SET (` +
		`Id, Name, Count, IsBlocked, CreatedTime` +
		`) = (` +
		`EXCLUDED.Id, EXCLUDED.Name, EXCLUDED.Count, EXCLUDED.IsBlocked, EXCLUDED.CreatedTime` +
		`)`

	// run query
	XOLog(sqlstr, t.Id, t.Name, t.Count, t.IsBlocked, t.CreatedTime)
	_, err = db.Exec(sqlstr, t.Id, t.Name, t.Count, t.IsBlocked, t.CreatedTime)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Tag from the database.
func (t *Tag) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.tags WHERE Id = $1`

	// run query
	XOLog(sqlstr, t.Id)
	_, err = db.Exec(sqlstr, t.Id)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// DEP MUST USE .Upsert()
func (t *Tag) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.tags (` +
		`Name, Count, IsBlocked, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime)
	res, err := db.Exec(sqlstr, t.Name, t.Count, t.IsBlocked, t.CreatedTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.Id = int(id)
	t._exists = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Tag_Deleter struct {
	wheres   []whereClause
	dollar   postgresDollar
	whereSep string
}

type __Tag_Updater struct {
	wheres []whereClause
	dollar postgresDollar
	// updates   map[string]interface{}
	updates  []updateClause
	whereSep string
}

type __Tag_Selector struct {
	wheres    []whereClause
	dollar    postgresDollar
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewTag_Deleter() *__Tag_Deleter {
	d := __Tag_Deleter{whereSep: " AND "}
	return &d
}

func NewTag_Updater() *__Tag_Updater {
	u := __Tag_Updater{whereSep: " AND "}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewTag_Selector() *__Tag_Selector {
	u := __Tag_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Tag_Deleter) Or() *__Tag_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Deleter) Id_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Id_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Id_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) Count_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Count IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Count_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Count NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Count_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) IsBlocked_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` IsBlocked IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) IsBlocked_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` IsBlocked NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) IsBlocked_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) CreatedTime_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` CreatedTime IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) CreatedTime_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` CreatedTime NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) CreatedTime_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Tag_Updater) Or() *__Tag_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Updater) Id_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Id_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Id_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) Count_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Count IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Count_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Count NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Count_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) IsBlocked_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` IsBlocked IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) IsBlocked_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` IsBlocked NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) IsBlocked_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) CreatedTime_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` CreatedTime IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) CreatedTime_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` CreatedTime NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) CreatedTime_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Tag_Selector) Or() *__Tag_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Selector) Id_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Id_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Id NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Id_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Id >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) Count_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Count IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Count_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Count NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Count_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Count >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) IsBlocked_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` IsBlocked IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) IsBlocked_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` IsBlocked NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) IsBlocked_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` IsBlocked >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) CreatedTime_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` CreatedTime IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) CreatedTime_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` CreatedTime NOT IN(` + u.dollar.nextManys(len(ins)) + `) `
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) CreatedTime_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime != ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime < ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime <= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime > ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` CreatedTime >= ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Tag_Deleter) Name_In(ins []string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Name_NotIn(ins []string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name NOT IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Deleter) Name_Like(val string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name LIKE ` + u.dollar.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Name_Eq(val string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Tag_Updater) Name_In(ins []string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Name_NotIn(ins []string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name NOT IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Updater) Name_Like(val string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name LIKE ` + u.dollar.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Name_Eq(val string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Tag_Selector) Name_In(ins []string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Name_NotIn(ins []string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = ` Name NOT IN(` + u.dollar.nextManys(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Selector) Name_Like(val string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name LIKE ` + u.dollar.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Name_Eq(val string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = ` Name = ` + d.dollar.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Tag_Updater) Id(newVal int) *__Tag_Updater {
	u.updates = append(u.updates, updateClause{col: ` Id = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[` Id = `+ u.dollar.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) Id_Increment(count int) *__Tag_Updater {
	if count > 0 {
		u.updates = append(u.updates, updateClause{col: ` Id = Id+ ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Id = Id+`+ u.dollar.nextDollar()] = count
	}

	if count < 0 {
		u.updates = append(u.updates, updateClause{col: ` Id = Id- ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Id = Id-`+ u.dollar.nextDollar()] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Tag_Updater) Name(newVal string) *__Tag_Updater {
	u.updates = append(u.updates, updateClause{col: ` Name = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[" Name = "+ u.dollar.nextDollar()] = newVal
	return u
}

//ints

func (u *__Tag_Updater) Count(newVal int) *__Tag_Updater {
	u.updates = append(u.updates, updateClause{col: ` Count = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[` Count = `+ u.dollar.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) Count_Increment(count int) *__Tag_Updater {
	if count > 0 {
		u.updates = append(u.updates, updateClause{col: ` Count = Count+ ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Count = Count+`+ u.dollar.nextDollar()] = count
	}

	if count < 0 {
		u.updates = append(u.updates, updateClause{col: ` Count = Count- ` + u.dollar.nextDollar(), val: count})
		//u.updates[` Count = Count-`+ u.dollar.nextDollar()] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Tag_Updater) IsBlocked(newVal int) *__Tag_Updater {
	u.updates = append(u.updates, updateClause{col: ` IsBlocked = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[` IsBlocked = `+ u.dollar.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) IsBlocked_Increment(count int) *__Tag_Updater {
	if count > 0 {
		u.updates = append(u.updates, updateClause{col: ` IsBlocked = IsBlocked+ ` + u.dollar.nextDollar(), val: count})
		//u.updates[` IsBlocked = IsBlocked+`+ u.dollar.nextDollar()] = count
	}

	if count < 0 {
		u.updates = append(u.updates, updateClause{col: ` IsBlocked = IsBlocked- ` + u.dollar.nextDollar(), val: count})
		//u.updates[` IsBlocked = IsBlocked-`+ u.dollar.nextDollar()] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Tag_Updater) CreatedTime(newVal int) *__Tag_Updater {
	u.updates = append(u.updates, updateClause{col: ` CreatedTime = ` + u.dollar.nextDollar(), val: newVal})
	//u.updates[` CreatedTime = `+ u.dollar.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) CreatedTime_Increment(count int) *__Tag_Updater {
	if count > 0 {
		u.updates = append(u.updates, updateClause{col: ` CreatedTime = CreatedTime+ ` + u.dollar.nextDollar(), val: count})
		//u.updates[` CreatedTime = CreatedTime+`+ u.dollar.nextDollar()] = count
	}

	if count < 0 {
		u.updates = append(u.updates, updateClause{col: ` CreatedTime = CreatedTime- ` + u.dollar.nextDollar(), val: count})
		//u.updates[` CreatedTime = CreatedTime-`+ u.dollar.nextDollar()] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Tag_Selector) OrderBy_Id_Desc() *__Tag_Selector {
	u.orderBy = ` ORDER BY Id DESC `
	return u
}

func (u *__Tag_Selector) OrderBy_Id_Asc() *__Tag_Selector {
	u.orderBy = ` ORDER BY Id ASC `
	return u
}

func (u *__Tag_Selector) Select_Id() *__Tag_Selector {
	u.selectCol = `Id`
	return u
}

func (u *__Tag_Selector) OrderBy_Name_Desc() *__Tag_Selector {
	u.orderBy = ` ORDER BY Name DESC `
	return u
}

func (u *__Tag_Selector) OrderBy_Name_Asc() *__Tag_Selector {
	u.orderBy = ` ORDER BY Name ASC `
	return u
}

func (u *__Tag_Selector) Select_Name() *__Tag_Selector {
	u.selectCol = `Name`
	return u
}

func (u *__Tag_Selector) OrderBy_Count_Desc() *__Tag_Selector {
	u.orderBy = ` ORDER BY Count DESC `
	return u
}

func (u *__Tag_Selector) OrderBy_Count_Asc() *__Tag_Selector {
	u.orderBy = ` ORDER BY Count ASC `
	return u
}

func (u *__Tag_Selector) Select_Count() *__Tag_Selector {
	u.selectCol = `Count`
	return u
}

func (u *__Tag_Selector) OrderBy_IsBlocked_Desc() *__Tag_Selector {
	u.orderBy = ` ORDER BY IsBlocked DESC `
	return u
}

func (u *__Tag_Selector) OrderBy_IsBlocked_Asc() *__Tag_Selector {
	u.orderBy = ` ORDER BY IsBlocked ASC `
	return u
}

func (u *__Tag_Selector) Select_IsBlocked() *__Tag_Selector {
	u.selectCol = `IsBlocked`
	return u
}

func (u *__Tag_Selector) OrderBy_CreatedTime_Desc() *__Tag_Selector {
	u.orderBy = ` ORDER BY CreatedTime DESC `
	return u
}

func (u *__Tag_Selector) OrderBy_CreatedTime_Asc() *__Tag_Selector {
	u.orderBy = ` ORDER BY CreatedTime ASC `
	return u
}

func (u *__Tag_Selector) Select_CreatedTime() *__Tag_Selector {
	u.selectCol = `CreatedTime`
	return u
}

func (u *__Tag_Selector) Limit(num int) *__Tag_Selector {
	u.limit = num
	return u
}

func (u *__Tag_Selector) Offset(num int) *__Tag_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Tag_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := `SELECT ` + u.selectCol + ` FROM public.tags`

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Tag_Selector) GetRow(db *sqlx.DB) (*Tag, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Tag{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Tag_Selector) GetRows(db *sqlx.DB) ([]Tag, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Tag
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Tag_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Tag_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Tag_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Tag_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Tag_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.tags SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Tag_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := `DELETE FROM public.tags WHERE ` + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Tag ////////////////
func MassInsert_Tag(rows []Tag, db XODB) error {
	var err error
	ln := len(rows)
	s := `(?,?,?,?),` //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := `INSERT INTO public.tags (` +
		`Name, Count, IsBlocked, CreatedTime` +
		`) VALUES ` + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.IsBlocked)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Tag(rows []Tag, db XODB) error {
	var err error
	ln := len(rows)
	s := `(?,?,?,?),` //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := `REPLACE INTO public.tags (` +
		`Name, Count, IsBlocked, CreatedTime` +
		`) VALUES ` + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.IsBlocked)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// Bench4ById retrieves a row from 'public.bench4' as a Bench4.
//
// Generated from index 'bench4_pkey'.
func Bench4ById(db XODB, id int) (*Bench4, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Text, Time, Name, Indexed ` +
		`FROM public.bench4 ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	b := Bench4{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&b.Id, &b.Text, &b.Time, &b.Name, &b.Indexed)
	if err != nil {
		return nil, err
	}

	return &b, nil
}

// TagsByCount retrieves a row from 'public.tags' as a Tag.
//
// Generated from index 'cnt'.
func TagsByCount(db XODB, count int) ([]*Tag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Name, Count, IsBlocked, CreatedTime ` +
		`FROM public.tags ` +
		`WHERE Count = $1`

	// run query
	XOLog(sqlstr, count)
	q, err := db.Query(sqlstr, count)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Tag{}
	for q.Next() {
		t := Tag{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.Id, &t.Name, &t.Count, &t.IsBlocked, &t.CreatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TagsByCreatedTime retrieves a row from 'public.tags' as a Tag.
//
// Generated from index 'tags_CreatedTime_idx'.
func TagsByCreatedTime(db XODB, createdTime int) ([]*Tag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Name, Count, IsBlocked, CreatedTime ` +
		`FROM public.tags ` +
		`WHERE CreatedTime = $1`

	// run query
	XOLog(sqlstr, createdTime)
	q, err := db.Query(sqlstr, createdTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Tag{}
	for q.Next() {
		t := Tag{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.Id, &t.Name, &t.Count, &t.IsBlocked, &t.CreatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TagById retrieves a row from 'public.tags' as a Tag.
//
// Generated from index 'tags_pkey'.
func TagById(db XODB, id int) (*Tag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Name, Count, IsBlocked, CreatedTime ` +
		`FROM public.tags ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	t := Tag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&t.Id, &t.Name, &t.Count, &t.IsBlocked, &t.CreatedTime)
	if err != nil {
		return nil, err
	}

	return &t, nil
}

// XODB is the common interface for database operations that can be used with
// types from schema 'public'.
//
// This should work with database/sql.DB and database/sql.Tx.
type XODB interface {
	Exec(string, ...interface{}) (sql.Result, error)
	Query(string, ...interface{}) (*sql.Rows, error)
	QueryRow(string, ...interface{}) *sql.Row
}

// XOLog provides the log func used by generated queries.
var _sqlLogFile *os.File
var XOLog = func(strings ...interface{}) {
	if config.IS_DEBUG && false {
		if _sqlLogFile == nil {
			_sqlLogFile, _ = os.OpenFile("./logs_sql_"+helper.IntToStr(helper.TimeNow())+".sql", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
		}
		_sqlLogFile.WriteString(fmt.Sprintln(strings...))
		_sqlLogFile.Sync()
	}
}

// ScannerValuer is the common interface for types that implement both the
// database/sql.Scanner and sql/driver.Valuer interfaces.
type ScannerValuer interface {
	sql.Scanner
	driver.Valuer
}

// StringSlice is a slice of strings.
type StringSlice []string

// quoteEscapeRegex is the regex to match escaped characters in a string.
var quoteEscapeRegex = regexp.MustCompile(`([^\\]([\\]{2})*)\\"`)

// Scan satisfies the sql.Scanner interface for StringSlice.
func (ss *StringSlice) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid StringSlice")
	}

	// change quote escapes for csv parser
	str := quoteEscapeRegex.ReplaceAllString(string(buf), `$1""`)
	str = strings.Replace(str, `\\`, `\`, -1)

	// remove braces
	str = str[1 : len(str)-1]

	// bail if only one
	if len(str) == 0 {
		*ss = StringSlice([]string{})
		return nil
	}

	// parse with csv reader
	cr := csv.NewReader(strings.NewReader(str))
	slice, err := cr.Read()
	if err != nil {
		fmt.Printf("exiting!: %v\n", err)
		return err
	}

	*ss = StringSlice(slice)

	return nil
}

// Value satisfies the driver.Valuer interface for StringSlice.
func (ss StringSlice) Value() (driver.Value, error) {
	v := make([]string, len(ss))
	for i, s := range ss {
		v[i] = `"` + strings.Replace(strings.Replace(s, `\`, `\\\`, -1), `"`, `\"`, -1) + `"`
	}
	return "{" + strings.Join(v, ",") + "}", nil
}

// Slice is a slice of ScannerValuers.
type Slice []ScannerValuer

////////////// ME /////////////
type whereClause struct {
	condition string
	args      []interface{}
}

type updateClause struct {
	col string
	val interface{}
}

func whereClusesToSql(wheres []whereClause, whereSep string) (string, []interface{}) {
	var wheresArr []string
	for _, w := range wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, whereSep)

	var args []interface{}
	for _, w := range wheres {
		args = append(args, w.args...)
	}
	return wheresStr, args
}

type postgresDollar struct {
	i int //current counter
}

func (dollar *postgresDollar) nextDollar() string {
	dollar.i += 1
	return fmt.Sprintf(" $%d ", dollar.i)
}

func (dollar *postgresDollar) nextNum() int {
	dollar.i += 1
	return dollar.i
}

func (dollar *postgresDollar) nextManys(size int) string {
	if size < 1 {
		return ""
	}

	if size == 1 {
		return dollar.nextDollar()
	}

	start := dollar.i + 1
	//end:= start + size

	outArry := []string{}
	for n := 0; n < size; n++ {
		outArry = append(outArry, fmt.Sprintf("$%d", start))
		start++
	}
	dollar.i = start - 1

	return " " + strings.Join(outArry, ",") + " "
}
